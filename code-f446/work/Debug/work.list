
work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000673c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006974  08006974  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006974  08006974  00007974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800697c  0800697c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800697c  0800697c  0000797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006980  08006980  00007980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006984  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000070  080069f4  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  080069f4  0000847c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103d1  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002838  00000000  00000000  00018471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b47  00000000  00000000  0001bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002371a  00000000  00000000  0001c66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012632  00000000  00000000  0003fd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2ce8  00000000  00000000  000523bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001250a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  001250e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0012951c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068f4 	.word	0x080068f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080068f4 	.word	0x080068f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <GetElapsedTick>:

extern UART_HandleTypeDef huart2;


uint32_t GetElapsedTick(uint32_t start)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 8000d84:	f001 f884 	bl	8001e90 <HAL_GetTick>
 8000d88:	60f8      	str	r0, [r7, #12]
	if (now >= start)
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d303      	bcc.n	8000d9a <GetElapsedTick+0x1e>
		return now - start;
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	e003      	b.n	8000da2 <GetElapsedTick+0x26>
	else
		return 0xffffffff - start + now;
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	3b01      	subs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <__io_putchar>:


// printf()함수를 실행했을 때 UART2로 출력한다.
// printf() 출력내용에 개행문자 \n이 있어야 UART로 출력된다.
int __io_putchar(int ch)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8000db4:	1d39      	adds	r1, r7, #4
 8000db6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <__io_putchar+0x20>)
 8000dbe:	f003 fe05 	bl	80049cc <HAL_UART_Transmit>
	return ch;
 8000dc2:	687b      	ldr	r3, [r7, #4]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200001c0 	.word	0x200001c0

08000dd0 <Trigger_HCSR04>:

#include "hc-sr04.h"
#include "basic.h"

void Trigger_HCSR04()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dda:	4807      	ldr	r0, [pc, #28]	@ (8000df8 <Trigger_HCSR04+0x28>)
 8000ddc:	f001 fbd8 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f001 f861 	bl	8001ea8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dec:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <Trigger_HCSR04+0x28>)
 8000dee:	f001 fbcf 	bl	8002590 <HAL_GPIO_WritePin>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40020000 	.word	0x40020000

08000dfc <HAL_TIM_IC_CaptureCallback>:
uint32_t rising_time;
uint32_t falling_time;

// TIM1 CC 인터럽트 핸들러
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a20      	ldr	r2, [pc, #128]	@ (8000e8c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d139      	bne.n	8000e82 <HAL_TIM_IC_CaptureCallback+0x86>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7f1b      	ldrb	r3, [r3, #28]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d135      	bne.n	8000e82 <HAL_TIM_IC_CaptureCallback+0x86>
	{
		if ((TIM1->CCER & TIM_CCER_CC1P) == 0)	// Rising Edge 감지
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_TIM_IC_CaptureCallback+0x90>)
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d117      	bne.n	8000e52 <HAL_TIM_IC_CaptureCallback+0x56>
		{
			rising_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e22:	2100      	movs	r1, #0
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f003 f849 	bl	8003ebc <HAL_TIM_ReadCapturedValue>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a18      	ldr	r2, [pc, #96]	@ (8000e90 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000e2e:	6013      	str	r3, [r2, #0]
			// 다음에 Falling Edge 감지
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6a1a      	ldr	r2, [r3, #32]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 020a 	bic.w	r2, r2, #10
 8000e3e:	621a      	str	r2, [r3, #32]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6a1a      	ldr	r2, [r3, #32]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0202 	orr.w	r2, r2, #2
 8000e4e:	621a      	str	r2, [r3, #32]
			// 다음에 Rising Edge 감지
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			is_capture_done = 1;
		}
	}
}
 8000e50:	e017      	b.n	8000e82 <HAL_TIM_IC_CaptureCallback+0x86>
			falling_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e52:	2100      	movs	r1, #0
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f003 f831 	bl	8003ebc <HAL_TIM_ReadCapturedValue>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000e5e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a1a      	ldr	r2, [r3, #32]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 020a 	bic.w	r2, r2, #10
 8000e6e:	621a      	str	r2, [r3, #32]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6a12      	ldr	r2, [r2, #32]
 8000e7a:	621a      	str	r2, [r3, #32]
			is_capture_done = 1;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	20000090 	.word	0x20000090
 8000e94:	20000094 	.word	0x20000094
 8000e98:	2000008c 	.word	0x2000008c
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <Calculate_Distance>:

// 거리 계산
uint32_t Calculate_Distance()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	uint32_t pulse_width;

	if (falling_time > rising_time)
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <Calculate_Distance+0x78>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <Calculate_Distance+0x7c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d906      	bls.n	8000ec0 <Calculate_Distance+0x20>
		pulse_width = falling_time - rising_time;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <Calculate_Distance+0x78>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <Calculate_Distance+0x7c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	e008      	b.n	8000ed2 <Calculate_Distance+0x32>
	else
		pulse_width = (0xffff - falling_time) + rising_time;
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <Calculate_Distance+0x7c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <Calculate_Distance+0x78>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000ece:	33ff      	adds	r3, #255	@ 0xff
 8000ed0:	607b      	str	r3, [r7, #4]

	return (pulse_width * 0.0343) / 2;	// cm단위
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fb2e 	bl	8000534 <__aeabi_ui2d>
 8000ed8:	a30d      	add	r3, pc, #52	@ (adr r3, 8000f10 <Calculate_Distance+0x70>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fba3 	bl	8000628 <__aeabi_dmul>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ef2:	f7ff fcc3 	bl	800087c <__aeabi_ddiv>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f7ff fda5 	bl	8000a4c <__aeabi_d2uiz>
 8000f02:	4603      	mov	r3, r0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	f3af 8000 	nop.w
 8000f10:	04816f00 	.word	0x04816f00
 8000f14:	3fa18fc5 	.word	0x3fa18fc5
 8000f18:	20000094 	.word	0x20000094
 8000f1c:	20000090 	.word	0x20000090

08000f20 <RunSonicSensor>:

uint32_t tm_sonic;
uint32_t sonic_distance;

void RunSonicSensor()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	if (GetElapsedTick(tm_sonic) >= 200)
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <RunSonicSensor+0x4c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff27 	bl	8000d7c <GetElapsedTick>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f32:	d918      	bls.n	8000f66 <RunSonicSensor+0x46>
	{
		tm_sonic = HAL_GetTick();
 8000f34:	f000 ffac 	bl	8001e90 <HAL_GetTick>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f6c <RunSonicSensor+0x4c>)
 8000f3c:	6013      	str	r3, [r2, #0]

		Trigger_HCSR04();
 8000f3e:	f7ff ff47 	bl	8000dd0 <Trigger_HCSR04>

		if (is_capture_done)
 8000f42:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <RunSonicSensor+0x50>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00d      	beq.n	8000f66 <RunSonicSensor+0x46>
		{
			sonic_distance = Calculate_Distance();
 8000f4a:	f7ff ffa9 	bl	8000ea0 <Calculate_Distance>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <RunSonicSensor+0x54>)
 8000f52:	6013      	str	r3, [r2, #0]
			printf("Distance: %lu cm\r\n", sonic_distance);
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <RunSonicSensor+0x54>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <RunSonicSensor+0x58>)
 8000f5c:	f004 fdfe 	bl	8005b5c <iprintf>
			is_capture_done = 0;
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <RunSonicSensor+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000098 	.word	0x20000098
 8000f70:	2000008c 	.word	0x2000008c
 8000f74:	2000009c 	.word	0x2000009c
 8000f78:	0800690c 	.word	0x0800690c

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f80:	f000 ff20 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f84:	f000 f812 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f88:	f000 fa4a 	bl	8001420 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f8c:	f000 fa1e 	bl	80013cc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000f90:	f000 f956 	bl	8001240 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f94:	f000 f8de 	bl	8001154 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f98:	f000 f9a0 	bl	80012dc <MX_TIM4_Init>
  MX_TIM1_Init();
 8000f9c:	f000 f866 	bl	800106c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  InitWork();
 8000fa0:	f000 fd70 	bl	8001a84 <InitWork>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DoWork();
 8000fa4:	f000 fd98 	bl	8001ad8 <DoWork>
 8000fa8:	e7fc      	b.n	8000fa4 <main+0x28>
	...

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	@ 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2234      	movs	r2, #52	@ 0x34
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f004 ff16 	bl	8005dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	4b23      	ldr	r3, [pc, #140]	@ (8001064 <SystemClock_Config+0xb8>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	4a22      	ldr	r2, [pc, #136]	@ (8001064 <SystemClock_Config+0xb8>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe0:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <SystemClock_Config+0xb8>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fec:	2300      	movs	r3, #0
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <SystemClock_Config+0xbc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8001068 <SystemClock_Config+0xbc>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <SystemClock_Config+0xbc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001014:	2310      	movs	r3, #16
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001018:	2300      	movs	r3, #0
 800101a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fe33 	bl	8002c8c <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800102c:	f000 fa68 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fad4 	bl	80025f8 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001056:	f000 fa53 	bl	8001500 <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3750      	adds	r7, #80	@ 0x50
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001096:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <MX_TIM1_Init+0xe0>)
 8001098:	4a2d      	ldr	r2, [pc, #180]	@ (8001150 <MX_TIM1_Init+0xe4>)
 800109a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800109c:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <MX_TIM1_Init+0xe0>)
 800109e:	220f      	movs	r2, #15
 80010a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <MX_TIM1_Init+0xe0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010a8:	4b28      	ldr	r3, [pc, #160]	@ (800114c <MX_TIM1_Init+0xe0>)
 80010aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b0:	4b26      	ldr	r3, [pc, #152]	@ (800114c <MX_TIM1_Init+0xe0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010b6:	4b25      	ldr	r3, [pc, #148]	@ (800114c <MX_TIM1_Init+0xe0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b23      	ldr	r3, [pc, #140]	@ (800114c <MX_TIM1_Init+0xe0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010c2:	4822      	ldr	r0, [pc, #136]	@ (800114c <MX_TIM1_Init+0xe0>)
 80010c4:	f002 f880 	bl	80031c8 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80010ce:	f000 fa17 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	4619      	mov	r1, r3
 80010de:	481b      	ldr	r0, [pc, #108]	@ (800114c <MX_TIM1_Init+0xe0>)
 80010e0:	f002 fe24 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010ea:	f000 fa09 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80010ee:	4817      	ldr	r0, [pc, #92]	@ (800114c <MX_TIM1_Init+0xe0>)
 80010f0:	f002 fa4c 	bl	800358c <HAL_TIM_IC_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80010fa:	f000 fa01 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	480f      	ldr	r0, [pc, #60]	@ (800114c <MX_TIM1_Init+0xe0>)
 800110e:	f003 fb7d 	bl	800480c <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001118:	f000 f9f2 	bl	8001500 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800111c:	230a      	movs	r3, #10
 800111e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001120:	2301      	movs	r3, #1
 8001122:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	@ (800114c <MX_TIM1_Init+0xe0>)
 8001134:	f002 fc9c 	bl	8003a70 <HAL_TIM_IC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800113e:	f000 f9df 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	@ 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200000a0 	.word	0x200000a0
 8001150:	40010000 	.word	0x40010000

08001154 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	@ 0x38
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001184:	4b2d      	ldr	r3, [pc, #180]	@ (800123c <MX_TIM2_Init+0xe8>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 800118c:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <MX_TIM2_Init+0xe8>)
 800118e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001192:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <MX_TIM2_Init+0xe8>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800119a:	4b28      	ldr	r3, [pc, #160]	@ (800123c <MX_TIM2_Init+0xe8>)
 800119c:	2263      	movs	r2, #99	@ 0x63
 800119e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b26      	ldr	r3, [pc, #152]	@ (800123c <MX_TIM2_Init+0xe8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b25      	ldr	r3, [pc, #148]	@ (800123c <MX_TIM2_Init+0xe8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ac:	4823      	ldr	r0, [pc, #140]	@ (800123c <MX_TIM2_Init+0xe8>)
 80011ae:	f002 f80b 	bl	80031c8 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011b8:	f000 f9a2 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c6:	4619      	mov	r1, r3
 80011c8:	481c      	ldr	r0, [pc, #112]	@ (800123c <MX_TIM2_Init+0xe8>)
 80011ca:	f002 fdaf 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011d4:	f000 f994 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011d8:	4818      	ldr	r0, [pc, #96]	@ (800123c <MX_TIM2_Init+0xe8>)
 80011da:	f002 f8b5 	bl	8003348 <HAL_TIM_PWM_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011e4:	f000 f98c 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	4619      	mov	r1, r3
 80011f6:	4811      	ldr	r0, [pc, #68]	@ (800123c <MX_TIM2_Init+0xe8>)
 80011f8:	f003 fb08 	bl	800480c <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001202:	f000 f97d 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001206:	2360      	movs	r3, #96	@ 0x60
 8001208:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 800120a:	2331      	movs	r3, #49	@ 0x31
 800120c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	4807      	ldr	r0, [pc, #28]	@ (800123c <MX_TIM2_Init+0xe8>)
 800121e:	f002 fcc3 	bl	8003ba8 <HAL_TIM_PWM_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001228:	f000 f96a 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800122c:	4803      	ldr	r0, [pc, #12]	@ (800123c <MX_TIM2_Init+0xe8>)
 800122e:	f000 fa75 	bl	800171c <HAL_TIM_MspPostInit>

}
 8001232:	bf00      	nop
 8001234:	3738      	adds	r7, #56	@ 0x38
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200000e8 	.word	0x200000e8

08001240 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800125c:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <MX_TIM3_Init+0x94>)
 800125e:	4a1e      	ldr	r2, [pc, #120]	@ (80012d8 <MX_TIM3_Init+0x98>)
 8001260:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 8001262:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <MX_TIM3_Init+0x94>)
 8001264:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001268:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <MX_TIM3_Init+0x94>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001270:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <MX_TIM3_Init+0x94>)
 8001272:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001276:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <MX_TIM3_Init+0x94>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <MX_TIM3_Init+0x94>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001284:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <MX_TIM3_Init+0x94>)
 8001286:	f001 ff9f 	bl	80031c8 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001290:	f000 f936 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001298:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	4619      	mov	r1, r3
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <MX_TIM3_Init+0x94>)
 80012a2:	f002 fd43 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012ac:	f000 f928 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_TIM3_Init+0x94>)
 80012be:	f003 faa5 	bl	800480c <HAL_TIMEx_MasterConfigSynchronization>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012c8:	f000 f91a 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000130 	.word	0x20000130
 80012d8:	40000400 	.word	0x40000400

080012dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08e      	sub	sp, #56	@ 0x38
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 800130e:	4a2e      	ldr	r2, [pc, #184]	@ (80013c8 <MX_TIM4_Init+0xec>)
 8001310:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001312:	4b2c      	ldr	r3, [pc, #176]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 8001314:	220f      	movs	r2, #15
 8001316:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 800131e:	4b29      	ldr	r3, [pc, #164]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 8001320:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001324:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001332:	4824      	ldr	r0, [pc, #144]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 8001334:	f001 ff48 	bl	80031c8 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800133e:	f000 f8df 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800134c:	4619      	mov	r1, r3
 800134e:	481d      	ldr	r0, [pc, #116]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 8001350:	f002 fcec 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800135a:	f000 f8d1 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800135e:	4819      	ldr	r0, [pc, #100]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 8001360:	f001 fff2 	bl	8003348 <HAL_TIM_PWM_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800136a:	f000 f8c9 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	4619      	mov	r1, r3
 800137c:	4811      	ldr	r0, [pc, #68]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 800137e:	f003 fa45 	bl	800480c <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001388:	f000 f8ba 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138c:	2360      	movs	r3, #96	@ 0x60
 800138e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 8001390:	f240 53db 	movw	r3, #1499	@ 0x5db
 8001394:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4807      	ldr	r0, [pc, #28]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 80013a6:	f002 fbff 	bl	8003ba8 <HAL_TIM_PWM_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80013b0:	f000 f8a6 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013b4:	4803      	ldr	r0, [pc, #12]	@ (80013c4 <MX_TIM4_Init+0xe8>)
 80013b6:	f000 f9b1 	bl	800171c <HAL_TIM_MspPostInit>

}
 80013ba:	bf00      	nop
 80013bc:	3738      	adds	r7, #56	@ 0x38
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000178 	.word	0x20000178
 80013c8:	40000800 	.word	0x40000800

080013cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <MX_USART2_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 8001404:	f003 fa92 	bl	800492c <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f877 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200001c0 	.word	0x200001c0
 800141c:	40004400 	.word	0x40004400

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b2e      	ldr	r3, [pc, #184]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a2d      	ldr	r2, [pc, #180]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a26      	ldr	r2, [pc, #152]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a1f      	ldr	r2, [pc, #124]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a18      	ldr	r2, [pc, #96]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <MX_GPIO_Init+0xd4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ac:	4812      	ldr	r0, [pc, #72]	@ (80014f8 <MX_GPIO_Init+0xd8>)
 80014ae:	f001 f86f 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	480d      	ldr	r0, [pc, #52]	@ (80014fc <MX_GPIO_Init+0xdc>)
 80014c8:	f000 feb6 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <MX_GPIO_Init+0xd8>)
 80014e6:	f000 fea7 	bl	8002238 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	@ 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020800 	.word	0x40020800

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <Error_Handler+0x8>

0800150c <Servo_Set_Angle>:
#include "basic.h"
#include "sg90_servo.h"
#include "hc-sr04.h"

void Servo_Set_Angle(uint8_t angle)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	if (angle > 180)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2bb4      	cmp	r3, #180	@ 0xb4
 800151a:	d901      	bls.n	8001520 <Servo_Set_Angle+0x14>
		angle = 180;
 800151c:	23b4      	movs	r3, #180	@ 0xb4
 800151e:	71fb      	strb	r3, [r7, #7]

	// 0도=0.5ms, 180도=2.5ms
	uint32_t pulse = 500 + ((angle * 2000) / 180);
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <Servo_Set_Angle+0x48>)
 800152c:	fb82 1203 	smull	r1, r2, r2, r3
 8001530:	441a      	add	r2, r3
 8001532:	11d2      	asrs	r2, r2, #7
 8001534:	17db      	asrs	r3, r3, #31
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800153c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <Servo_Set_Angle+0x4c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	b60b60b7 	.word	0xb60b60b7
 8001558:	20000178 	.word	0x20000178

0800155c <ChangeServoSG90Pwm>:

uint32_t tm_sg90;
uint8_t sg90_angle = 0;

void ChangeServoSG90Pwm()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

		Servo_Set_Angle(sg90_angle);
	}
	*/

	if (sonic_distance <= 15)
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <ChangeServoSG90Pwm+0x38>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d803      	bhi.n	8001570 <ChangeServoSG90Pwm+0x14>
		sg90_angle = 180;
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <ChangeServoSG90Pwm+0x3c>)
 800156a:	22b4      	movs	r2, #180	@ 0xb4
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e00a      	b.n	8001586 <ChangeServoSG90Pwm+0x2a>
	else if (sonic_distance <= 30)
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <ChangeServoSG90Pwm+0x38>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b1e      	cmp	r3, #30
 8001576:	d803      	bhi.n	8001580 <ChangeServoSG90Pwm+0x24>
		sg90_angle = 90;
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <ChangeServoSG90Pwm+0x3c>)
 800157a:	225a      	movs	r2, #90	@ 0x5a
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e002      	b.n	8001586 <ChangeServoSG90Pwm+0x2a>
	else
		sg90_angle = 0;
 8001580:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <ChangeServoSG90Pwm+0x3c>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]

	Servo_Set_Angle(sg90_angle);
 8001586:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <ChangeServoSG90Pwm+0x3c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ffbe 	bl	800150c <Servo_Set_Angle>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000009c 	.word	0x2000009c
 8001598:	20000208 	.word	0x20000208

0800159c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	@ 0x30
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a3f      	ldr	r2, [pc, #252]	@ (8001708 <HAL_TIM_Base_MspInit+0x11c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d135      	bne.n	800167a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	4b3e      	ldr	r3, [pc, #248]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	4a3d      	ldr	r2, [pc, #244]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6453      	str	r3, [r2, #68]	@ 0x44
 800161e:	4b3b      	ldr	r3, [pc, #236]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	4b37      	ldr	r3, [pc, #220]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a36      	ldr	r2, [pc, #216]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b34      	ldr	r3, [pc, #208]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001646:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001658:	2301      	movs	r3, #1
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	482b      	ldr	r0, [pc, #172]	@ (8001710 <HAL_TIM_Base_MspInit+0x124>)
 8001664:	f000 fde8 	bl	8002238 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	201b      	movs	r0, #27
 800166e:	f000 fd1a 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001672:	201b      	movs	r0, #27
 8001674:	f000 fd33 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001678:	e042      	b.n	8001700 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001682:	d10e      	bne.n	80016a2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	4b20      	ldr	r3, [pc, #128]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	4a1f      	ldr	r2, [pc, #124]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6413      	str	r3, [r2, #64]	@ 0x40
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
}
 80016a0:	e02e      	b.n	8001700 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001714 <HAL_TIM_Base_MspInit+0x128>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d116      	bne.n	80016da <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b16      	ldr	r3, [pc, #88]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	4a15      	ldr	r2, [pc, #84]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	201d      	movs	r0, #29
 80016ce:	f000 fcea 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016d2:	201d      	movs	r0, #29
 80016d4:	f000 fd03 	bl	80020de <HAL_NVIC_EnableIRQ>
}
 80016d8:	e012      	b.n	8001700 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM4)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a0e      	ldr	r2, [pc, #56]	@ (8001718 <HAL_TIM_Base_MspInit+0x12c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d10d      	bne.n	8001700 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	4a07      	ldr	r2, [pc, #28]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_TIM_Base_MspInit+0x120>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	@ 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40010000 	.word	0x40010000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	40000400 	.word	0x40000400
 8001718:	40000800 	.word	0x40000800

0800171c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	@ 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800173c:	d11e      	bne.n	800177c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <HAL_TIM_MspPostInit+0xb0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a21      	ldr	r2, [pc, #132]	@ (80017cc <HAL_TIM_MspPostInit+0xb0>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <HAL_TIM_MspPostInit+0xb0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800175a:	2320      	movs	r3, #32
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800176a:	2301      	movs	r3, #1
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4816      	ldr	r0, [pc, #88]	@ (80017d0 <HAL_TIM_MspPostInit+0xb4>)
 8001776:	f000 fd5f 	bl	8002238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800177a:	e022      	b.n	80017c2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <HAL_TIM_MspPostInit+0xb8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d11d      	bne.n	80017c2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <HAL_TIM_MspPostInit+0xb0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a0f      	ldr	r2, [pc, #60]	@ (80017cc <HAL_TIM_MspPostInit+0xb0>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <HAL_TIM_MspPostInit+0xb0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017a2:	2340      	movs	r3, #64	@ 0x40
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017b2:	2302      	movs	r3, #2
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <HAL_TIM_MspPostInit+0xbc>)
 80017be:	f000 fd3b 	bl	8002238 <HAL_GPIO_Init>
}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	@ 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40000800 	.word	0x40000800
 80017d8:	40020400 	.word	0x40020400

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	@ 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_UART_MspInit+0x94>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d133      	bne.n	8001866 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	4a1b      	ldr	r2, [pc, #108]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180c:	6413      	str	r3, [r2, #64]	@ 0x40
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_UART_MspInit+0x98>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001836:	230c      	movs	r3, #12
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001846:	2307      	movs	r3, #7
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4809      	ldr	r0, [pc, #36]	@ (8001878 <HAL_UART_MspInit+0x9c>)
 8001852:	f000 fcf1 	bl	8002238 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2026      	movs	r0, #38	@ 0x26
 800185c:	f000 fc23 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001860:	2026      	movs	r0, #38	@ 0x26
 8001862:	f000 fc3c 	bl	80020de <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	@ 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40004400 	.word	0x40004400
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <NMI_Handler+0x4>

08001884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <MemManage_Handler+0x4>

08001894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d2:	f000 fac9 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <TIM1_CC_IRQHandler+0x10>)
 80018e2:	f001 ffd5 	bl	8003890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200000a0 	.word	0x200000a0

080018f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <TIM3_IRQHandler+0x10>)
 80018f6:	f001 ffcb 	bl	8003890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000130 	.word	0x20000130

08001904 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <USART2_IRQHandler+0x10>)
 800190a:	f003 f90f 	bl	8004b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200001c0 	.word	0x200001c0

08001918 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e00a      	b.n	8001940 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192a:	f3af 8000 	nop.w
 800192e:	4601      	mov	r1, r0
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	60ba      	str	r2, [r7, #8]
 8001936:	b2ca      	uxtb	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbf0      	blt.n	800192a <_read+0x12>
  }

  return len;
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e009      	b.n	8001978 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fa1d 	bl	8000dac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbf1      	blt.n	8001964 <_write+0x12>
  }
  return len;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_close>:

int _close(int file)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b2:	605a      	str	r2, [r3, #4]
  return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_isatty>:

int _isatty(int file)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d207      	bcs.n	8001a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a24:	f004 fa30 	bl	8005e88 <__errno>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e009      	b.n	8001a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <_sbrk+0x64>)
 8001a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20020000 	.word	0x20020000
 8001a54:	00000400 	.word	0x00000400
 8001a58:	2000020c 	.word	0x2000020c
 8001a5c:	20000480 	.word	0x20000480

08001a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <InitWork>:
uint8_t rx2buff[256];
uint8_t rx2_r_idx = 0;
uint8_t rx2_w_idx = 0;

void InitWork()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	printf("Start\r\n");
 8001a88:	480c      	ldr	r0, [pc, #48]	@ (8001abc <InitWork+0x38>)
 8001a8a:	f004 f8cf 	bl	8005c2c <puts>

	// UART2 RX 인터럽트 활성
	HAL_UART_Receive_IT(&huart2, &rx2data, 1);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	490b      	ldr	r1, [pc, #44]	@ (8001ac0 <InitWork+0x3c>)
 8001a92:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <InitWork+0x40>)
 8001a94:	f003 f825 	bl	8004ae2 <HAL_UART_Receive_IT>

	// TIMER1 CH1 인터럽트 활성(Input Capture, PA8) - HC-SR04
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	480b      	ldr	r0, [pc, #44]	@ (8001ac8 <InitWork+0x44>)
 8001a9c:	f001 fdd0 	bl	8003640 <HAL_TIM_IC_Start_IT>

	// TIMER2 CH1 인터럽트 활성(PWM, PA5)
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	480a      	ldr	r0, [pc, #40]	@ (8001acc <InitWork+0x48>)
 8001aa4:	f001 fcaa 	bl	80033fc <HAL_TIM_PWM_Start>

	// TIMER3 인터럽트 활성
	HAL_TIM_Base_Start_IT(&htim3);
 8001aa8:	4809      	ldr	r0, [pc, #36]	@ (8001ad0 <InitWork+0x4c>)
 8001aaa:	f001 fbdd 	bl	8003268 <HAL_TIM_Base_Start_IT>

	// TIMER4 CH1 인터럽트 활성(PWM, PB6) - SG90 Servo Motor
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4808      	ldr	r0, [pc, #32]	@ (8001ad4 <InitWork+0x50>)
 8001ab2:	f001 fca3 	bl	80033fc <HAL_TIM_PWM_Start>
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	08006920 	.word	0x08006920
 8001ac0:	20000214 	.word	0x20000214
 8001ac4:	200001c0 	.word	0x200001c0
 8001ac8:	200000a0 	.word	0x200000a0
 8001acc:	200000e8 	.word	0x200000e8
 8001ad0:	20000130 	.word	0x20000130
 8001ad4:	20000178 	.word	0x20000178

08001ad8 <DoWork>:

uint32_t value;

void DoWork()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	ReadButton();
 8001adc:	f000 f8e8 	bl	8001cb0 <ReadButton>
	CheckButtonPressed();
 8001ae0:	f000 f928 	bl	8001d34 <CheckButtonPressed>
	ChangeRunLed();
 8001ae4:	f000 f8ba 	bl	8001c5c <ChangeRunLed>

	CheckUart2Rx();
 8001ae8:	f000 f832 	bl	8001b50 <CheckUart2Rx>
	ChangeRunLedPwm();
 8001aec:	f000 f806 	bl	8001afc <ChangeRunLedPwm>
	ChangeServoSG90Pwm();
 8001af0:	f7ff fd34 	bl	800155c <ChangeServoSG90Pwm>

	RunSonicSensor();
 8001af4:	f7ff fa14 	bl	8000f20 <RunSonicSensor>
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <ChangeRunLedPwm>:

uint32_t tm_run_led_pwm;

// Timer2-Ch1(PWM)을 사용해서 Run LED의 밝기를 변경한다.
void ChangeRunLedPwm()
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	// 10msec마다 PWM CCR1값을 바꾼다.
	if (GetElapsedTick(tm_run_led_pwm) > 10)
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <ChangeRunLedPwm+0x4c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f939 	bl	8000d7c <GetElapsedTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b0a      	cmp	r3, #10
 8001b0e:	d919      	bls.n	8001b44 <ChangeRunLedPwm+0x48>
	{
		tm_run_led_pwm = HAL_GetTick();
 8001b10:	f000 f9be 	bl	8001e90 <HAL_GetTick>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <ChangeRunLedPwm+0x4c>)
 8001b18:	6013      	str	r3, [r2, #0]

		// Change Duty
		// 밝기를 줄이기 위해 1/4을 곱함
		TIM2->CCR1 = value/4;
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <ChangeRunLedPwm+0x50>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	6353      	str	r3, [r2, #52]	@ 0x34
		value += 1;
 8001b26:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <ChangeRunLedPwm+0x50>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4a07      	ldr	r2, [pc, #28]	@ (8001b4c <ChangeRunLedPwm+0x50>)
 8001b2e:	6013      	str	r3, [r2, #0]
		if (value > TIM2->ARR)	// 100
 8001b30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <ChangeRunLedPwm+0x50>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d202      	bcs.n	8001b44 <ChangeRunLedPwm+0x48>
			value = 0;	// 1초 마다 0으로 설정됨 (10 x 100)
 8001b3e:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <ChangeRunLedPwm+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
	}
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000320 	.word	0x20000320
 8001b4c:	2000031c 	.word	0x2000031c

08001b50 <CheckUart2Rx>:


void CheckUart2Rx()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
	uint8_t rx;
	if (GetUart2RxByte(&rx))
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 f859 	bl	8001c10 <GetUart2RxByte>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <CheckUart2Rx+0x3c>
	{
		// Echo Back
		HAL_UART_Transmit(&huart2, &rx, 1, 0xffff);
 8001b64:	1df9      	adds	r1, r7, #7
 8001b66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4809      	ldr	r0, [pc, #36]	@ (8001b94 <CheckUart2Rx+0x44>)
 8001b6e:	f002 ff2d 	bl	80049cc <HAL_UART_Transmit>

		if (rx == '1')
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b31      	cmp	r3, #49	@ 0x31
 8001b76:	d103      	bne.n	8001b80 <CheckUart2Rx+0x30>
		{
			run_led_interval = 100;
 8001b78:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <CheckUart2Rx+0x48>)
 8001b7a:	2264      	movs	r2, #100	@ 0x64
 8001b7c:	601a      	str	r2, [r3, #0]
		else if (rx == '2')
		{
			run_led_interval = 200;
		}
	}
}
 8001b7e:	e005      	b.n	8001b8c <CheckUart2Rx+0x3c>
		else if (rx == '2')
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	2b32      	cmp	r3, #50	@ 0x32
 8001b84:	d102      	bne.n	8001b8c <CheckUart2Rx+0x3c>
			run_led_interval = 200;
 8001b86:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <CheckUart2Rx+0x48>)
 8001b88:	22c8      	movs	r2, #200	@ 0xc8
 8001b8a:	601a      	str	r2, [r3, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200001c0 	.word	0x200001c0
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_UART_RxCpltCallback>:


// UART2 수신 인터럽트 처리
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8001bdc <HAL_UART_RxCpltCallback+0x40>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d111      	bne.n	8001bd2 <HAL_UART_RxCpltCallback+0x36>
	{
		rx2buff[rx2_w_idx] = rx2data;
 8001bae:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_UART_RxCpltCallback+0x44>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_UART_RxCpltCallback+0x48>)
 8001bb6:	7819      	ldrb	r1, [r3, #0]
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_UART_RxCpltCallback+0x4c>)
 8001bba:	5499      	strb	r1, [r3, r2]
		rx2_w_idx = (rx2_w_idx + 1) % sizeof(rx2buff);
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <HAL_UART_RxCpltCallback+0x44>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_UART_RxCpltCallback+0x44>)
 8001bc6:	701a      	strb	r2, [r3, #0]

		// UART2 RX 인터럽트 활성
		HAL_UART_Receive_IT(&huart2, &rx2data, 1);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4906      	ldr	r1, [pc, #24]	@ (8001be4 <HAL_UART_RxCpltCallback+0x48>)
 8001bcc:	4807      	ldr	r0, [pc, #28]	@ (8001bec <HAL_UART_RxCpltCallback+0x50>)
 8001bce:	f002 ff88 	bl	8004ae2 <HAL_UART_Receive_IT>
	}
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40004400 	.word	0x40004400
 8001be0:	20000319 	.word	0x20000319
 8001be4:	20000214 	.word	0x20000214
 8001be8:	20000218 	.word	0x20000218
 8001bec:	200001c0 	.word	0x200001c0

08001bf0 <HAL_TIM_PeriodElapsedCallback>:

// TIMER3 인터럽트 처리 (1초 주기)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	if (run_led_source == 1)
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_TIM_PeriodElapsedCallback+0x14>
		ToggleRunLed();
 8001c00:	f000 f84c 	bl	8001c9c <ToggleRunLed>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000008 	.word	0x20000008

08001c10 <GetUart2RxByte>:


uint8_t GetUart2RxByte(uint8_t* rx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if (rx2_r_idx != rx2_w_idx)
 8001c18:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <GetUart2RxByte+0x40>)
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <GetUart2RxByte+0x44>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d00e      	beq.n	8001c42 <GetUart2RxByte+0x32>
	{
		*rx = rx2buff[rx2_r_idx];
 8001c24:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <GetUart2RxByte+0x40>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <GetUart2RxByte+0x48>)
 8001c2c:	5c9a      	ldrb	r2, [r3, r2]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	701a      	strb	r2, [r3, #0]
		rx2_r_idx = (rx2_r_idx + 1) % sizeof(rx2buff);
 8001c32:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <GetUart2RxByte+0x40>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <GetUart2RxByte+0x40>)
 8001c3c:	701a      	strb	r2, [r3, #0]
		return 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <GetUart2RxByte+0x34>
	}
	else
		return 0;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	20000318 	.word	0x20000318
 8001c54:	20000319 	.word	0x20000319
 8001c58:	20000218 	.word	0x20000218

08001c5c <ChangeRunLed>:


void ChangeRunLed()
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	if (run_led_source == 0)
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <ChangeRunLed+0x34>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d110      	bne.n	8001c8a <ChangeRunLed+0x2e>
	{
		if (GetElapsedTick(tm_run_led) >= run_led_interval)
 8001c68:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <ChangeRunLed+0x38>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff f885 	bl	8000d7c <GetElapsedTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <ChangeRunLed+0x3c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d306      	bcc.n	8001c8a <ChangeRunLed+0x2e>
		{
			tm_run_led = HAL_GetTick();
 8001c7c:	f000 f908 	bl	8001e90 <HAL_GetTick>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <ChangeRunLed+0x38>)
 8001c84:	6013      	str	r3, [r2, #0]
			ToggleRunLed();
 8001c86:	f000 f809 	bl	8001c9c <ToggleRunLed>
		}
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000210 	.word	0x20000210
 8001c98:	20000004 	.word	0x20000004

08001c9c <ToggleRunLed>:

void ToggleRunLed()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001ca0:	2120      	movs	r1, #32
 8001ca2:	4802      	ldr	r0, [pc, #8]	@ (8001cac <ToggleRunLed+0x10>)
 8001ca4:	f000 fc8d 	bl	80025c2 <HAL_GPIO_TogglePin>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40020000 	.word	0x40020000

08001cb0 <ReadButton>:
uint8_t rb_cont_cnt = 0;
uint8_t btn1_pressed = 0;
#define RB_CONT 50

void ReadButton()
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
	if (GetElapsedTick(tm_read_button) >= 1)
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <ReadButton+0x74>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f85e 	bl	8000d7c <GetElapsedTick>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d02a      	beq.n	8001d1c <ReadButton+0x6c>
	{
		tm_read_button = HAL_GetTick();
 8001cc6:	f000 f8e3 	bl	8001e90 <HAL_GetTick>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4a15      	ldr	r2, [pc, #84]	@ (8001d24 <ReadButton+0x74>)
 8001cce:	6013      	str	r3, [r2, #0]

		// Read Button1
		uint8_t val = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001cd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cd4:	4814      	ldr	r0, [pc, #80]	@ (8001d28 <ReadButton+0x78>)
 8001cd6:	f000 fc43 	bl	8002560 <HAL_GPIO_ReadPin>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
		// button pressed
		if (!val)
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d118      	bne.n	8001d16 <ReadButton+0x66>
		{
			if (rb_cont_cnt == RB_CONT)
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <ReadButton+0x7c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b32      	cmp	r3, #50	@ 0x32
 8001cea:	d109      	bne.n	8001d00 <ReadButton+0x50>
			{
				btn1_pressed = 1;
 8001cec:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <ReadButton+0x80>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
				rb_cont_cnt++;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <ReadButton+0x7c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <ReadButton+0x7c>)
 8001cfc:	701a      	strb	r2, [r3, #0]
		else
		{
			rb_cont_cnt = 0;
		}
	}
}
 8001cfe:	e00d      	b.n	8001d1c <ReadButton+0x6c>
			else if(rb_cont_cnt > RB_CONT)
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <ReadButton+0x7c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b32      	cmp	r3, #50	@ 0x32
 8001d06:	d809      	bhi.n	8001d1c <ReadButton+0x6c>
				rb_cont_cnt++;
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <ReadButton+0x7c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <ReadButton+0x7c>)
 8001d12:	701a      	strb	r2, [r3, #0]
}
 8001d14:	e002      	b.n	8001d1c <ReadButton+0x6c>
			rb_cont_cnt = 0;
 8001d16:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <ReadButton+0x7c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000324 	.word	0x20000324
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	20000328 	.word	0x20000328
 8001d30:	20000329 	.word	0x20000329

08001d34 <CheckButtonPressed>:


void CheckButtonPressed()
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
	if (btn1_pressed)
 8001d38:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <CheckButtonPressed+0x34>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00d      	beq.n	8001d5c <CheckButtonPressed+0x28>
	{
		btn1_pressed = 0;
 8001d40:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <CheckButtonPressed+0x34>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
		if (run_led_source == 0)
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <CheckButtonPressed+0x38>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d103      	bne.n	8001d56 <CheckButtonPressed+0x22>
			run_led_source = 1;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <CheckButtonPressed+0x38>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
		else
			run_led_source = 0;
	}
}
 8001d54:	e002      	b.n	8001d5c <CheckButtonPressed+0x28>
			run_led_source = 0;
 8001d56:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <CheckButtonPressed+0x38>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000329 	.word	0x20000329
 8001d6c:	20000008 	.word	0x20000008

08001d70 <Reset_Handler>:
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001da8 <LoopFillZerobss+0xe>
 8001d74:	f7ff fe74 	bl	8001a60 <SystemInit>
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <LoopFillZerobss+0x12>)
 8001d7a:	490d      	ldr	r1, [pc, #52]	@ (8001db0 <LoopFillZerobss+0x16>)
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <LoopFillZerobss+0x1a>)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:
 8001d82:	58d4      	ldr	r4, [r2, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:
 8001d88:	18c4      	adds	r4, r0, r3
 8001d8a:	428c      	cmp	r4, r1
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <LoopFillZerobss+0x1e>)
 8001d90:	4c0a      	ldr	r4, [pc, #40]	@ (8001dbc <LoopFillZerobss+0x22>)
 8001d92:	2300      	movs	r3, #0
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:
 8001d9a:	42a2      	cmp	r2, r4
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>
 8001d9e:	f004 f879 	bl	8005e94 <__libc_init_array>
 8001da2:	f7ff f8eb 	bl	8000f7c <main>
 8001da6:	4770      	bx	lr
 8001da8:	20020000 	.word	0x20020000
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000070 	.word	0x20000070
 8001db4:	08006984 	.word	0x08006984
 8001db8:	20000070 	.word	0x20000070
 8001dbc:	2000047c 	.word	0x2000047c

08001dc0 <ADC_IRQHandler>:
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e04 <HAL_Init+0x40>)
 8001dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <HAL_Init+0x40>)
 8001dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a07      	ldr	r2, [pc, #28]	@ (8001e04 <HAL_Init+0x40>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 f94f 	bl	8002090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df2:	200f      	movs	r0, #15
 8001df4:	f000 f808 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df8:	f7ff fbd0 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <HAL_InitTick+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_InitTick+0x58>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f967 	bl	80020fa <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d80a      	bhi.n	8001e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f000 f92f 	bl	80020a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4a06      	ldr	r2, [pc, #24]	@ (8001e64 <HAL_InitTick+0x5c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000010 	.word	0x20000010
 8001e64:	2000000c 	.word	0x2000000c

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_IncTick+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <HAL_IncTick+0x24>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000010 	.word	0x20000010
 8001e8c:	2000032c 	.word	0x2000032c

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <HAL_GetTick+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	2000032c 	.word	0x2000032c

08001ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff ffee 	bl	8001e90 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d005      	beq.n	8001ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_Delay+0x44>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ece:	bf00      	nop
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8f7      	bhi.n	8001ed0 <HAL_Delay+0x28>
  {
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000010 	.word	0x20000010

08001ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f22:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <__NVIC_SetPriorityGrouping+0x44>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	60d3      	str	r3, [r2, #12]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <__NVIC_GetPriorityGrouping+0x18>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	f003 0307 	and.w	r3, r3, #7
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	db0b      	blt.n	8001f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	4907      	ldr	r1, [pc, #28]	@ (8001f8c <__NVIC_EnableIRQ+0x38>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2001      	movs	r0, #1
 8001f76:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db0a      	blt.n	8001fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	490c      	ldr	r1, [pc, #48]	@ (8001fdc <__NVIC_SetPriority+0x4c>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb8:	e00a      	b.n	8001fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4908      	ldr	r1, [pc, #32]	@ (8001fe0 <__NVIC_SetPriority+0x50>)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	3b04      	subs	r3, #4
 8001fc8:	0112      	lsls	r2, r2, #4
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	440b      	add	r3, r1
 8001fce:	761a      	strb	r2, [r3, #24]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000e100 	.word	0xe000e100
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	@ 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f1c3 0307 	rsb	r3, r3, #7
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	bf28      	it	cs
 8002002:	2304      	movcs	r3, #4
 8002004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3304      	adds	r3, #4
 800200a:	2b06      	cmp	r3, #6
 800200c:	d902      	bls.n	8002014 <NVIC_EncodePriority+0x30>
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3b03      	subs	r3, #3
 8002012:	e000      	b.n	8002016 <NVIC_EncodePriority+0x32>
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	f04f 32ff 	mov.w	r2, #4294967295
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	401a      	ands	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43d9      	mvns	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	4313      	orrs	r3, r2
         );
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	@ 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800205c:	d301      	bcc.n	8002062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205e:	2301      	movs	r3, #1
 8002060:	e00f      	b.n	8002082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002062:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <SysTick_Config+0x40>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206a:	210f      	movs	r1, #15
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f7ff ff8e 	bl	8001f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	@ (800208c <SysTick_Config+0x40>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	@ (800208c <SysTick_Config+0x40>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff29 	bl	8001ef0 <__NVIC_SetPriorityGrouping>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b8:	f7ff ff3e 	bl	8001f38 <__NVIC_GetPriorityGrouping>
 80020bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff ff8e 	bl	8001fe4 <NVIC_EncodePriority>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff5d 	bl	8001f90 <__NVIC_SetPriority>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff31 	bl	8001f54 <__NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffa2 	bl	800204c <SysTick_Config>
 8002108:	4603      	mov	r3, r0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff feb6 	bl	8001e90 <HAL_GetTick>
 8002124:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d008      	beq.n	8002144 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2280      	movs	r2, #128	@ 0x80
 8002136:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e052      	b.n	80021ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0216 	bic.w	r2, r2, #22
 8002152:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002162:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <HAL_DMA_Abort+0x62>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0208 	bic.w	r2, r2, #8
 8002182:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002194:	e013      	b.n	80021be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002196:	f7ff fe7b 	bl	8001e90 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d90c      	bls.n	80021be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2203      	movs	r2, #3
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e015      	b.n	80021ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e4      	bne.n	8002196 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d0:	223f      	movs	r2, #63	@ 0x3f
 80021d2:	409a      	lsls	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d004      	beq.n	8002210 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2280      	movs	r2, #128	@ 0x80
 800220a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e00c      	b.n	800222a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2205      	movs	r2, #5
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	@ 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e165      	b.n	8002520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002254:	2201      	movs	r2, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	f040 8154 	bne.w	800251a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d005      	beq.n	800228a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	2b02      	cmp	r3, #2
 8002288:	d130      	bne.n	80022ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 0201 	and.w	r2, r3, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d017      	beq.n	8002328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d123      	bne.n	800237c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	220f      	movs	r2, #15
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	69b9      	ldr	r1, [r7, #24]
 8002378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0203 	and.w	r2, r3, #3
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80ae 	beq.w	800251a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002538 <HAL_GPIO_Init+0x300>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002538 <HAL_GPIO_Init+0x300>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002538 <HAL_GPIO_Init+0x300>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023da:	4a58      	ldr	r2, [pc, #352]	@ (800253c <HAL_GPIO_Init+0x304>)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	220f      	movs	r2, #15
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4f      	ldr	r2, [pc, #316]	@ (8002540 <HAL_GPIO_Init+0x308>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d025      	beq.n	8002452 <HAL_GPIO_Init+0x21a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4e      	ldr	r2, [pc, #312]	@ (8002544 <HAL_GPIO_Init+0x30c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01f      	beq.n	800244e <HAL_GPIO_Init+0x216>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4d      	ldr	r2, [pc, #308]	@ (8002548 <HAL_GPIO_Init+0x310>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d019      	beq.n	800244a <HAL_GPIO_Init+0x212>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4c      	ldr	r2, [pc, #304]	@ (800254c <HAL_GPIO_Init+0x314>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x20e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4b      	ldr	r2, [pc, #300]	@ (8002550 <HAL_GPIO_Init+0x318>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00d      	beq.n	8002442 <HAL_GPIO_Init+0x20a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4a      	ldr	r2, [pc, #296]	@ (8002554 <HAL_GPIO_Init+0x31c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <HAL_GPIO_Init+0x206>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a49      	ldr	r2, [pc, #292]	@ (8002558 <HAL_GPIO_Init+0x320>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_GPIO_Init+0x202>
 8002436:	2306      	movs	r3, #6
 8002438:	e00c      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 800243a:	2307      	movs	r3, #7
 800243c:	e00a      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 800243e:	2305      	movs	r3, #5
 8002440:	e008      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 8002442:	2304      	movs	r3, #4
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 8002446:	2303      	movs	r3, #3
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x21c>
 8002452:	2300      	movs	r3, #0
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f002 0203 	and.w	r2, r2, #3
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	4093      	lsls	r3, r2
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002464:	4935      	ldr	r1, [pc, #212]	@ (800253c <HAL_GPIO_Init+0x304>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3302      	adds	r3, #2
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002472:	4b3a      	ldr	r3, [pc, #232]	@ (800255c <HAL_GPIO_Init+0x324>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002496:	4a31      	ldr	r2, [pc, #196]	@ (800255c <HAL_GPIO_Init+0x324>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800249c:	4b2f      	ldr	r3, [pc, #188]	@ (800255c <HAL_GPIO_Init+0x324>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c0:	4a26      	ldr	r2, [pc, #152]	@ (800255c <HAL_GPIO_Init+0x324>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c6:	4b25      	ldr	r3, [pc, #148]	@ (800255c <HAL_GPIO_Init+0x324>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ea:	4a1c      	ldr	r2, [pc, #112]	@ (800255c <HAL_GPIO_Init+0x324>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	@ (800255c <HAL_GPIO_Init+0x324>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002514:	4a11      	ldr	r2, [pc, #68]	@ (800255c <HAL_GPIO_Init+0x324>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3301      	adds	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	f67f ae96 	bls.w	8002254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40013800 	.word	0x40013800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	40020800 	.word	0x40020800
 800254c:	40020c00 	.word	0x40020c00
 8002550:	40021000 	.word	0x40021000
 8002554:	40021400 	.word	0x40021400
 8002558:	40021800 	.word	0x40021800
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e001      	b.n	8002582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025d4:	887a      	ldrh	r2, [r7, #2]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4013      	ands	r3, r2
 80025da:	041a      	lsls	r2, r3, #16
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	43d9      	mvns	r1, r3
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	400b      	ands	r3, r1
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0cc      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b68      	ldr	r3, [pc, #416]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d90c      	bls.n	8002634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b65      	ldr	r3, [pc, #404]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a58      	ldr	r2, [pc, #352]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a52      	ldr	r2, [pc, #328]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800266e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d044      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d119      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b3f      	ldr	r3, [pc, #252]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3b      	ldr	r3, [pc, #236]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e067      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b37      	ldr	r3, [pc, #220]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4934      	ldr	r1, [pc, #208]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7ff fbd2 	bl	8001e90 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7ff fbce 	bl	8001e90 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e04f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b25      	ldr	r3, [pc, #148]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d20c      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b22      	ldr	r3, [pc, #136]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f855 	bl	800282c <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fb32 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08006928 	.word	0x08006928
 80027bc:	20000000 	.word	0x20000000
 80027c0:	2000000c 	.word	0x2000000c

080027c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000000 	.word	0x20000000

080027dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0a9b      	lsrs	r3, r3, #10
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4903      	ldr	r1, [pc, #12]	@ (8002800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	08006938 	.word	0x08006938

08002804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002808:	f7ff ffdc 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 800280c:	4602      	mov	r2, r0
 800280e:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	0b5b      	lsrs	r3, r3, #13
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4903      	ldr	r1, [pc, #12]	@ (8002828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800281a:	5ccb      	ldrb	r3, [r1, r3]
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	08006938 	.word	0x08006938

0800282c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002830:	b0ae      	sub	sp, #184	@ 0xb8
 8002832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002852:	4bcb      	ldr	r3, [pc, #812]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b0c      	cmp	r3, #12
 800285c:	f200 8206 	bhi.w	8002c6c <HAL_RCC_GetSysClockFreq+0x440>
 8002860:	a201      	add	r2, pc, #4	@ (adr r2, 8002868 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002866:	bf00      	nop
 8002868:	0800289d 	.word	0x0800289d
 800286c:	08002c6d 	.word	0x08002c6d
 8002870:	08002c6d 	.word	0x08002c6d
 8002874:	08002c6d 	.word	0x08002c6d
 8002878:	080028a5 	.word	0x080028a5
 800287c:	08002c6d 	.word	0x08002c6d
 8002880:	08002c6d 	.word	0x08002c6d
 8002884:	08002c6d 	.word	0x08002c6d
 8002888:	080028ad 	.word	0x080028ad
 800288c:	08002c6d 	.word	0x08002c6d
 8002890:	08002c6d 	.word	0x08002c6d
 8002894:	08002c6d 	.word	0x08002c6d
 8002898:	08002a9d 	.word	0x08002a9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4bb9      	ldr	r3, [pc, #740]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x358>)
 800289e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028a2:	e1e7      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028a4:	4bb8      	ldr	r3, [pc, #736]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x35c>)
 80028a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028aa:	e1e3      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ac:	4bb4      	ldr	r3, [pc, #720]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028b8:	4bb1      	ldr	r3, [pc, #708]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d071      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c4:	4bae      	ldr	r3, [pc, #696]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028d0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80028d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028ea:	4622      	mov	r2, r4
 80028ec:	462b      	mov	r3, r5
 80028ee:	f04f 0000 	mov.w	r0, #0
 80028f2:	f04f 0100 	mov.w	r1, #0
 80028f6:	0159      	lsls	r1, r3, #5
 80028f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028fc:	0150      	lsls	r0, r2, #5
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4621      	mov	r1, r4
 8002904:	1a51      	subs	r1, r2, r1
 8002906:	6439      	str	r1, [r7, #64]	@ 0x40
 8002908:	4629      	mov	r1, r5
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800291c:	4649      	mov	r1, r9
 800291e:	018b      	lsls	r3, r1, #6
 8002920:	4641      	mov	r1, r8
 8002922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002926:	4641      	mov	r1, r8
 8002928:	018a      	lsls	r2, r1, #6
 800292a:	4641      	mov	r1, r8
 800292c:	1a51      	subs	r1, r2, r1
 800292e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002930:	4649      	mov	r1, r9
 8002932:	eb63 0301 	sbc.w	r3, r3, r1
 8002936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002944:	4649      	mov	r1, r9
 8002946:	00cb      	lsls	r3, r1, #3
 8002948:	4641      	mov	r1, r8
 800294a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800294e:	4641      	mov	r1, r8
 8002950:	00ca      	lsls	r2, r1, #3
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	4603      	mov	r3, r0
 8002958:	4622      	mov	r2, r4
 800295a:	189b      	adds	r3, r3, r2
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
 800295e:	462b      	mov	r3, r5
 8002960:	460a      	mov	r2, r1
 8002962:	eb42 0303 	adc.w	r3, r2, r3
 8002966:	637b      	str	r3, [r7, #52]	@ 0x34
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002974:	4629      	mov	r1, r5
 8002976:	024b      	lsls	r3, r1, #9
 8002978:	4621      	mov	r1, r4
 800297a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800297e:	4621      	mov	r1, r4
 8002980:	024a      	lsls	r2, r1, #9
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800298a:	2200      	movs	r2, #0
 800298c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002990:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002994:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002998:	f7fe f878 	bl	8000a8c <__aeabi_uldivmod>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4613      	mov	r3, r2
 80029a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029a6:	e067      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a8:	4b75      	ldr	r3, [pc, #468]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	2200      	movs	r2, #0
 80029b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80029b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029c2:	2300      	movs	r3, #0
 80029c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80029ca:	4622      	mov	r2, r4
 80029cc:	462b      	mov	r3, r5
 80029ce:	f04f 0000 	mov.w	r0, #0
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	0159      	lsls	r1, r3, #5
 80029d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029dc:	0150      	lsls	r0, r2, #5
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4621      	mov	r1, r4
 80029e4:	1a51      	subs	r1, r2, r1
 80029e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80029e8:	4629      	mov	r1, r5
 80029ea:	eb63 0301 	sbc.w	r3, r3, r1
 80029ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029fc:	4649      	mov	r1, r9
 80029fe:	018b      	lsls	r3, r1, #6
 8002a00:	4641      	mov	r1, r8
 8002a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a06:	4641      	mov	r1, r8
 8002a08:	018a      	lsls	r2, r1, #6
 8002a0a:	4641      	mov	r1, r8
 8002a0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a10:	4649      	mov	r1, r9
 8002a12:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a2a:	4692      	mov	sl, r2
 8002a2c:	469b      	mov	fp, r3
 8002a2e:	4623      	mov	r3, r4
 8002a30:	eb1a 0303 	adds.w	r3, sl, r3
 8002a34:	623b      	str	r3, [r7, #32]
 8002a36:	462b      	mov	r3, r5
 8002a38:	eb4b 0303 	adc.w	r3, fp, r3
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	028b      	lsls	r3, r1, #10
 8002a4e:	4621      	mov	r1, r4
 8002a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a54:	4621      	mov	r1, r4
 8002a56:	028a      	lsls	r2, r1, #10
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a60:	2200      	movs	r2, #0
 8002a62:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a64:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a6a:	f7fe f80f 	bl	8000a8c <__aeabi_uldivmod>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4613      	mov	r3, r2
 8002a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a78:	4b41      	ldr	r3, [pc, #260]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a9a:	e0eb      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a9c:	4b38      	ldr	r3, [pc, #224]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa8:	4b35      	ldr	r3, [pc, #212]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d06b      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab4:	4b32      	ldr	r3, [pc, #200]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	2200      	movs	r2, #0
 8002abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002abe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ac0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ac8:	2300      	movs	r3, #0
 8002aca:	667b      	str	r3, [r7, #100]	@ 0x64
 8002acc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ad0:	4622      	mov	r2, r4
 8002ad2:	462b      	mov	r3, r5
 8002ad4:	f04f 0000 	mov.w	r0, #0
 8002ad8:	f04f 0100 	mov.w	r1, #0
 8002adc:	0159      	lsls	r1, r3, #5
 8002ade:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae2:	0150      	lsls	r0, r2, #5
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4621      	mov	r1, r4
 8002aea:	1a51      	subs	r1, r2, r1
 8002aec:	61b9      	str	r1, [r7, #24]
 8002aee:	4629      	mov	r1, r5
 8002af0:	eb63 0301 	sbc.w	r3, r3, r1
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002b02:	4659      	mov	r1, fp
 8002b04:	018b      	lsls	r3, r1, #6
 8002b06:	4651      	mov	r1, sl
 8002b08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b0c:	4651      	mov	r1, sl
 8002b0e:	018a      	lsls	r2, r1, #6
 8002b10:	4651      	mov	r1, sl
 8002b12:	ebb2 0801 	subs.w	r8, r2, r1
 8002b16:	4659      	mov	r1, fp
 8002b18:	eb63 0901 	sbc.w	r9, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b30:	4690      	mov	r8, r2
 8002b32:	4699      	mov	r9, r3
 8002b34:	4623      	mov	r3, r4
 8002b36:	eb18 0303 	adds.w	r3, r8, r3
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	462b      	mov	r3, r5
 8002b3e:	eb49 0303 	adc.w	r3, r9, r3
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b50:	4629      	mov	r1, r5
 8002b52:	024b      	lsls	r3, r1, #9
 8002b54:	4621      	mov	r1, r4
 8002b56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	024a      	lsls	r2, r1, #9
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b66:	2200      	movs	r2, #0
 8002b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b70:	f7fd ff8c 	bl	8000a8c <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b7e:	e065      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x420>
 8002b80:	40023800 	.word	0x40023800
 8002b84:	00f42400 	.word	0x00f42400
 8002b88:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	2200      	movs	r2, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	4611      	mov	r1, r2
 8002b98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ba2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ba6:	4642      	mov	r2, r8
 8002ba8:	464b      	mov	r3, r9
 8002baa:	f04f 0000 	mov.w	r0, #0
 8002bae:	f04f 0100 	mov.w	r1, #0
 8002bb2:	0159      	lsls	r1, r3, #5
 8002bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb8:	0150      	lsls	r0, r2, #5
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	1a51      	subs	r1, r2, r1
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bd8:	4659      	mov	r1, fp
 8002bda:	018b      	lsls	r3, r1, #6
 8002bdc:	4651      	mov	r1, sl
 8002bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002be2:	4651      	mov	r1, sl
 8002be4:	018a      	lsls	r2, r1, #6
 8002be6:	4651      	mov	r1, sl
 8002be8:	1a54      	subs	r4, r2, r1
 8002bea:	4659      	mov	r1, fp
 8002bec:	eb63 0501 	sbc.w	r5, r3, r1
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	00eb      	lsls	r3, r5, #3
 8002bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bfe:	00e2      	lsls	r2, r4, #3
 8002c00:	4614      	mov	r4, r2
 8002c02:	461d      	mov	r5, r3
 8002c04:	4643      	mov	r3, r8
 8002c06:	18e3      	adds	r3, r4, r3
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	eb45 0303 	adc.w	r3, r5, r3
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c1e:	4629      	mov	r1, r5
 8002c20:	028b      	lsls	r3, r1, #10
 8002c22:	4621      	mov	r1, r4
 8002c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c28:	4621      	mov	r1, r4
 8002c2a:	028a      	lsls	r2, r1, #10
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c34:	2200      	movs	r2, #0
 8002c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c38:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c3e:	f7fd ff25 	bl	8000a8c <__aeabi_uldivmod>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4613      	mov	r3, r2
 8002c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	0f1b      	lsrs	r3, r3, #28
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002c5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c6a:	e003      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	37b8      	adds	r7, #184	@ 0xb8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	00f42400 	.word	0x00f42400

08002c8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e28d      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8083 	beq.w	8002db2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cac:	4b94      	ldr	r3, [pc, #592]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d019      	beq.n	8002cec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cb8:	4b91      	ldr	r3, [pc, #580]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cd0:	d00c      	beq.n	8002cec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b8b      	ldr	r3, [pc, #556]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d112      	bne.n	8002d04 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b88      	ldr	r3, [pc, #544]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cea:	d10b      	bne.n	8002d04 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	4b84      	ldr	r3, [pc, #528]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d05b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x124>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d157      	bne.n	8002db0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e25a      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d0c:	d106      	bne.n	8002d1c <HAL_RCC_OscConfig+0x90>
 8002d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7b      	ldr	r2, [pc, #492]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xcc>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0xb4>
 8002d26:	4b76      	ldr	r3, [pc, #472]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a75      	ldr	r2, [pc, #468]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b73      	ldr	r3, [pc, #460]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a72      	ldr	r2, [pc, #456]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xcc>
 8002d40:	4b6f      	ldr	r3, [pc, #444]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6e      	ldr	r2, [pc, #440]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a6b      	ldr	r2, [pc, #428]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7ff f896 	bl	8001e90 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff f892 	bl	8001e90 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	@ 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e21f      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b61      	ldr	r3, [pc, #388]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xdc>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7ff f882 	bl	8001e90 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7ff f87e 	bl	8001e90 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	@ 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e20b      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b57      	ldr	r3, [pc, #348]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x104>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d06f      	beq.n	8002e9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dbe:	4b50      	ldr	r3, [pc, #320]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d017      	beq.n	8002dfa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dca:	4b4d      	ldr	r3, [pc, #308]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
        || \
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d105      	bne.n	8002de2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de2:	4b47      	ldr	r3, [pc, #284]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d11c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dee:	4b44      	ldr	r3, [pc, #272]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d116      	bne.n	8002e28 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	4b41      	ldr	r3, [pc, #260]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_RCC_OscConfig+0x186>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e1d3      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	4b3b      	ldr	r3, [pc, #236]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4937      	ldr	r1, [pc, #220]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	e03a      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e30:	4b34      	ldr	r3, [pc, #208]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7ff f82b 	bl	8001e90 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7ff f827 	bl	8001e90 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1b4      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	4b2b      	ldr	r3, [pc, #172]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5c:	4b28      	ldr	r3, [pc, #160]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4925      	ldr	r1, [pc, #148]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
 8002e70:	e015      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e72:	4b24      	ldr	r3, [pc, #144]	@ (8002f04 <HAL_RCC_OscConfig+0x278>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7ff f80a 	bl	8001e90 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e80:	f7ff f806 	bl	8001e90 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e193      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d036      	beq.n	8002f18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d016      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fe ffea 	bl	8001e90 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7fe ffe6 	bl	8001e90 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e173      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x234>
 8002ede:	e01b      	b.n	8002f18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee0:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe ffd3 	bl	8001e90 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	e00e      	b.n	8002f0c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eee:	f7fe ffcf 	bl	8001e90 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d907      	bls.n	8002f0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e15c      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	42470000 	.word	0x42470000
 8002f08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ea      	bne.n	8002eee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8097 	beq.w	8003054 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2a:	4b83      	ldr	r3, [pc, #524]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f46:	4b7c      	ldr	r3, [pc, #496]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b79      	ldr	r3, [pc, #484]	@ (800313c <HAL_RCC_OscConfig+0x4b0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d118      	bne.n	8002f94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f62:	4b76      	ldr	r3, [pc, #472]	@ (800313c <HAL_RCC_OscConfig+0x4b0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a75      	ldr	r2, [pc, #468]	@ (800313c <HAL_RCC_OscConfig+0x4b0>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe ff8f 	bl	8001e90 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f76:	f7fe ff8b 	bl	8001e90 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e118      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	4b6c      	ldr	r3, [pc, #432]	@ (800313c <HAL_RCC_OscConfig+0x4b0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x31e>
 8002f9c:	4b66      	ldr	r3, [pc, #408]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa0:	4a65      	ldr	r2, [pc, #404]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa8:	e01c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x358>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x340>
 8002fb2:	4b61      	ldr	r3, [pc, #388]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb6:	4a60      	ldr	r2, [pc, #384]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbe:	4b5e      	ldr	r3, [pc, #376]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc2:	4a5d      	ldr	r2, [pc, #372]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x358>
 8002fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd0:	4a59      	ldr	r2, [pc, #356]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd8:	4b57      	ldr	r3, [pc, #348]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fdc:	4a56      	ldr	r2, [pc, #344]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8002fde:	f023 0304 	bic.w	r3, r3, #4
 8002fe2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d015      	beq.n	8003018 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe ff50 	bl	8001e90 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fe ff4c 	bl	8001e90 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0d7      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	4b4b      	ldr	r3, [pc, #300]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ee      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x368>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fe ff3a 	bl	8001e90 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	e00a      	b.n	8003036 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fe ff36 	bl	8001e90 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e0c1      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003036:	4b40      	ldr	r3, [pc, #256]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1ee      	bne.n	8003020 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d105      	bne.n	8003054 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003048:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	4a3a      	ldr	r2, [pc, #232]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 800304e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003052:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80ad 	beq.w	80031b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305e:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b08      	cmp	r3, #8
 8003068:	d060      	beq.n	800312c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d145      	bne.n	80030fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b33      	ldr	r3, [pc, #204]	@ (8003140 <HAL_RCC_OscConfig+0x4b4>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe ff0a 	bl	8001e90 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe ff06 	bl	8001e90 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e093      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	4b29      	ldr	r3, [pc, #164]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	019b      	lsls	r3, r3, #6
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	3b01      	subs	r3, #1
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	071b      	lsls	r3, r3, #28
 80030ca:	491b      	ldr	r1, [pc, #108]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <HAL_RCC_OscConfig+0x4b4>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7fe fedb 	bl	8001e90 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe fed7 	bl	8001e90 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e064      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f0:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x452>
 80030fc:	e05c      	b.n	80031b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <HAL_RCC_OscConfig+0x4b4>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7fe fec4 	bl	8001e90 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7fe fec0 	bl	8001e90 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e04d      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_RCC_OscConfig+0x4ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x480>
 800312a:	e045      	b.n	80031b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d107      	bne.n	8003144 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e040      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000
 8003140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003144:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <HAL_RCC_OscConfig+0x538>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d030      	beq.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d129      	bne.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d122      	bne.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003174:	4013      	ands	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800317a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800317c:	4293      	cmp	r3, r2
 800317e:	d119      	bne.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	3b01      	subs	r3, #1
 800318e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d10f      	bne.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e041      	b.n	800325e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe f9fc 	bl	80015ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f000 feba 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d001      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e04e      	b.n	800331e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a23      	ldr	r2, [pc, #140]	@ (800332c <HAL_TIM_Base_Start_IT+0xc4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d022      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032aa:	d01d      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003330 <HAL_TIM_Base_Start_IT+0xc8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d018      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003334 <HAL_TIM_Base_Start_IT+0xcc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003338 <HAL_TIM_Base_Start_IT+0xd0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00e      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1b      	ldr	r2, [pc, #108]	@ (800333c <HAL_TIM_Base_Start_IT+0xd4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a19      	ldr	r2, [pc, #100]	@ (8003340 <HAL_TIM_Base_Start_IT+0xd8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x80>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a18      	ldr	r2, [pc, #96]	@ (8003344 <HAL_TIM_Base_Start_IT+0xdc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d111      	bne.n	800330c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d010      	beq.n	800331c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330a:	e007      	b.n	800331c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40010000 	.word	0x40010000
 8003330:	40000400 	.word	0x40000400
 8003334:	40000800 	.word	0x40000800
 8003338:	40000c00 	.word	0x40000c00
 800333c:	40010400 	.word	0x40010400
 8003340:	40014000 	.word	0x40014000
 8003344:	40001800 	.word	0x40001800

08003348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e041      	b.n	80033de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f839 	bl	80033e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3304      	adds	r3, #4
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f000 fdfa 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
	...

080033fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <HAL_TIM_PWM_Start+0x24>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e022      	b.n	8003466 <HAL_TIM_PWM_Start+0x6a>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b04      	cmp	r3, #4
 8003424:	d109      	bne.n	800343a <HAL_TIM_PWM_Start+0x3e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e015      	b.n	8003466 <HAL_TIM_PWM_Start+0x6a>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d109      	bne.n	8003454 <HAL_TIM_PWM_Start+0x58>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e008      	b.n	8003466 <HAL_TIM_PWM_Start+0x6a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	bf14      	ite	ne
 8003460:	2301      	movne	r3, #1
 8003462:	2300      	moveq	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07c      	b.n	8003568 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d104      	bne.n	800347e <HAL_TIM_PWM_Start+0x82>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800347c:	e013      	b.n	80034a6 <HAL_TIM_PWM_Start+0xaa>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d104      	bne.n	800348e <HAL_TIM_PWM_Start+0x92>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800348c:	e00b      	b.n	80034a6 <HAL_TIM_PWM_Start+0xaa>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d104      	bne.n	800349e <HAL_TIM_PWM_Start+0xa2>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800349c:	e003      	b.n	80034a6 <HAL_TIM_PWM_Start+0xaa>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2201      	movs	r2, #1
 80034ac:	6839      	ldr	r1, [r7, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 f986 	bl	80047c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003570 <HAL_TIM_PWM_Start+0x174>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_PWM_Start+0xcc>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003574 <HAL_TIM_PWM_Start+0x178>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_TIM_PWM_Start+0xd0>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_TIM_PWM_Start+0xd2>
 80034cc:	2300      	movs	r3, #0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a22      	ldr	r2, [pc, #136]	@ (8003570 <HAL_TIM_PWM_Start+0x174>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_TIM_PWM_Start+0x136>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f4:	d01d      	beq.n	8003532 <HAL_TIM_PWM_Start+0x136>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003578 <HAL_TIM_PWM_Start+0x17c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d018      	beq.n	8003532 <HAL_TIM_PWM_Start+0x136>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <HAL_TIM_PWM_Start+0x180>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_TIM_PWM_Start+0x136>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1c      	ldr	r2, [pc, #112]	@ (8003580 <HAL_TIM_PWM_Start+0x184>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_TIM_PWM_Start+0x136>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a16      	ldr	r2, [pc, #88]	@ (8003574 <HAL_TIM_PWM_Start+0x178>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_TIM_PWM_Start+0x136>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a18      	ldr	r2, [pc, #96]	@ (8003584 <HAL_TIM_PWM_Start+0x188>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_TIM_PWM_Start+0x136>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a16      	ldr	r2, [pc, #88]	@ (8003588 <HAL_TIM_PWM_Start+0x18c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d111      	bne.n	8003556 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b06      	cmp	r3, #6
 8003542:	d010      	beq.n	8003566 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003554:	e007      	b.n	8003566 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40010000 	.word	0x40010000
 8003574:	40010400 	.word	0x40010400
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40000c00 	.word	0x40000c00
 8003584:	40014000 	.word	0x40014000
 8003588:	40001800 	.word	0x40001800

0800358c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f839 	bl	800362a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fcd8 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d104      	bne.n	800365e <HAL_TIM_IC_Start_IT+0x1e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e013      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x46>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d104      	bne.n	800366e <HAL_TIM_IC_Start_IT+0x2e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800366a:	b2db      	uxtb	r3, r3
 800366c:	e00b      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x46>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b08      	cmp	r3, #8
 8003672:	d104      	bne.n	800367e <HAL_TIM_IC_Start_IT+0x3e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e003      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x46>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <HAL_TIM_IC_Start_IT+0x58>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e013      	b.n	80036c0 <HAL_TIM_IC_Start_IT+0x80>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b04      	cmp	r3, #4
 800369c:	d104      	bne.n	80036a8 <HAL_TIM_IC_Start_IT+0x68>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e00b      	b.n	80036c0 <HAL_TIM_IC_Start_IT+0x80>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d104      	bne.n	80036b8 <HAL_TIM_IC_Start_IT+0x78>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e003      	b.n	80036c0 <HAL_TIM_IC_Start_IT+0x80>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80036c2:	7bbb      	ldrb	r3, [r7, #14]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d102      	bne.n	80036ce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80036c8:	7b7b      	ldrb	r3, [r7, #13]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0cc      	b.n	800386c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_IC_Start_IT+0xa2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e0:	e013      	b.n	800370a <HAL_TIM_IC_Start_IT+0xca>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d104      	bne.n	80036f2 <HAL_TIM_IC_Start_IT+0xb2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f0:	e00b      	b.n	800370a <HAL_TIM_IC_Start_IT+0xca>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d104      	bne.n	8003702 <HAL_TIM_IC_Start_IT+0xc2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003700:	e003      	b.n	800370a <HAL_TIM_IC_Start_IT+0xca>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d104      	bne.n	800371a <HAL_TIM_IC_Start_IT+0xda>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003718:	e013      	b.n	8003742 <HAL_TIM_IC_Start_IT+0x102>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d104      	bne.n	800372a <HAL_TIM_IC_Start_IT+0xea>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003728:	e00b      	b.n	8003742 <HAL_TIM_IC_Start_IT+0x102>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d104      	bne.n	800373a <HAL_TIM_IC_Start_IT+0xfa>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003738:	e003      	b.n	8003742 <HAL_TIM_IC_Start_IT+0x102>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b0c      	cmp	r3, #12
 8003746:	d841      	bhi.n	80037cc <HAL_TIM_IC_Start_IT+0x18c>
 8003748:	a201      	add	r2, pc, #4	@ (adr r2, 8003750 <HAL_TIM_IC_Start_IT+0x110>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003785 	.word	0x08003785
 8003754:	080037cd 	.word	0x080037cd
 8003758:	080037cd 	.word	0x080037cd
 800375c:	080037cd 	.word	0x080037cd
 8003760:	08003797 	.word	0x08003797
 8003764:	080037cd 	.word	0x080037cd
 8003768:	080037cd 	.word	0x080037cd
 800376c:	080037cd 	.word	0x080037cd
 8003770:	080037a9 	.word	0x080037a9
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037cd 	.word	0x080037cd
 800377c:	080037cd 	.word	0x080037cd
 8003780:	080037bb 	.word	0x080037bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0202 	orr.w	r2, r2, #2
 8003792:	60da      	str	r2, [r3, #12]
      break;
 8003794:	e01d      	b.n	80037d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0204 	orr.w	r2, r2, #4
 80037a4:	60da      	str	r2, [r3, #12]
      break;
 80037a6:	e014      	b.n	80037d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0208 	orr.w	r2, r2, #8
 80037b6:	60da      	str	r2, [r3, #12]
      break;
 80037b8:	e00b      	b.n	80037d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0210 	orr.w	r2, r2, #16
 80037c8:	60da      	str	r2, [r3, #12]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      break;
 80037d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d148      	bne.n	800386a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	6839      	ldr	r1, [r7, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 ffed 	bl	80047c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a22      	ldr	r2, [pc, #136]	@ (8003874 <HAL_TIM_IC_Start_IT+0x234>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d022      	beq.n	8003836 <HAL_TIM_IC_Start_IT+0x1f6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f8:	d01d      	beq.n	8003836 <HAL_TIM_IC_Start_IT+0x1f6>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003878 <HAL_TIM_IC_Start_IT+0x238>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <HAL_TIM_IC_Start_IT+0x1f6>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <HAL_TIM_IC_Start_IT+0x23c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_TIM_IC_Start_IT+0x1f6>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1b      	ldr	r2, [pc, #108]	@ (8003880 <HAL_TIM_IC_Start_IT+0x240>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_TIM_IC_Start_IT+0x1f6>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a19      	ldr	r2, [pc, #100]	@ (8003884 <HAL_TIM_IC_Start_IT+0x244>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_TIM_IC_Start_IT+0x1f6>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <HAL_TIM_IC_Start_IT+0x248>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_TIM_IC_Start_IT+0x1f6>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a16      	ldr	r2, [pc, #88]	@ (800388c <HAL_TIM_IC_Start_IT+0x24c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d111      	bne.n	800385a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b06      	cmp	r3, #6
 8003846:	d010      	beq.n	800386a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003858:	e007      	b.n	800386a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800386a:	7bfb      	ldrb	r3, [r7, #15]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40010000 	.word	0x40010000
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800
 8003880:	40000c00 	.word	0x40000c00
 8003884:	40010400 	.word	0x40010400
 8003888:	40014000 	.word	0x40014000
 800388c:	40001800 	.word	0x40001800

08003890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d020      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01b      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0202 	mvn.w	r2, #2
 80038c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd fa8e 	bl	8000dfc <HAL_TIM_IC_CaptureCallback>
 80038e0:	e005      	b.n	80038ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fb2e 	bl	8003f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fb35 	bl	8003f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d020      	beq.n	8003940 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01b      	beq.n	8003940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0204 	mvn.w	r2, #4
 8003910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd fa68 	bl	8000dfc <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fb08 	bl	8003f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fb0f 	bl	8003f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d020      	beq.n	800398c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01b      	beq.n	800398c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0208 	mvn.w	r2, #8
 800395c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2204      	movs	r2, #4
 8003962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd fa42 	bl	8000dfc <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fae2 	bl	8003f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fae9 	bl	8003f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b00      	cmp	r3, #0
 8003994:	d020      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0210 	mvn.w	r2, #16
 80039a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2208      	movs	r2, #8
 80039ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fa1c 	bl	8000dfc <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fabc 	bl	8003f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fac3 	bl	8003f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00c      	beq.n	80039fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0201 	mvn.w	r2, #1
 80039f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fe f8fa 	bl	8001bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00c      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 ff7c 	bl	8004918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00c      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa94 	bl	8003f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0220 	mvn.w	r2, #32
 8003a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 ff4e 	bl	8004904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e088      	b.n	8003ba0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003aac:	f000 fcc4 	bl	8004438 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 020c 	bic.w	r2, r2, #12
 8003abe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6999      	ldr	r1, [r3, #24]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	619a      	str	r2, [r3, #24]
 8003ad2:	e060      	b.n	8003b96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d11c      	bne.n	8003b14 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003aea:	f000 fd48 	bl	800457e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003afc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6999      	ldr	r1, [r3, #24]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	021a      	lsls	r2, r3, #8
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	619a      	str	r2, [r3, #24]
 8003b12:	e040      	b.n	8003b96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d11b      	bne.n	8003b52 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003b2a:	f000 fd95 	bl	8004658 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 020c 	bic.w	r2, r2, #12
 8003b3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69d9      	ldr	r1, [r3, #28]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	61da      	str	r2, [r3, #28]
 8003b50:	e021      	b.n	8003b96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	d11c      	bne.n	8003b92 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003b68:	f000 fdb2 	bl	80046d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b7a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69d9      	ldr	r1, [r3, #28]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	021a      	lsls	r2, r3, #8
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	61da      	str	r2, [r3, #28]
 8003b90:	e001      	b.n	8003b96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e0ae      	b.n	8003d24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b0c      	cmp	r3, #12
 8003bd2:	f200 809f 	bhi.w	8003d14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003c11 	.word	0x08003c11
 8003be0:	08003d15 	.word	0x08003d15
 8003be4:	08003d15 	.word	0x08003d15
 8003be8:	08003d15 	.word	0x08003d15
 8003bec:	08003c51 	.word	0x08003c51
 8003bf0:	08003d15 	.word	0x08003d15
 8003bf4:	08003d15 	.word	0x08003d15
 8003bf8:	08003d15 	.word	0x08003d15
 8003bfc:	08003c93 	.word	0x08003c93
 8003c00:	08003d15 	.word	0x08003d15
 8003c04:	08003d15 	.word	0x08003d15
 8003c08:	08003d15 	.word	0x08003d15
 8003c0c:	08003cd3 	.word	0x08003cd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fa5e 	bl	80040d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0208 	orr.w	r2, r2, #8
 8003c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0204 	bic.w	r2, r2, #4
 8003c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6999      	ldr	r1, [r3, #24]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	619a      	str	r2, [r3, #24]
      break;
 8003c4e:	e064      	b.n	8003d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 faae 	bl	80041b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6999      	ldr	r1, [r3, #24]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	021a      	lsls	r2, r3, #8
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	619a      	str	r2, [r3, #24]
      break;
 8003c90:	e043      	b.n	8003d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fb03 	bl	80042a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0208 	orr.w	r2, r2, #8
 8003cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0204 	bic.w	r2, r2, #4
 8003cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69d9      	ldr	r1, [r3, #28]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	61da      	str	r2, [r3, #28]
      break;
 8003cd0:	e023      	b.n	8003d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fb57 	bl	800438c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69d9      	ldr	r1, [r3, #28]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	021a      	lsls	r2, r3, #8
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	61da      	str	r2, [r3, #28]
      break;
 8003d12:	e002      	b.n	8003d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	75fb      	strb	r3, [r7, #23]
      break;
 8003d18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_TIM_ConfigClockSource+0x1c>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e0b4      	b.n	8003eb2 <HAL_TIM_ConfigClockSource+0x186>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d80:	d03e      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0xd4>
 8003d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d86:	f200 8087 	bhi.w	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8e:	f000 8086 	beq.w	8003e9e <HAL_TIM_ConfigClockSource+0x172>
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d96:	d87f      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b70      	cmp	r3, #112	@ 0x70
 8003d9a:	d01a      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0xa6>
 8003d9c:	2b70      	cmp	r3, #112	@ 0x70
 8003d9e:	d87b      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	2b60      	cmp	r3, #96	@ 0x60
 8003da2:	d050      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x11a>
 8003da4:	2b60      	cmp	r3, #96	@ 0x60
 8003da6:	d877      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003da8:	2b50      	cmp	r3, #80	@ 0x50
 8003daa:	d03c      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0xfa>
 8003dac:	2b50      	cmp	r3, #80	@ 0x50
 8003dae:	d873      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003db0:	2b40      	cmp	r3, #64	@ 0x40
 8003db2:	d058      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x13a>
 8003db4:	2b40      	cmp	r3, #64	@ 0x40
 8003db6:	d86f      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b30      	cmp	r3, #48	@ 0x30
 8003dba:	d064      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dbc:	2b30      	cmp	r3, #48	@ 0x30
 8003dbe:	d86b      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d060      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d867      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d05c      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d05a      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dd0:	e062      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003de2:	f000 fccd 	bl	8004780 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	609a      	str	r2, [r3, #8]
      break;
 8003dfe:	e04f      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e10:	f000 fcb6 	bl	8004780 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e22:	609a      	str	r2, [r3, #8]
      break;
 8003e24:	e03c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e32:	461a      	mov	r2, r3
 8003e34:	f000 fb74 	bl	8004520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2150      	movs	r1, #80	@ 0x50
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fc83 	bl	800474a <TIM_ITRx_SetConfig>
      break;
 8003e44:	e02c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 fbd0 	bl	80045f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2160      	movs	r1, #96	@ 0x60
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fc73 	bl	800474a <TIM_ITRx_SetConfig>
      break;
 8003e64:	e01c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 fb54 	bl	8004520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2140      	movs	r1, #64	@ 0x40
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fc63 	bl	800474a <TIM_ITRx_SetConfig>
      break;
 8003e84:	e00c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f000 fc5a 	bl	800474a <TIM_ITRx_SetConfig>
      break;
 8003e96:	e003      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e9c:	e000      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b0c      	cmp	r3, #12
 8003ece:	d831      	bhi.n	8003f34 <HAL_TIM_ReadCapturedValue+0x78>
 8003ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003f0d 	.word	0x08003f0d
 8003edc:	08003f35 	.word	0x08003f35
 8003ee0:	08003f35 	.word	0x08003f35
 8003ee4:	08003f35 	.word	0x08003f35
 8003ee8:	08003f17 	.word	0x08003f17
 8003eec:	08003f35 	.word	0x08003f35
 8003ef0:	08003f35 	.word	0x08003f35
 8003ef4:	08003f35 	.word	0x08003f35
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f35 	.word	0x08003f35
 8003f00:	08003f35 	.word	0x08003f35
 8003f04:	08003f35 	.word	0x08003f35
 8003f08:	08003f2b 	.word	0x08003f2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f12:	60fb      	str	r3, [r7, #12]

      break;
 8003f14:	e00f      	b.n	8003f36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1c:	60fb      	str	r3, [r7, #12]

      break;
 8003f1e:	e00a      	b.n	8003f36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f26:	60fb      	str	r3, [r7, #12]

      break;
 8003f28:	e005      	b.n	8003f36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	60fb      	str	r3, [r7, #12]

      break;
 8003f32:	e000      	b.n	8003f36 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003f34:	bf00      	nop
  }

  return tmpreg;
 8003f36:	68fb      	ldr	r3, [r7, #12]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a46      	ldr	r2, [pc, #280]	@ (80040ac <TIM_Base_SetConfig+0x12c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d013      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f9e:	d00f      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a43      	ldr	r2, [pc, #268]	@ (80040b0 <TIM_Base_SetConfig+0x130>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00b      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a42      	ldr	r2, [pc, #264]	@ (80040b4 <TIM_Base_SetConfig+0x134>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d007      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a41      	ldr	r2, [pc, #260]	@ (80040b8 <TIM_Base_SetConfig+0x138>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d003      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a40      	ldr	r2, [pc, #256]	@ (80040bc <TIM_Base_SetConfig+0x13c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d108      	bne.n	8003fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a35      	ldr	r2, [pc, #212]	@ (80040ac <TIM_Base_SetConfig+0x12c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d02b      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe0:	d027      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a32      	ldr	r2, [pc, #200]	@ (80040b0 <TIM_Base_SetConfig+0x130>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d023      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a31      	ldr	r2, [pc, #196]	@ (80040b4 <TIM_Base_SetConfig+0x134>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01f      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a30      	ldr	r2, [pc, #192]	@ (80040b8 <TIM_Base_SetConfig+0x138>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01b      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80040bc <TIM_Base_SetConfig+0x13c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d017      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a2e      	ldr	r2, [pc, #184]	@ (80040c0 <TIM_Base_SetConfig+0x140>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2d      	ldr	r2, [pc, #180]	@ (80040c4 <TIM_Base_SetConfig+0x144>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00f      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2c      	ldr	r2, [pc, #176]	@ (80040c8 <TIM_Base_SetConfig+0x148>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2b      	ldr	r2, [pc, #172]	@ (80040cc <TIM_Base_SetConfig+0x14c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2a      	ldr	r2, [pc, #168]	@ (80040d0 <TIM_Base_SetConfig+0x150>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a29      	ldr	r2, [pc, #164]	@ (80040d4 <TIM_Base_SetConfig+0x154>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a10      	ldr	r2, [pc, #64]	@ (80040ac <TIM_Base_SetConfig+0x12c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_Base_SetConfig+0xf8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a12      	ldr	r2, [pc, #72]	@ (80040bc <TIM_Base_SetConfig+0x13c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d103      	bne.n	8004080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	611a      	str	r2, [r3, #16]
  }
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40000c00 	.word	0x40000c00
 80040bc:	40010400 	.word	0x40010400
 80040c0:	40014000 	.word	0x40014000
 80040c4:	40014400 	.word	0x40014400
 80040c8:	40014800 	.word	0x40014800
 80040cc:	40001800 	.word	0x40001800
 80040d0:	40001c00 	.word	0x40001c00
 80040d4:	40002000 	.word	0x40002000

080040d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f023 0201 	bic.w	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0303 	bic.w	r3, r3, #3
 800410e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 0302 	bic.w	r3, r3, #2
 8004120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a20      	ldr	r2, [pc, #128]	@ (80041b0 <TIM_OC1_SetConfig+0xd8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_OC1_SetConfig+0x64>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a1f      	ldr	r2, [pc, #124]	@ (80041b4 <TIM_OC1_SetConfig+0xdc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d10c      	bne.n	8004156 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f023 0308 	bic.w	r3, r3, #8
 8004142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 0304 	bic.w	r3, r3, #4
 8004154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a15      	ldr	r2, [pc, #84]	@ (80041b0 <TIM_OC1_SetConfig+0xd8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_OC1_SetConfig+0x8e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a14      	ldr	r2, [pc, #80]	@ (80041b4 <TIM_OC1_SetConfig+0xdc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d111      	bne.n	800418a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800416c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	621a      	str	r2, [r3, #32]
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40010400 	.word	0x40010400

080041b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f023 0210 	bic.w	r2, r3, #16
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0320 	bic.w	r3, r3, #32
 8004202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a22      	ldr	r2, [pc, #136]	@ (800429c <TIM_OC2_SetConfig+0xe4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_OC2_SetConfig+0x68>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a21      	ldr	r2, [pc, #132]	@ (80042a0 <TIM_OC2_SetConfig+0xe8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d10d      	bne.n	800423c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800423a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a17      	ldr	r2, [pc, #92]	@ (800429c <TIM_OC2_SetConfig+0xe4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_OC2_SetConfig+0x94>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a16      	ldr	r2, [pc, #88]	@ (80042a0 <TIM_OC2_SetConfig+0xe8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d113      	bne.n	8004274 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800425a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	621a      	str	r2, [r3, #32]
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40010000 	.word	0x40010000
 80042a0:	40010400 	.word	0x40010400

080042a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a21      	ldr	r2, [pc, #132]	@ (8004384 <TIM_OC3_SetConfig+0xe0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_OC3_SetConfig+0x66>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a20      	ldr	r2, [pc, #128]	@ (8004388 <TIM_OC3_SetConfig+0xe4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d10d      	bne.n	8004326 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a16      	ldr	r2, [pc, #88]	@ (8004384 <TIM_OC3_SetConfig+0xe0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d003      	beq.n	8004336 <TIM_OC3_SetConfig+0x92>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a15      	ldr	r2, [pc, #84]	@ (8004388 <TIM_OC3_SetConfig+0xe4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d113      	bne.n	800435e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800433c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	621a      	str	r2, [r3, #32]
}
 8004378:	bf00      	nop
 800437a:	371c      	adds	r7, #28
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40010000 	.word	0x40010000
 8004388:	40010400 	.word	0x40010400

0800438c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a12      	ldr	r2, [pc, #72]	@ (8004430 <TIM_OC4_SetConfig+0xa4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_OC4_SetConfig+0x68>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a11      	ldr	r2, [pc, #68]	@ (8004434 <TIM_OC4_SetConfig+0xa8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d109      	bne.n	8004408 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40010000 	.word	0x40010000
 8004434:	40010400 	.word	0x40010400

08004438 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f023 0201 	bic.w	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a28      	ldr	r2, [pc, #160]	@ (8004504 <TIM_TI1_SetConfig+0xcc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01b      	beq.n	800449e <TIM_TI1_SetConfig+0x66>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446c:	d017      	beq.n	800449e <TIM_TI1_SetConfig+0x66>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4a25      	ldr	r2, [pc, #148]	@ (8004508 <TIM_TI1_SetConfig+0xd0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <TIM_TI1_SetConfig+0x66>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a24      	ldr	r2, [pc, #144]	@ (800450c <TIM_TI1_SetConfig+0xd4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00f      	beq.n	800449e <TIM_TI1_SetConfig+0x66>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a23      	ldr	r2, [pc, #140]	@ (8004510 <TIM_TI1_SetConfig+0xd8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00b      	beq.n	800449e <TIM_TI1_SetConfig+0x66>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4a22      	ldr	r2, [pc, #136]	@ (8004514 <TIM_TI1_SetConfig+0xdc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <TIM_TI1_SetConfig+0x66>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a21      	ldr	r2, [pc, #132]	@ (8004518 <TIM_TI1_SetConfig+0xe0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_TI1_SetConfig+0x66>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a20      	ldr	r2, [pc, #128]	@ (800451c <TIM_TI1_SetConfig+0xe4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d101      	bne.n	80044a2 <TIM_TI1_SetConfig+0x6a>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <TIM_TI1_SetConfig+0x6c>
 80044a2:	2300      	movs	r3, #0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0303 	bic.w	r3, r3, #3
 80044ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e003      	b.n	80044c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f023 030a 	bic.w	r3, r3, #10
 80044dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f003 030a 	and.w	r3, r3, #10
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800
 8004510:	40000c00 	.word	0x40000c00
 8004514:	40010400 	.word	0x40010400
 8004518:	40014000 	.word	0x40014000
 800451c:	40001800 	.word	0x40001800

08004520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f023 0201 	bic.w	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800454a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 030a 	bic.w	r3, r3, #10
 800455c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800457e:	b480      	push	{r7}
 8004580:	b087      	sub	sp, #28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0210 	bic.w	r2, r3, #16
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	031b      	lsls	r3, r3, #12
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	621a      	str	r2, [r3, #32]
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	f023 0210 	bic.w	r2, r3, #16
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	031b      	lsls	r3, r3, #12
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004634:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	621a      	str	r2, [r3, #32]
}
 800464c:	bf00      	nop
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f023 0303 	bic.w	r3, r3, #3
 8004684:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004694:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	b2db      	uxtb	r3, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80046a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	621a      	str	r2, [r3, #32]
}
 80046c4:	bf00      	nop
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800470e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	031b      	lsls	r3, r3, #12
 8004714:	b29b      	uxth	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004722:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	031b      	lsls	r3, r3, #12
 8004728:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	f043 0307 	orr.w	r3, r3, #7
 800476c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	609a      	str	r2, [r3, #8]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800479a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	021a      	lsls	r2, r3, #8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2201      	movs	r2, #1
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	401a      	ands	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a1a      	ldr	r2, [r3, #32]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	fa01 f303 	lsl.w	r3, r1, r3
 80047f8:	431a      	orrs	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004820:	2302      	movs	r3, #2
 8004822:	e05a      	b.n	80048da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a21      	ldr	r2, [pc, #132]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d022      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004870:	d01d      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1d      	ldr	r2, [pc, #116]	@ (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d018      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1b      	ldr	r2, [pc, #108]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1a      	ldr	r2, [pc, #104]	@ (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00e      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a18      	ldr	r2, [pc, #96]	@ (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d009      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a17      	ldr	r2, [pc, #92]	@ (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a15      	ldr	r2, [pc, #84]	@ (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d10c      	bne.n	80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40010400 	.word	0x40010400
 80048fc:	40014000 	.word	0x40014000
 8004900:	40001800 	.word	0x40001800

08004904 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e042      	b.n	80049c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fc ff42 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2224      	movs	r2, #36	@ 0x24
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800496e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fdbd 	bl	80054f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	@ 0x28
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d175      	bne.n	8004ad8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_UART_Transmit+0x2c>
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e06e      	b.n	8004ada <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2221      	movs	r2, #33	@ 0x21
 8004a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a0a:	f7fd fa41 	bl	8001e90 <HAL_GetTick>
 8004a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	88fa      	ldrh	r2, [r7, #6]
 8004a14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	88fa      	ldrh	r2, [r7, #6]
 8004a1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a24:	d108      	bne.n	8004a38 <HAL_UART_Transmit+0x6c>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d104      	bne.n	8004a38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	e003      	b.n	8004a40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a40:	e02e      	b.n	8004aa0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2180      	movs	r1, #128	@ 0x80
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fb1f 	bl	8005090 <UART_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e03a      	b.n	8004ada <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	e007      	b.n	8004a92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	781a      	ldrb	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1cb      	bne.n	8004a42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2140      	movs	r1, #64	@ 0x40
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 faeb 	bl	8005090 <UART_WaitOnFlagUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e006      	b.n	8004ada <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	e000      	b.n	8004ada <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ad8:	2302      	movs	r3, #2
  }
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	4613      	mov	r3, r2
 8004aee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d112      	bne.n	8004b22 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_UART_Receive_IT+0x26>
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e00b      	b.n	8004b24 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	461a      	mov	r2, r3
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fb12 	bl	8005142 <UART_Start_Receive_IT>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	e000      	b.n	8004b24 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b0ba      	sub	sp, #232	@ 0xe8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <HAL_UART_IRQHandler+0x66>
 8004b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fbf2 	bl	8005374 <UART_Receive_IT>
      return;
 8004b90:	e25b      	b.n	800504a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80de 	beq.w	8004d58 <HAL_UART_IRQHandler+0x22c>
 8004b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80d1 	beq.w	8004d58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <HAL_UART_IRQHandler+0xae>
 8004bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd2:	f043 0201 	orr.w	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <HAL_UART_IRQHandler+0xd2>
 8004be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf6:	f043 0202 	orr.w	r2, r3, #2
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00b      	beq.n	8004c22 <HAL_UART_IRQHandler+0xf6>
 8004c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	f043 0204 	orr.w	r2, r3, #4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d011      	beq.n	8004c52 <HAL_UART_IRQHandler+0x126>
 8004c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d105      	bne.n	8004c46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4a:	f043 0208 	orr.w	r2, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 81f2 	beq.w	8005040 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_UART_IRQHandler+0x14e>
 8004c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fb7d 	bl	8005374 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c84:	2b40      	cmp	r3, #64	@ 0x40
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d103      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x17a>
 8004c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d04f      	beq.n	8004d46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa85 	bl	80051b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb6:	2b40      	cmp	r3, #64	@ 0x40
 8004cb8:	d141      	bne.n	8004d3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3314      	adds	r3, #20
 8004cc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3314      	adds	r3, #20
 8004ce2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ce6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004cea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004cf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1d9      	bne.n	8004cba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d013      	beq.n	8004d36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d12:	4a7e      	ldr	r2, [pc, #504]	@ (8004f0c <HAL_UART_IRQHandler+0x3e0>)
 8004d14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fd fa69 	bl	80021f2 <HAL_DMA_Abort_IT>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d30:	4610      	mov	r0, r2
 8004d32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	e00e      	b.n	8004d54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f994 	bl	8005064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	e00a      	b.n	8004d54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f990 	bl	8005064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d44:	e006      	b.n	8004d54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f98c 	bl	8005064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004d52:	e175      	b.n	8005040 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d54:	bf00      	nop
    return;
 8004d56:	e173      	b.n	8005040 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	f040 814f 	bne.w	8005000 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8148 	beq.w	8005000 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8141 	beq.w	8005000 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9e:	2b40      	cmp	r3, #64	@ 0x40
 8004da0:	f040 80b6 	bne.w	8004f10 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004db0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8145 	beq.w	8005044 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	f080 813e 	bcs.w	8005044 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004dce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dda:	f000 8088 	beq.w	8004eee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	330c      	adds	r3, #12
 8004e06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004e0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004e16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1d9      	bne.n	8004dde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3314      	adds	r3, #20
 8004e30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3314      	adds	r3, #20
 8004e4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e1      	bne.n	8004e2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3314      	adds	r3, #20
 8004e6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3314      	adds	r3, #20
 8004e86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e3      	bne.n	8004e66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ebc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ebe:	f023 0310 	bic.w	r3, r3, #16
 8004ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	330c      	adds	r3, #12
 8004ecc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ed0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ed2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ed6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e3      	bne.n	8004eac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fd f912 	bl	8002112 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f8b7 	bl	8005078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f0a:	e09b      	b.n	8005044 <HAL_UART_IRQHandler+0x518>
 8004f0c:	0800527d 	.word	0x0800527d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 808e 	beq.w	8005048 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8089 	beq.w	8005048 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e3      	bne.n	8004f36 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3314      	adds	r3, #20
 8004f74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3314      	adds	r3, #20
 8004f8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f92:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e3      	bne.n	8004f6e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0310 	bic.w	r3, r3, #16
 8004fca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004fd8:	61fa      	str	r2, [r7, #28]
 8004fda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	69b9      	ldr	r1, [r7, #24]
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e3      	bne.n	8004fb4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f83d 	bl	8005078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ffe:	e023      	b.n	8005048 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <HAL_UART_IRQHandler+0x4f4>
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f943 	bl	80052a4 <UART_Transmit_IT>
    return;
 800501e:	e014      	b.n	800504a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00e      	beq.n	800504a <HAL_UART_IRQHandler+0x51e>
 800502c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f983 	bl	8005344 <UART_EndTransmit_IT>
    return;
 800503e:	e004      	b.n	800504a <HAL_UART_IRQHandler+0x51e>
    return;
 8005040:	bf00      	nop
 8005042:	e002      	b.n	800504a <HAL_UART_IRQHandler+0x51e>
      return;
 8005044:	bf00      	nop
 8005046:	e000      	b.n	800504a <HAL_UART_IRQHandler+0x51e>
      return;
 8005048:	bf00      	nop
  }
}
 800504a:	37e8      	adds	r7, #232	@ 0xe8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a0:	e03b      	b.n	800511a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a8:	d037      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050aa:	f7fc fef1 	bl	8001e90 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	6a3a      	ldr	r2, [r7, #32]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d302      	bcc.n	80050c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e03a      	b.n	800513a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d023      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0x8a>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b80      	cmp	r3, #128	@ 0x80
 80050d6:	d020      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0x8a>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b40      	cmp	r3, #64	@ 0x40
 80050dc:	d01d      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d116      	bne.n	800511a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f857 	bl	80051b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2208      	movs	r2, #8
 800510c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e00f      	b.n	800513a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	429a      	cmp	r2, r3
 8005136:	d0b4      	beq.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	4613      	mov	r3, r2
 800514e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	88fa      	ldrh	r2, [r7, #6]
 800515a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	88fa      	ldrh	r2, [r7, #6]
 8005160:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2222      	movs	r2, #34	@ 0x22
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005186:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0220 	orr.w	r2, r2, #32
 80051a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b095      	sub	sp, #84	@ 0x54
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051de:	643a      	str	r2, [r7, #64]	@ 0x40
 80051e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e5      	bne.n	80051be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3314      	adds	r3, #20
 80051f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	61fb      	str	r3, [r7, #28]
   return(result);
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3314      	adds	r3, #20
 8005210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005214:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e5      	bne.n	80051f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522a:	2b01      	cmp	r3, #1
 800522c:	d119      	bne.n	8005262 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	60bb      	str	r3, [r7, #8]
   return(result);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f023 0310 	bic.w	r3, r3, #16
 8005244:	647b      	str	r3, [r7, #68]	@ 0x44
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	330c      	adds	r3, #12
 800524c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800524e:	61ba      	str	r2, [r7, #24]
 8005250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	6979      	ldr	r1, [r7, #20]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	613b      	str	r3, [r7, #16]
   return(result);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e5      	bne.n	800522e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005270:	bf00      	nop
 8005272:	3754      	adds	r7, #84	@ 0x54
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f7ff fee4 	bl	8005064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800529c:	bf00      	nop
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b21      	cmp	r3, #33	@ 0x21
 80052b6:	d13e      	bne.n	8005336 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c0:	d114      	bne.n	80052ec <UART_Transmit_IT+0x48>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d110      	bne.n	80052ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	1c9a      	adds	r2, r3, #2
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]
 80052ea:	e008      	b.n	80052fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	1c59      	adds	r1, r3, #1
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6211      	str	r1, [r2, #32]
 80052f6:	781a      	ldrb	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29b      	uxth	r3, r3
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	4619      	mov	r1, r3
 800530c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10f      	bne.n	8005332 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005320:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005330:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e000      	b.n	8005338 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800535a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff fe73 	bl	8005050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08c      	sub	sp, #48	@ 0x30
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b22      	cmp	r3, #34	@ 0x22
 8005386:	f040 80ae 	bne.w	80054e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005392:	d117      	bne.n	80053c4 <UART_Receive_IT+0x50>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d113      	bne.n	80053c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800539c:	2300      	movs	r3, #0
 800539e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053bc:	1c9a      	adds	r2, r3, #2
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80053c2:	e026      	b.n	8005412 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d6:	d007      	beq.n	80053e8 <UART_Receive_IT+0x74>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <UART_Receive_IT+0x82>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e008      	b.n	8005408 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005402:	b2da      	uxtb	r2, r3
 8005404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005406:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29b      	uxth	r3, r3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	4619      	mov	r1, r3
 8005420:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005422:	2b00      	cmp	r3, #0
 8005424:	d15d      	bne.n	80054e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0220 	bic.w	r2, r2, #32
 8005434:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005444:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	2b01      	cmp	r3, #1
 800546a:	d135      	bne.n	80054d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	613b      	str	r3, [r7, #16]
   return(result);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f023 0310 	bic.w	r3, r3, #16
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	330c      	adds	r3, #12
 8005490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005492:	623a      	str	r2, [r7, #32]
 8005494:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	69f9      	ldr	r1, [r7, #28]
 8005498:	6a3a      	ldr	r2, [r7, #32]
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	61bb      	str	r3, [r7, #24]
   return(result);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e5      	bne.n	8005472 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d10a      	bne.n	80054ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054ce:	4619      	mov	r1, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff fdd1 	bl	8005078 <HAL_UARTEx_RxEventCallback>
 80054d6:	e002      	b.n	80054de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7fc fb5f 	bl	8001b9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	e002      	b.n	80054e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	e000      	b.n	80054e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054e6:	2302      	movs	r3, #2
  }
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3730      	adds	r7, #48	@ 0x30
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f4:	b0c0      	sub	sp, #256	@ 0x100
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	68d9      	ldr	r1, [r3, #12]
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	ea40 0301 	orr.w	r3, r0, r1
 8005518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800551a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	431a      	orrs	r2, r3
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	431a      	orrs	r2, r3
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005548:	f021 010c 	bic.w	r1, r1, #12
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005556:	430b      	orrs	r3, r1
 8005558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800555a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556a:	6999      	ldr	r1, [r3, #24]
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	ea40 0301 	orr.w	r3, r0, r1
 8005576:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b8f      	ldr	r3, [pc, #572]	@ (80057bc <UART_SetConfig+0x2cc>)
 8005580:	429a      	cmp	r2, r3
 8005582:	d005      	beq.n	8005590 <UART_SetConfig+0xa0>
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b8d      	ldr	r3, [pc, #564]	@ (80057c0 <UART_SetConfig+0x2d0>)
 800558c:	429a      	cmp	r2, r3
 800558e:	d104      	bne.n	800559a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fd f938 	bl	8002804 <HAL_RCC_GetPCLK2Freq>
 8005594:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005598:	e003      	b.n	80055a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800559a:	f7fd f91f 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 800559e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ac:	f040 810c 	bne.w	80057c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055c2:	4622      	mov	r2, r4
 80055c4:	462b      	mov	r3, r5
 80055c6:	1891      	adds	r1, r2, r2
 80055c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055ca:	415b      	adcs	r3, r3
 80055cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055d2:	4621      	mov	r1, r4
 80055d4:	eb12 0801 	adds.w	r8, r2, r1
 80055d8:	4629      	mov	r1, r5
 80055da:	eb43 0901 	adc.w	r9, r3, r1
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055f2:	4690      	mov	r8, r2
 80055f4:	4699      	mov	r9, r3
 80055f6:	4623      	mov	r3, r4
 80055f8:	eb18 0303 	adds.w	r3, r8, r3
 80055fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005600:	462b      	mov	r3, r5
 8005602:	eb49 0303 	adc.w	r3, r9, r3
 8005606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005616:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800561a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800561e:	460b      	mov	r3, r1
 8005620:	18db      	adds	r3, r3, r3
 8005622:	653b      	str	r3, [r7, #80]	@ 0x50
 8005624:	4613      	mov	r3, r2
 8005626:	eb42 0303 	adc.w	r3, r2, r3
 800562a:	657b      	str	r3, [r7, #84]	@ 0x54
 800562c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005630:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005634:	f7fb fa2a 	bl	8000a8c <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4b61      	ldr	r3, [pc, #388]	@ (80057c4 <UART_SetConfig+0x2d4>)
 800563e:	fba3 2302 	umull	r2, r3, r3, r2
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	011c      	lsls	r4, r3, #4
 8005646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800564a:	2200      	movs	r2, #0
 800564c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005650:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005654:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	1891      	adds	r1, r2, r2
 800565e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005660:	415b      	adcs	r3, r3
 8005662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005668:	4641      	mov	r1, r8
 800566a:	eb12 0a01 	adds.w	sl, r2, r1
 800566e:	4649      	mov	r1, r9
 8005670:	eb43 0b01 	adc.w	fp, r3, r1
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005680:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005688:	4692      	mov	sl, r2
 800568a:	469b      	mov	fp, r3
 800568c:	4643      	mov	r3, r8
 800568e:	eb1a 0303 	adds.w	r3, sl, r3
 8005692:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005696:	464b      	mov	r3, r9
 8005698:	eb4b 0303 	adc.w	r3, fp, r3
 800569c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056b4:	460b      	mov	r3, r1
 80056b6:	18db      	adds	r3, r3, r3
 80056b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ba:	4613      	mov	r3, r2
 80056bc:	eb42 0303 	adc.w	r3, r2, r3
 80056c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056ca:	f7fb f9df 	bl	8000a8c <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	4b3b      	ldr	r3, [pc, #236]	@ (80057c4 <UART_SetConfig+0x2d4>)
 80056d6:	fba3 2301 	umull	r2, r3, r3, r1
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	2264      	movs	r2, #100	@ 0x64
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	1acb      	subs	r3, r1, r3
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80056ea:	4b36      	ldr	r3, [pc, #216]	@ (80057c4 <UART_SetConfig+0x2d4>)
 80056ec:	fba3 2302 	umull	r2, r3, r3, r2
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056f8:	441c      	add	r4, r3
 80056fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005704:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005708:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800570c:	4642      	mov	r2, r8
 800570e:	464b      	mov	r3, r9
 8005710:	1891      	adds	r1, r2, r2
 8005712:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005714:	415b      	adcs	r3, r3
 8005716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800571c:	4641      	mov	r1, r8
 800571e:	1851      	adds	r1, r2, r1
 8005720:	6339      	str	r1, [r7, #48]	@ 0x30
 8005722:	4649      	mov	r1, r9
 8005724:	414b      	adcs	r3, r1
 8005726:	637b      	str	r3, [r7, #52]	@ 0x34
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005734:	4659      	mov	r1, fp
 8005736:	00cb      	lsls	r3, r1, #3
 8005738:	4651      	mov	r1, sl
 800573a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800573e:	4651      	mov	r1, sl
 8005740:	00ca      	lsls	r2, r1, #3
 8005742:	4610      	mov	r0, r2
 8005744:	4619      	mov	r1, r3
 8005746:	4603      	mov	r3, r0
 8005748:	4642      	mov	r2, r8
 800574a:	189b      	adds	r3, r3, r2
 800574c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005750:	464b      	mov	r3, r9
 8005752:	460a      	mov	r2, r1
 8005754:	eb42 0303 	adc.w	r3, r2, r3
 8005758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005768:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800576c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005770:	460b      	mov	r3, r1
 8005772:	18db      	adds	r3, r3, r3
 8005774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005776:	4613      	mov	r3, r2
 8005778:	eb42 0303 	adc.w	r3, r2, r3
 800577c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800577e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005782:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005786:	f7fb f981 	bl	8000a8c <__aeabi_uldivmod>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <UART_SetConfig+0x2d4>)
 8005790:	fba3 1302 	umull	r1, r3, r3, r2
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	2164      	movs	r1, #100	@ 0x64
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	3332      	adds	r3, #50	@ 0x32
 80057a2:	4a08      	ldr	r2, [pc, #32]	@ (80057c4 <UART_SetConfig+0x2d4>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	f003 0207 	and.w	r2, r3, #7
 80057ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4422      	add	r2, r4
 80057b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057b8:	e106      	b.n	80059c8 <UART_SetConfig+0x4d8>
 80057ba:	bf00      	nop
 80057bc:	40011000 	.word	0x40011000
 80057c0:	40011400 	.word	0x40011400
 80057c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057da:	4642      	mov	r2, r8
 80057dc:	464b      	mov	r3, r9
 80057de:	1891      	adds	r1, r2, r2
 80057e0:	6239      	str	r1, [r7, #32]
 80057e2:	415b      	adcs	r3, r3
 80057e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057ea:	4641      	mov	r1, r8
 80057ec:	1854      	adds	r4, r2, r1
 80057ee:	4649      	mov	r1, r9
 80057f0:	eb43 0501 	adc.w	r5, r3, r1
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	00eb      	lsls	r3, r5, #3
 80057fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005802:	00e2      	lsls	r2, r4, #3
 8005804:	4614      	mov	r4, r2
 8005806:	461d      	mov	r5, r3
 8005808:	4643      	mov	r3, r8
 800580a:	18e3      	adds	r3, r4, r3
 800580c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005810:	464b      	mov	r3, r9
 8005812:	eb45 0303 	adc.w	r3, r5, r3
 8005816:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800581a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005826:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005836:	4629      	mov	r1, r5
 8005838:	008b      	lsls	r3, r1, #2
 800583a:	4621      	mov	r1, r4
 800583c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005840:	4621      	mov	r1, r4
 8005842:	008a      	lsls	r2, r1, #2
 8005844:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005848:	f7fb f920 	bl	8000a8c <__aeabi_uldivmod>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4b60      	ldr	r3, [pc, #384]	@ (80059d4 <UART_SetConfig+0x4e4>)
 8005852:	fba3 2302 	umull	r2, r3, r3, r2
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	011c      	lsls	r4, r3, #4
 800585a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005864:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005868:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	1891      	adds	r1, r2, r2
 8005872:	61b9      	str	r1, [r7, #24]
 8005874:	415b      	adcs	r3, r3
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800587c:	4641      	mov	r1, r8
 800587e:	1851      	adds	r1, r2, r1
 8005880:	6139      	str	r1, [r7, #16]
 8005882:	4649      	mov	r1, r9
 8005884:	414b      	adcs	r3, r1
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005894:	4659      	mov	r1, fp
 8005896:	00cb      	lsls	r3, r1, #3
 8005898:	4651      	mov	r1, sl
 800589a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800589e:	4651      	mov	r1, sl
 80058a0:	00ca      	lsls	r2, r1, #3
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	4642      	mov	r2, r8
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058b0:	464b      	mov	r3, r9
 80058b2:	460a      	mov	r2, r1
 80058b4:	eb42 0303 	adc.w	r3, r2, r3
 80058b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058d4:	4649      	mov	r1, r9
 80058d6:	008b      	lsls	r3, r1, #2
 80058d8:	4641      	mov	r1, r8
 80058da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058de:	4641      	mov	r1, r8
 80058e0:	008a      	lsls	r2, r1, #2
 80058e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058e6:	f7fb f8d1 	bl	8000a8c <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	4b38      	ldr	r3, [pc, #224]	@ (80059d4 <UART_SetConfig+0x4e4>)
 80058f2:	fba3 2301 	umull	r2, r3, r3, r1
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	2264      	movs	r2, #100	@ 0x64
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	1acb      	subs	r3, r1, r3
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	3332      	adds	r3, #50	@ 0x32
 8005904:	4a33      	ldr	r2, [pc, #204]	@ (80059d4 <UART_SetConfig+0x4e4>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005910:	441c      	add	r4, r3
 8005912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005916:	2200      	movs	r2, #0
 8005918:	673b      	str	r3, [r7, #112]	@ 0x70
 800591a:	677a      	str	r2, [r7, #116]	@ 0x74
 800591c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	415b      	adcs	r3, r3
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005930:	4641      	mov	r1, r8
 8005932:	1851      	adds	r1, r2, r1
 8005934:	6039      	str	r1, [r7, #0]
 8005936:	4649      	mov	r1, r9
 8005938:	414b      	adcs	r3, r1
 800593a:	607b      	str	r3, [r7, #4]
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005948:	4659      	mov	r1, fp
 800594a:	00cb      	lsls	r3, r1, #3
 800594c:	4651      	mov	r1, sl
 800594e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005952:	4651      	mov	r1, sl
 8005954:	00ca      	lsls	r2, r1, #3
 8005956:	4610      	mov	r0, r2
 8005958:	4619      	mov	r1, r3
 800595a:	4603      	mov	r3, r0
 800595c:	4642      	mov	r2, r8
 800595e:	189b      	adds	r3, r3, r2
 8005960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005962:	464b      	mov	r3, r9
 8005964:	460a      	mov	r2, r1
 8005966:	eb42 0303 	adc.w	r3, r2, r3
 800596a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	663b      	str	r3, [r7, #96]	@ 0x60
 8005976:	667a      	str	r2, [r7, #100]	@ 0x64
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005984:	4649      	mov	r1, r9
 8005986:	008b      	lsls	r3, r1, #2
 8005988:	4641      	mov	r1, r8
 800598a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800598e:	4641      	mov	r1, r8
 8005990:	008a      	lsls	r2, r1, #2
 8005992:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005996:	f7fb f879 	bl	8000a8c <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <UART_SetConfig+0x4e4>)
 80059a0:	fba3 1302 	umull	r1, r3, r3, r2
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	2164      	movs	r1, #100	@ 0x64
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	3332      	adds	r3, #50	@ 0x32
 80059b2:	4a08      	ldr	r2, [pc, #32]	@ (80059d4 <UART_SetConfig+0x4e4>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4422      	add	r2, r4
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059ce:	46bd      	mov	sp, r7
 80059d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d4:	51eb851f 	.word	0x51eb851f

080059d8 <std>:
 80059d8:	2300      	movs	r3, #0
 80059da:	b510      	push	{r4, lr}
 80059dc:	4604      	mov	r4, r0
 80059de:	e9c0 3300 	strd	r3, r3, [r0]
 80059e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059e6:	6083      	str	r3, [r0, #8]
 80059e8:	8181      	strh	r1, [r0, #12]
 80059ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80059ec:	81c2      	strh	r2, [r0, #14]
 80059ee:	6183      	str	r3, [r0, #24]
 80059f0:	4619      	mov	r1, r3
 80059f2:	2208      	movs	r2, #8
 80059f4:	305c      	adds	r0, #92	@ 0x5c
 80059f6:	f000 f9f9 	bl	8005dec <memset>
 80059fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005a30 <std+0x58>)
 80059fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80059fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005a34 <std+0x5c>)
 8005a00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a02:	4b0d      	ldr	r3, [pc, #52]	@ (8005a38 <std+0x60>)
 8005a04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a06:	4b0d      	ldr	r3, [pc, #52]	@ (8005a3c <std+0x64>)
 8005a08:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a40 <std+0x68>)
 8005a0c:	6224      	str	r4, [r4, #32]
 8005a0e:	429c      	cmp	r4, r3
 8005a10:	d006      	beq.n	8005a20 <std+0x48>
 8005a12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a16:	4294      	cmp	r4, r2
 8005a18:	d002      	beq.n	8005a20 <std+0x48>
 8005a1a:	33d0      	adds	r3, #208	@ 0xd0
 8005a1c:	429c      	cmp	r4, r3
 8005a1e:	d105      	bne.n	8005a2c <std+0x54>
 8005a20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a28:	f000 ba58 	b.w	8005edc <__retarget_lock_init_recursive>
 8005a2c:	bd10      	pop	{r4, pc}
 8005a2e:	bf00      	nop
 8005a30:	08005c3d 	.word	0x08005c3d
 8005a34:	08005c5f 	.word	0x08005c5f
 8005a38:	08005c97 	.word	0x08005c97
 8005a3c:	08005cbb 	.word	0x08005cbb
 8005a40:	20000330 	.word	0x20000330

08005a44 <stdio_exit_handler>:
 8005a44:	4a02      	ldr	r2, [pc, #8]	@ (8005a50 <stdio_exit_handler+0xc>)
 8005a46:	4903      	ldr	r1, [pc, #12]	@ (8005a54 <stdio_exit_handler+0x10>)
 8005a48:	4803      	ldr	r0, [pc, #12]	@ (8005a58 <stdio_exit_handler+0x14>)
 8005a4a:	f000 b869 	b.w	8005b20 <_fwalk_sglue>
 8005a4e:	bf00      	nop
 8005a50:	20000014 	.word	0x20000014
 8005a54:	0800677d 	.word	0x0800677d
 8005a58:	20000024 	.word	0x20000024

08005a5c <cleanup_stdio>:
 8005a5c:	6841      	ldr	r1, [r0, #4]
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <cleanup_stdio+0x34>)
 8005a60:	4299      	cmp	r1, r3
 8005a62:	b510      	push	{r4, lr}
 8005a64:	4604      	mov	r4, r0
 8005a66:	d001      	beq.n	8005a6c <cleanup_stdio+0x10>
 8005a68:	f000 fe88 	bl	800677c <_fflush_r>
 8005a6c:	68a1      	ldr	r1, [r4, #8]
 8005a6e:	4b09      	ldr	r3, [pc, #36]	@ (8005a94 <cleanup_stdio+0x38>)
 8005a70:	4299      	cmp	r1, r3
 8005a72:	d002      	beq.n	8005a7a <cleanup_stdio+0x1e>
 8005a74:	4620      	mov	r0, r4
 8005a76:	f000 fe81 	bl	800677c <_fflush_r>
 8005a7a:	68e1      	ldr	r1, [r4, #12]
 8005a7c:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <cleanup_stdio+0x3c>)
 8005a7e:	4299      	cmp	r1, r3
 8005a80:	d004      	beq.n	8005a8c <cleanup_stdio+0x30>
 8005a82:	4620      	mov	r0, r4
 8005a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a88:	f000 be78 	b.w	800677c <_fflush_r>
 8005a8c:	bd10      	pop	{r4, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000330 	.word	0x20000330
 8005a94:	20000398 	.word	0x20000398
 8005a98:	20000400 	.word	0x20000400

08005a9c <global_stdio_init.part.0>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005acc <global_stdio_init.part.0+0x30>)
 8005aa0:	4c0b      	ldr	r4, [pc, #44]	@ (8005ad0 <global_stdio_init.part.0+0x34>)
 8005aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ad4 <global_stdio_init.part.0+0x38>)
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2104      	movs	r1, #4
 8005aac:	f7ff ff94 	bl	80059d8 <std>
 8005ab0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	2109      	movs	r1, #9
 8005ab8:	f7ff ff8e 	bl	80059d8 <std>
 8005abc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac6:	2112      	movs	r1, #18
 8005ac8:	f7ff bf86 	b.w	80059d8 <std>
 8005acc:	20000468 	.word	0x20000468
 8005ad0:	20000330 	.word	0x20000330
 8005ad4:	08005a45 	.word	0x08005a45

08005ad8 <__sfp_lock_acquire>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	@ (8005ae0 <__sfp_lock_acquire+0x8>)
 8005ada:	f000 ba00 	b.w	8005ede <__retarget_lock_acquire_recursive>
 8005ade:	bf00      	nop
 8005ae0:	20000471 	.word	0x20000471

08005ae4 <__sfp_lock_release>:
 8005ae4:	4801      	ldr	r0, [pc, #4]	@ (8005aec <__sfp_lock_release+0x8>)
 8005ae6:	f000 b9fb 	b.w	8005ee0 <__retarget_lock_release_recursive>
 8005aea:	bf00      	nop
 8005aec:	20000471 	.word	0x20000471

08005af0 <__sinit>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	4604      	mov	r4, r0
 8005af4:	f7ff fff0 	bl	8005ad8 <__sfp_lock_acquire>
 8005af8:	6a23      	ldr	r3, [r4, #32]
 8005afa:	b11b      	cbz	r3, 8005b04 <__sinit+0x14>
 8005afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b00:	f7ff bff0 	b.w	8005ae4 <__sfp_lock_release>
 8005b04:	4b04      	ldr	r3, [pc, #16]	@ (8005b18 <__sinit+0x28>)
 8005b06:	6223      	str	r3, [r4, #32]
 8005b08:	4b04      	ldr	r3, [pc, #16]	@ (8005b1c <__sinit+0x2c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f5      	bne.n	8005afc <__sinit+0xc>
 8005b10:	f7ff ffc4 	bl	8005a9c <global_stdio_init.part.0>
 8005b14:	e7f2      	b.n	8005afc <__sinit+0xc>
 8005b16:	bf00      	nop
 8005b18:	08005a5d 	.word	0x08005a5d
 8005b1c:	20000468 	.word	0x20000468

08005b20 <_fwalk_sglue>:
 8005b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b24:	4607      	mov	r7, r0
 8005b26:	4688      	mov	r8, r1
 8005b28:	4614      	mov	r4, r2
 8005b2a:	2600      	movs	r6, #0
 8005b2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b30:	f1b9 0901 	subs.w	r9, r9, #1
 8005b34:	d505      	bpl.n	8005b42 <_fwalk_sglue+0x22>
 8005b36:	6824      	ldr	r4, [r4, #0]
 8005b38:	2c00      	cmp	r4, #0
 8005b3a:	d1f7      	bne.n	8005b2c <_fwalk_sglue+0xc>
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b42:	89ab      	ldrh	r3, [r5, #12]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d907      	bls.n	8005b58 <_fwalk_sglue+0x38>
 8005b48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	d003      	beq.n	8005b58 <_fwalk_sglue+0x38>
 8005b50:	4629      	mov	r1, r5
 8005b52:	4638      	mov	r0, r7
 8005b54:	47c0      	blx	r8
 8005b56:	4306      	orrs	r6, r0
 8005b58:	3568      	adds	r5, #104	@ 0x68
 8005b5a:	e7e9      	b.n	8005b30 <_fwalk_sglue+0x10>

08005b5c <iprintf>:
 8005b5c:	b40f      	push	{r0, r1, r2, r3}
 8005b5e:	b507      	push	{r0, r1, r2, lr}
 8005b60:	4906      	ldr	r1, [pc, #24]	@ (8005b7c <iprintf+0x20>)
 8005b62:	ab04      	add	r3, sp, #16
 8005b64:	6808      	ldr	r0, [r1, #0]
 8005b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b6a:	6881      	ldr	r1, [r0, #8]
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	f000 fadb 	bl	8006128 <_vfiprintf_r>
 8005b72:	b003      	add	sp, #12
 8005b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b78:	b004      	add	sp, #16
 8005b7a:	4770      	bx	lr
 8005b7c:	20000020 	.word	0x20000020

08005b80 <_puts_r>:
 8005b80:	6a03      	ldr	r3, [r0, #32]
 8005b82:	b570      	push	{r4, r5, r6, lr}
 8005b84:	6884      	ldr	r4, [r0, #8]
 8005b86:	4605      	mov	r5, r0
 8005b88:	460e      	mov	r6, r1
 8005b8a:	b90b      	cbnz	r3, 8005b90 <_puts_r+0x10>
 8005b8c:	f7ff ffb0 	bl	8005af0 <__sinit>
 8005b90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b92:	07db      	lsls	r3, r3, #31
 8005b94:	d405      	bmi.n	8005ba2 <_puts_r+0x22>
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	0598      	lsls	r0, r3, #22
 8005b9a:	d402      	bmi.n	8005ba2 <_puts_r+0x22>
 8005b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b9e:	f000 f99e 	bl	8005ede <__retarget_lock_acquire_recursive>
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	0719      	lsls	r1, r3, #28
 8005ba6:	d502      	bpl.n	8005bae <_puts_r+0x2e>
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d135      	bne.n	8005c1a <_puts_r+0x9a>
 8005bae:	4621      	mov	r1, r4
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	f000 f8c5 	bl	8005d40 <__swsetup_r>
 8005bb6:	b380      	cbz	r0, 8005c1a <_puts_r+0x9a>
 8005bb8:	f04f 35ff 	mov.w	r5, #4294967295
 8005bbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bbe:	07da      	lsls	r2, r3, #31
 8005bc0:	d405      	bmi.n	8005bce <_puts_r+0x4e>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	059b      	lsls	r3, r3, #22
 8005bc6:	d402      	bmi.n	8005bce <_puts_r+0x4e>
 8005bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bca:	f000 f989 	bl	8005ee0 <__retarget_lock_release_recursive>
 8005bce:	4628      	mov	r0, r5
 8005bd0:	bd70      	pop	{r4, r5, r6, pc}
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	da04      	bge.n	8005be0 <_puts_r+0x60>
 8005bd6:	69a2      	ldr	r2, [r4, #24]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	dc17      	bgt.n	8005c0c <_puts_r+0x8c>
 8005bdc:	290a      	cmp	r1, #10
 8005bde:	d015      	beq.n	8005c0c <_puts_r+0x8c>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	6022      	str	r2, [r4, #0]
 8005be6:	7019      	strb	r1, [r3, #0]
 8005be8:	68a3      	ldr	r3, [r4, #8]
 8005bea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	60a3      	str	r3, [r4, #8]
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	d1ed      	bne.n	8005bd2 <_puts_r+0x52>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da11      	bge.n	8005c1e <_puts_r+0x9e>
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	210a      	movs	r1, #10
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 f85f 	bl	8005cc2 <__swbuf_r>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d0d7      	beq.n	8005bb8 <_puts_r+0x38>
 8005c08:	250a      	movs	r5, #10
 8005c0a:	e7d7      	b.n	8005bbc <_puts_r+0x3c>
 8005c0c:	4622      	mov	r2, r4
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 f857 	bl	8005cc2 <__swbuf_r>
 8005c14:	3001      	adds	r0, #1
 8005c16:	d1e7      	bne.n	8005be8 <_puts_r+0x68>
 8005c18:	e7ce      	b.n	8005bb8 <_puts_r+0x38>
 8005c1a:	3e01      	subs	r6, #1
 8005c1c:	e7e4      	b.n	8005be8 <_puts_r+0x68>
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	6022      	str	r2, [r4, #0]
 8005c24:	220a      	movs	r2, #10
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e7ee      	b.n	8005c08 <_puts_r+0x88>
	...

08005c2c <puts>:
 8005c2c:	4b02      	ldr	r3, [pc, #8]	@ (8005c38 <puts+0xc>)
 8005c2e:	4601      	mov	r1, r0
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	f7ff bfa5 	b.w	8005b80 <_puts_r>
 8005c36:	bf00      	nop
 8005c38:	20000020 	.word	0x20000020

08005c3c <__sread>:
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	460c      	mov	r4, r1
 8005c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c44:	f000 f8fc 	bl	8005e40 <_read_r>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	bfab      	itete	ge
 8005c4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c50:	181b      	addge	r3, r3, r0
 8005c52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c56:	bfac      	ite	ge
 8005c58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c5a:	81a3      	strhlt	r3, [r4, #12]
 8005c5c:	bd10      	pop	{r4, pc}

08005c5e <__swrite>:
 8005c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c62:	461f      	mov	r7, r3
 8005c64:	898b      	ldrh	r3, [r1, #12]
 8005c66:	05db      	lsls	r3, r3, #23
 8005c68:	4605      	mov	r5, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	4616      	mov	r6, r2
 8005c6e:	d505      	bpl.n	8005c7c <__swrite+0x1e>
 8005c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c74:	2302      	movs	r3, #2
 8005c76:	2200      	movs	r2, #0
 8005c78:	f000 f8d0 	bl	8005e1c <_lseek_r>
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	4632      	mov	r2, r6
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c92:	f000 b8e7 	b.w	8005e64 <_write_r>

08005c96 <__sseek>:
 8005c96:	b510      	push	{r4, lr}
 8005c98:	460c      	mov	r4, r1
 8005c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9e:	f000 f8bd 	bl	8005e1c <_lseek_r>
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	bf15      	itete	ne
 8005ca8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005caa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cb2:	81a3      	strheq	r3, [r4, #12]
 8005cb4:	bf18      	it	ne
 8005cb6:	81a3      	strhne	r3, [r4, #12]
 8005cb8:	bd10      	pop	{r4, pc}

08005cba <__sclose>:
 8005cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbe:	f000 b89d 	b.w	8005dfc <_close_r>

08005cc2 <__swbuf_r>:
 8005cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc4:	460e      	mov	r6, r1
 8005cc6:	4614      	mov	r4, r2
 8005cc8:	4605      	mov	r5, r0
 8005cca:	b118      	cbz	r0, 8005cd4 <__swbuf_r+0x12>
 8005ccc:	6a03      	ldr	r3, [r0, #32]
 8005cce:	b90b      	cbnz	r3, 8005cd4 <__swbuf_r+0x12>
 8005cd0:	f7ff ff0e 	bl	8005af0 <__sinit>
 8005cd4:	69a3      	ldr	r3, [r4, #24]
 8005cd6:	60a3      	str	r3, [r4, #8]
 8005cd8:	89a3      	ldrh	r3, [r4, #12]
 8005cda:	071a      	lsls	r2, r3, #28
 8005cdc:	d501      	bpl.n	8005ce2 <__swbuf_r+0x20>
 8005cde:	6923      	ldr	r3, [r4, #16]
 8005ce0:	b943      	cbnz	r3, 8005cf4 <__swbuf_r+0x32>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f000 f82b 	bl	8005d40 <__swsetup_r>
 8005cea:	b118      	cbz	r0, 8005cf4 <__swbuf_r+0x32>
 8005cec:	f04f 37ff 	mov.w	r7, #4294967295
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	6922      	ldr	r2, [r4, #16]
 8005cf8:	1a98      	subs	r0, r3, r2
 8005cfa:	6963      	ldr	r3, [r4, #20]
 8005cfc:	b2f6      	uxtb	r6, r6
 8005cfe:	4283      	cmp	r3, r0
 8005d00:	4637      	mov	r7, r6
 8005d02:	dc05      	bgt.n	8005d10 <__swbuf_r+0x4e>
 8005d04:	4621      	mov	r1, r4
 8005d06:	4628      	mov	r0, r5
 8005d08:	f000 fd38 	bl	800677c <_fflush_r>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d1ed      	bne.n	8005cec <__swbuf_r+0x2a>
 8005d10:	68a3      	ldr	r3, [r4, #8]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	60a3      	str	r3, [r4, #8]
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	6022      	str	r2, [r4, #0]
 8005d1c:	701e      	strb	r6, [r3, #0]
 8005d1e:	6962      	ldr	r2, [r4, #20]
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d004      	beq.n	8005d30 <__swbuf_r+0x6e>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	07db      	lsls	r3, r3, #31
 8005d2a:	d5e1      	bpl.n	8005cf0 <__swbuf_r+0x2e>
 8005d2c:	2e0a      	cmp	r6, #10
 8005d2e:	d1df      	bne.n	8005cf0 <__swbuf_r+0x2e>
 8005d30:	4621      	mov	r1, r4
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 fd22 	bl	800677c <_fflush_r>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d0d9      	beq.n	8005cf0 <__swbuf_r+0x2e>
 8005d3c:	e7d6      	b.n	8005cec <__swbuf_r+0x2a>
	...

08005d40 <__swsetup_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4b29      	ldr	r3, [pc, #164]	@ (8005de8 <__swsetup_r+0xa8>)
 8005d44:	4605      	mov	r5, r0
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	460c      	mov	r4, r1
 8005d4a:	b118      	cbz	r0, 8005d54 <__swsetup_r+0x14>
 8005d4c:	6a03      	ldr	r3, [r0, #32]
 8005d4e:	b90b      	cbnz	r3, 8005d54 <__swsetup_r+0x14>
 8005d50:	f7ff fece 	bl	8005af0 <__sinit>
 8005d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d58:	0719      	lsls	r1, r3, #28
 8005d5a:	d422      	bmi.n	8005da2 <__swsetup_r+0x62>
 8005d5c:	06da      	lsls	r2, r3, #27
 8005d5e:	d407      	bmi.n	8005d70 <__swsetup_r+0x30>
 8005d60:	2209      	movs	r2, #9
 8005d62:	602a      	str	r2, [r5, #0]
 8005d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d68:	81a3      	strh	r3, [r4, #12]
 8005d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6e:	e033      	b.n	8005dd8 <__swsetup_r+0x98>
 8005d70:	0758      	lsls	r0, r3, #29
 8005d72:	d512      	bpl.n	8005d9a <__swsetup_r+0x5a>
 8005d74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d76:	b141      	cbz	r1, 8005d8a <__swsetup_r+0x4a>
 8005d78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d7c:	4299      	cmp	r1, r3
 8005d7e:	d002      	beq.n	8005d86 <__swsetup_r+0x46>
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 f8af 	bl	8005ee4 <_free_r>
 8005d86:	2300      	movs	r3, #0
 8005d88:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	2300      	movs	r3, #0
 8005d94:	6063      	str	r3, [r4, #4]
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	f043 0308 	orr.w	r3, r3, #8
 8005da0:	81a3      	strh	r3, [r4, #12]
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	b94b      	cbnz	r3, 8005dba <__swsetup_r+0x7a>
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db0:	d003      	beq.n	8005dba <__swsetup_r+0x7a>
 8005db2:	4621      	mov	r1, r4
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 fd2f 	bl	8006818 <__smakebuf_r>
 8005dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dbe:	f013 0201 	ands.w	r2, r3, #1
 8005dc2:	d00a      	beq.n	8005dda <__swsetup_r+0x9a>
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	60a2      	str	r2, [r4, #8]
 8005dc8:	6962      	ldr	r2, [r4, #20]
 8005dca:	4252      	negs	r2, r2
 8005dcc:	61a2      	str	r2, [r4, #24]
 8005dce:	6922      	ldr	r2, [r4, #16]
 8005dd0:	b942      	cbnz	r2, 8005de4 <__swsetup_r+0xa4>
 8005dd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dd6:	d1c5      	bne.n	8005d64 <__swsetup_r+0x24>
 8005dd8:	bd38      	pop	{r3, r4, r5, pc}
 8005dda:	0799      	lsls	r1, r3, #30
 8005ddc:	bf58      	it	pl
 8005dde:	6962      	ldrpl	r2, [r4, #20]
 8005de0:	60a2      	str	r2, [r4, #8]
 8005de2:	e7f4      	b.n	8005dce <__swsetup_r+0x8e>
 8005de4:	2000      	movs	r0, #0
 8005de6:	e7f7      	b.n	8005dd8 <__swsetup_r+0x98>
 8005de8:	20000020 	.word	0x20000020

08005dec <memset>:
 8005dec:	4402      	add	r2, r0
 8005dee:	4603      	mov	r3, r0
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d100      	bne.n	8005df6 <memset+0xa>
 8005df4:	4770      	bx	lr
 8005df6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfa:	e7f9      	b.n	8005df0 <memset+0x4>

08005dfc <_close_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d06      	ldr	r5, [pc, #24]	@ (8005e18 <_close_r+0x1c>)
 8005e00:	2300      	movs	r3, #0
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	602b      	str	r3, [r5, #0]
 8005e08:	f7fb fdbf 	bl	800198a <_close>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_close_r+0x1a>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_close_r+0x1a>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	2000046c 	.word	0x2000046c

08005e1c <_lseek_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4d07      	ldr	r5, [pc, #28]	@ (8005e3c <_lseek_r+0x20>)
 8005e20:	4604      	mov	r4, r0
 8005e22:	4608      	mov	r0, r1
 8005e24:	4611      	mov	r1, r2
 8005e26:	2200      	movs	r2, #0
 8005e28:	602a      	str	r2, [r5, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f7fb fdd4 	bl	80019d8 <_lseek>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d102      	bne.n	8005e3a <_lseek_r+0x1e>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	b103      	cbz	r3, 8005e3a <_lseek_r+0x1e>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	2000046c 	.word	0x2000046c

08005e40 <_read_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4d07      	ldr	r5, [pc, #28]	@ (8005e60 <_read_r+0x20>)
 8005e44:	4604      	mov	r4, r0
 8005e46:	4608      	mov	r0, r1
 8005e48:	4611      	mov	r1, r2
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	602a      	str	r2, [r5, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f7fb fd62 	bl	8001918 <_read>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_read_r+0x1e>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_read_r+0x1e>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	2000046c 	.word	0x2000046c

08005e64 <_write_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4d07      	ldr	r5, [pc, #28]	@ (8005e84 <_write_r+0x20>)
 8005e68:	4604      	mov	r4, r0
 8005e6a:	4608      	mov	r0, r1
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	2200      	movs	r2, #0
 8005e70:	602a      	str	r2, [r5, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f7fb fd6d 	bl	8001952 <_write>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	d102      	bne.n	8005e82 <_write_r+0x1e>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	b103      	cbz	r3, 8005e82 <_write_r+0x1e>
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	bd38      	pop	{r3, r4, r5, pc}
 8005e84:	2000046c 	.word	0x2000046c

08005e88 <__errno>:
 8005e88:	4b01      	ldr	r3, [pc, #4]	@ (8005e90 <__errno+0x8>)
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	20000020 	.word	0x20000020

08005e94 <__libc_init_array>:
 8005e94:	b570      	push	{r4, r5, r6, lr}
 8005e96:	4d0d      	ldr	r5, [pc, #52]	@ (8005ecc <__libc_init_array+0x38>)
 8005e98:	4c0d      	ldr	r4, [pc, #52]	@ (8005ed0 <__libc_init_array+0x3c>)
 8005e9a:	1b64      	subs	r4, r4, r5
 8005e9c:	10a4      	asrs	r4, r4, #2
 8005e9e:	2600      	movs	r6, #0
 8005ea0:	42a6      	cmp	r6, r4
 8005ea2:	d109      	bne.n	8005eb8 <__libc_init_array+0x24>
 8005ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8005ed4 <__libc_init_array+0x40>)
 8005ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8005ed8 <__libc_init_array+0x44>)
 8005ea8:	f000 fd24 	bl	80068f4 <_init>
 8005eac:	1b64      	subs	r4, r4, r5
 8005eae:	10a4      	asrs	r4, r4, #2
 8005eb0:	2600      	movs	r6, #0
 8005eb2:	42a6      	cmp	r6, r4
 8005eb4:	d105      	bne.n	8005ec2 <__libc_init_array+0x2e>
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
 8005eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ebc:	4798      	blx	r3
 8005ebe:	3601      	adds	r6, #1
 8005ec0:	e7ee      	b.n	8005ea0 <__libc_init_array+0xc>
 8005ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec6:	4798      	blx	r3
 8005ec8:	3601      	adds	r6, #1
 8005eca:	e7f2      	b.n	8005eb2 <__libc_init_array+0x1e>
 8005ecc:	0800697c 	.word	0x0800697c
 8005ed0:	0800697c 	.word	0x0800697c
 8005ed4:	0800697c 	.word	0x0800697c
 8005ed8:	08006980 	.word	0x08006980

08005edc <__retarget_lock_init_recursive>:
 8005edc:	4770      	bx	lr

08005ede <__retarget_lock_acquire_recursive>:
 8005ede:	4770      	bx	lr

08005ee0 <__retarget_lock_release_recursive>:
 8005ee0:	4770      	bx	lr
	...

08005ee4 <_free_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	2900      	cmp	r1, #0
 8005eea:	d041      	beq.n	8005f70 <_free_r+0x8c>
 8005eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ef0:	1f0c      	subs	r4, r1, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bfb8      	it	lt
 8005ef6:	18e4      	addlt	r4, r4, r3
 8005ef8:	f000 f8e0 	bl	80060bc <__malloc_lock>
 8005efc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f74 <_free_r+0x90>)
 8005efe:	6813      	ldr	r3, [r2, #0]
 8005f00:	b933      	cbnz	r3, 8005f10 <_free_r+0x2c>
 8005f02:	6063      	str	r3, [r4, #4]
 8005f04:	6014      	str	r4, [r2, #0]
 8005f06:	4628      	mov	r0, r5
 8005f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f0c:	f000 b8dc 	b.w	80060c8 <__malloc_unlock>
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	d908      	bls.n	8005f26 <_free_r+0x42>
 8005f14:	6820      	ldr	r0, [r4, #0]
 8005f16:	1821      	adds	r1, r4, r0
 8005f18:	428b      	cmp	r3, r1
 8005f1a:	bf01      	itttt	eq
 8005f1c:	6819      	ldreq	r1, [r3, #0]
 8005f1e:	685b      	ldreq	r3, [r3, #4]
 8005f20:	1809      	addeq	r1, r1, r0
 8005f22:	6021      	streq	r1, [r4, #0]
 8005f24:	e7ed      	b.n	8005f02 <_free_r+0x1e>
 8005f26:	461a      	mov	r2, r3
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	b10b      	cbz	r3, 8005f30 <_free_r+0x4c>
 8005f2c:	42a3      	cmp	r3, r4
 8005f2e:	d9fa      	bls.n	8005f26 <_free_r+0x42>
 8005f30:	6811      	ldr	r1, [r2, #0]
 8005f32:	1850      	adds	r0, r2, r1
 8005f34:	42a0      	cmp	r0, r4
 8005f36:	d10b      	bne.n	8005f50 <_free_r+0x6c>
 8005f38:	6820      	ldr	r0, [r4, #0]
 8005f3a:	4401      	add	r1, r0
 8005f3c:	1850      	adds	r0, r2, r1
 8005f3e:	4283      	cmp	r3, r0
 8005f40:	6011      	str	r1, [r2, #0]
 8005f42:	d1e0      	bne.n	8005f06 <_free_r+0x22>
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	6053      	str	r3, [r2, #4]
 8005f4a:	4408      	add	r0, r1
 8005f4c:	6010      	str	r0, [r2, #0]
 8005f4e:	e7da      	b.n	8005f06 <_free_r+0x22>
 8005f50:	d902      	bls.n	8005f58 <_free_r+0x74>
 8005f52:	230c      	movs	r3, #12
 8005f54:	602b      	str	r3, [r5, #0]
 8005f56:	e7d6      	b.n	8005f06 <_free_r+0x22>
 8005f58:	6820      	ldr	r0, [r4, #0]
 8005f5a:	1821      	adds	r1, r4, r0
 8005f5c:	428b      	cmp	r3, r1
 8005f5e:	bf04      	itt	eq
 8005f60:	6819      	ldreq	r1, [r3, #0]
 8005f62:	685b      	ldreq	r3, [r3, #4]
 8005f64:	6063      	str	r3, [r4, #4]
 8005f66:	bf04      	itt	eq
 8005f68:	1809      	addeq	r1, r1, r0
 8005f6a:	6021      	streq	r1, [r4, #0]
 8005f6c:	6054      	str	r4, [r2, #4]
 8005f6e:	e7ca      	b.n	8005f06 <_free_r+0x22>
 8005f70:	bd38      	pop	{r3, r4, r5, pc}
 8005f72:	bf00      	nop
 8005f74:	20000478 	.word	0x20000478

08005f78 <sbrk_aligned>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	4e0f      	ldr	r6, [pc, #60]	@ (8005fb8 <sbrk_aligned+0x40>)
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	6831      	ldr	r1, [r6, #0]
 8005f80:	4605      	mov	r5, r0
 8005f82:	b911      	cbnz	r1, 8005f8a <sbrk_aligned+0x12>
 8005f84:	f000 fca6 	bl	80068d4 <_sbrk_r>
 8005f88:	6030      	str	r0, [r6, #0]
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f000 fca1 	bl	80068d4 <_sbrk_r>
 8005f92:	1c43      	adds	r3, r0, #1
 8005f94:	d103      	bne.n	8005f9e <sbrk_aligned+0x26>
 8005f96:	f04f 34ff 	mov.w	r4, #4294967295
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	bd70      	pop	{r4, r5, r6, pc}
 8005f9e:	1cc4      	adds	r4, r0, #3
 8005fa0:	f024 0403 	bic.w	r4, r4, #3
 8005fa4:	42a0      	cmp	r0, r4
 8005fa6:	d0f8      	beq.n	8005f9a <sbrk_aligned+0x22>
 8005fa8:	1a21      	subs	r1, r4, r0
 8005faa:	4628      	mov	r0, r5
 8005fac:	f000 fc92 	bl	80068d4 <_sbrk_r>
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d1f2      	bne.n	8005f9a <sbrk_aligned+0x22>
 8005fb4:	e7ef      	b.n	8005f96 <sbrk_aligned+0x1e>
 8005fb6:	bf00      	nop
 8005fb8:	20000474 	.word	0x20000474

08005fbc <_malloc_r>:
 8005fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc0:	1ccd      	adds	r5, r1, #3
 8005fc2:	f025 0503 	bic.w	r5, r5, #3
 8005fc6:	3508      	adds	r5, #8
 8005fc8:	2d0c      	cmp	r5, #12
 8005fca:	bf38      	it	cc
 8005fcc:	250c      	movcc	r5, #12
 8005fce:	2d00      	cmp	r5, #0
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	db01      	blt.n	8005fd8 <_malloc_r+0x1c>
 8005fd4:	42a9      	cmp	r1, r5
 8005fd6:	d904      	bls.n	8005fe2 <_malloc_r+0x26>
 8005fd8:	230c      	movs	r3, #12
 8005fda:	6033      	str	r3, [r6, #0]
 8005fdc:	2000      	movs	r0, #0
 8005fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060b8 <_malloc_r+0xfc>
 8005fe6:	f000 f869 	bl	80060bc <__malloc_lock>
 8005fea:	f8d8 3000 	ldr.w	r3, [r8]
 8005fee:	461c      	mov	r4, r3
 8005ff0:	bb44      	cbnz	r4, 8006044 <_malloc_r+0x88>
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f7ff ffbf 	bl	8005f78 <sbrk_aligned>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	d158      	bne.n	80060b2 <_malloc_r+0xf6>
 8006000:	f8d8 4000 	ldr.w	r4, [r8]
 8006004:	4627      	mov	r7, r4
 8006006:	2f00      	cmp	r7, #0
 8006008:	d143      	bne.n	8006092 <_malloc_r+0xd6>
 800600a:	2c00      	cmp	r4, #0
 800600c:	d04b      	beq.n	80060a6 <_malloc_r+0xea>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	4639      	mov	r1, r7
 8006012:	4630      	mov	r0, r6
 8006014:	eb04 0903 	add.w	r9, r4, r3
 8006018:	f000 fc5c 	bl	80068d4 <_sbrk_r>
 800601c:	4581      	cmp	r9, r0
 800601e:	d142      	bne.n	80060a6 <_malloc_r+0xea>
 8006020:	6821      	ldr	r1, [r4, #0]
 8006022:	1a6d      	subs	r5, r5, r1
 8006024:	4629      	mov	r1, r5
 8006026:	4630      	mov	r0, r6
 8006028:	f7ff ffa6 	bl	8005f78 <sbrk_aligned>
 800602c:	3001      	adds	r0, #1
 800602e:	d03a      	beq.n	80060a6 <_malloc_r+0xea>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	442b      	add	r3, r5
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	f8d8 3000 	ldr.w	r3, [r8]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	bb62      	cbnz	r2, 8006098 <_malloc_r+0xdc>
 800603e:	f8c8 7000 	str.w	r7, [r8]
 8006042:	e00f      	b.n	8006064 <_malloc_r+0xa8>
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	1b52      	subs	r2, r2, r5
 8006048:	d420      	bmi.n	800608c <_malloc_r+0xd0>
 800604a:	2a0b      	cmp	r2, #11
 800604c:	d917      	bls.n	800607e <_malloc_r+0xc2>
 800604e:	1961      	adds	r1, r4, r5
 8006050:	42a3      	cmp	r3, r4
 8006052:	6025      	str	r5, [r4, #0]
 8006054:	bf18      	it	ne
 8006056:	6059      	strne	r1, [r3, #4]
 8006058:	6863      	ldr	r3, [r4, #4]
 800605a:	bf08      	it	eq
 800605c:	f8c8 1000 	streq.w	r1, [r8]
 8006060:	5162      	str	r2, [r4, r5]
 8006062:	604b      	str	r3, [r1, #4]
 8006064:	4630      	mov	r0, r6
 8006066:	f000 f82f 	bl	80060c8 <__malloc_unlock>
 800606a:	f104 000b 	add.w	r0, r4, #11
 800606e:	1d23      	adds	r3, r4, #4
 8006070:	f020 0007 	bic.w	r0, r0, #7
 8006074:	1ac2      	subs	r2, r0, r3
 8006076:	bf1c      	itt	ne
 8006078:	1a1b      	subne	r3, r3, r0
 800607a:	50a3      	strne	r3, [r4, r2]
 800607c:	e7af      	b.n	8005fde <_malloc_r+0x22>
 800607e:	6862      	ldr	r2, [r4, #4]
 8006080:	42a3      	cmp	r3, r4
 8006082:	bf0c      	ite	eq
 8006084:	f8c8 2000 	streq.w	r2, [r8]
 8006088:	605a      	strne	r2, [r3, #4]
 800608a:	e7eb      	b.n	8006064 <_malloc_r+0xa8>
 800608c:	4623      	mov	r3, r4
 800608e:	6864      	ldr	r4, [r4, #4]
 8006090:	e7ae      	b.n	8005ff0 <_malloc_r+0x34>
 8006092:	463c      	mov	r4, r7
 8006094:	687f      	ldr	r7, [r7, #4]
 8006096:	e7b6      	b.n	8006006 <_malloc_r+0x4a>
 8006098:	461a      	mov	r2, r3
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	42a3      	cmp	r3, r4
 800609e:	d1fb      	bne.n	8006098 <_malloc_r+0xdc>
 80060a0:	2300      	movs	r3, #0
 80060a2:	6053      	str	r3, [r2, #4]
 80060a4:	e7de      	b.n	8006064 <_malloc_r+0xa8>
 80060a6:	230c      	movs	r3, #12
 80060a8:	6033      	str	r3, [r6, #0]
 80060aa:	4630      	mov	r0, r6
 80060ac:	f000 f80c 	bl	80060c8 <__malloc_unlock>
 80060b0:	e794      	b.n	8005fdc <_malloc_r+0x20>
 80060b2:	6005      	str	r5, [r0, #0]
 80060b4:	e7d6      	b.n	8006064 <_malloc_r+0xa8>
 80060b6:	bf00      	nop
 80060b8:	20000478 	.word	0x20000478

080060bc <__malloc_lock>:
 80060bc:	4801      	ldr	r0, [pc, #4]	@ (80060c4 <__malloc_lock+0x8>)
 80060be:	f7ff bf0e 	b.w	8005ede <__retarget_lock_acquire_recursive>
 80060c2:	bf00      	nop
 80060c4:	20000470 	.word	0x20000470

080060c8 <__malloc_unlock>:
 80060c8:	4801      	ldr	r0, [pc, #4]	@ (80060d0 <__malloc_unlock+0x8>)
 80060ca:	f7ff bf09 	b.w	8005ee0 <__retarget_lock_release_recursive>
 80060ce:	bf00      	nop
 80060d0:	20000470 	.word	0x20000470

080060d4 <__sfputc_r>:
 80060d4:	6893      	ldr	r3, [r2, #8]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	b410      	push	{r4}
 80060dc:	6093      	str	r3, [r2, #8]
 80060de:	da08      	bge.n	80060f2 <__sfputc_r+0x1e>
 80060e0:	6994      	ldr	r4, [r2, #24]
 80060e2:	42a3      	cmp	r3, r4
 80060e4:	db01      	blt.n	80060ea <__sfputc_r+0x16>
 80060e6:	290a      	cmp	r1, #10
 80060e8:	d103      	bne.n	80060f2 <__sfputc_r+0x1e>
 80060ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ee:	f7ff bde8 	b.w	8005cc2 <__swbuf_r>
 80060f2:	6813      	ldr	r3, [r2, #0]
 80060f4:	1c58      	adds	r0, r3, #1
 80060f6:	6010      	str	r0, [r2, #0]
 80060f8:	7019      	strb	r1, [r3, #0]
 80060fa:	4608      	mov	r0, r1
 80060fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006100:	4770      	bx	lr

08006102 <__sfputs_r>:
 8006102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006104:	4606      	mov	r6, r0
 8006106:	460f      	mov	r7, r1
 8006108:	4614      	mov	r4, r2
 800610a:	18d5      	adds	r5, r2, r3
 800610c:	42ac      	cmp	r4, r5
 800610e:	d101      	bne.n	8006114 <__sfputs_r+0x12>
 8006110:	2000      	movs	r0, #0
 8006112:	e007      	b.n	8006124 <__sfputs_r+0x22>
 8006114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006118:	463a      	mov	r2, r7
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ffda 	bl	80060d4 <__sfputc_r>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d1f3      	bne.n	800610c <__sfputs_r+0xa>
 8006124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006128 <_vfiprintf_r>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	460d      	mov	r5, r1
 800612e:	b09d      	sub	sp, #116	@ 0x74
 8006130:	4614      	mov	r4, r2
 8006132:	4698      	mov	r8, r3
 8006134:	4606      	mov	r6, r0
 8006136:	b118      	cbz	r0, 8006140 <_vfiprintf_r+0x18>
 8006138:	6a03      	ldr	r3, [r0, #32]
 800613a:	b90b      	cbnz	r3, 8006140 <_vfiprintf_r+0x18>
 800613c:	f7ff fcd8 	bl	8005af0 <__sinit>
 8006140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006142:	07d9      	lsls	r1, r3, #31
 8006144:	d405      	bmi.n	8006152 <_vfiprintf_r+0x2a>
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	059a      	lsls	r2, r3, #22
 800614a:	d402      	bmi.n	8006152 <_vfiprintf_r+0x2a>
 800614c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800614e:	f7ff fec6 	bl	8005ede <__retarget_lock_acquire_recursive>
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	071b      	lsls	r3, r3, #28
 8006156:	d501      	bpl.n	800615c <_vfiprintf_r+0x34>
 8006158:	692b      	ldr	r3, [r5, #16]
 800615a:	b99b      	cbnz	r3, 8006184 <_vfiprintf_r+0x5c>
 800615c:	4629      	mov	r1, r5
 800615e:	4630      	mov	r0, r6
 8006160:	f7ff fdee 	bl	8005d40 <__swsetup_r>
 8006164:	b170      	cbz	r0, 8006184 <_vfiprintf_r+0x5c>
 8006166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006168:	07dc      	lsls	r4, r3, #31
 800616a:	d504      	bpl.n	8006176 <_vfiprintf_r+0x4e>
 800616c:	f04f 30ff 	mov.w	r0, #4294967295
 8006170:	b01d      	add	sp, #116	@ 0x74
 8006172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006176:	89ab      	ldrh	r3, [r5, #12]
 8006178:	0598      	lsls	r0, r3, #22
 800617a:	d4f7      	bmi.n	800616c <_vfiprintf_r+0x44>
 800617c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800617e:	f7ff feaf 	bl	8005ee0 <__retarget_lock_release_recursive>
 8006182:	e7f3      	b.n	800616c <_vfiprintf_r+0x44>
 8006184:	2300      	movs	r3, #0
 8006186:	9309      	str	r3, [sp, #36]	@ 0x24
 8006188:	2320      	movs	r3, #32
 800618a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800618e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006192:	2330      	movs	r3, #48	@ 0x30
 8006194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006344 <_vfiprintf_r+0x21c>
 8006198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800619c:	f04f 0901 	mov.w	r9, #1
 80061a0:	4623      	mov	r3, r4
 80061a2:	469a      	mov	sl, r3
 80061a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061a8:	b10a      	cbz	r2, 80061ae <_vfiprintf_r+0x86>
 80061aa:	2a25      	cmp	r2, #37	@ 0x25
 80061ac:	d1f9      	bne.n	80061a2 <_vfiprintf_r+0x7a>
 80061ae:	ebba 0b04 	subs.w	fp, sl, r4
 80061b2:	d00b      	beq.n	80061cc <_vfiprintf_r+0xa4>
 80061b4:	465b      	mov	r3, fp
 80061b6:	4622      	mov	r2, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ffa1 	bl	8006102 <__sfputs_r>
 80061c0:	3001      	adds	r0, #1
 80061c2:	f000 80a7 	beq.w	8006314 <_vfiprintf_r+0x1ec>
 80061c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061c8:	445a      	add	r2, fp
 80061ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80061cc:	f89a 3000 	ldrb.w	r3, [sl]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 809f 	beq.w	8006314 <_vfiprintf_r+0x1ec>
 80061d6:	2300      	movs	r3, #0
 80061d8:	f04f 32ff 	mov.w	r2, #4294967295
 80061dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061e0:	f10a 0a01 	add.w	sl, sl, #1
 80061e4:	9304      	str	r3, [sp, #16]
 80061e6:	9307      	str	r3, [sp, #28]
 80061e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80061ee:	4654      	mov	r4, sl
 80061f0:	2205      	movs	r2, #5
 80061f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f6:	4853      	ldr	r0, [pc, #332]	@ (8006344 <_vfiprintf_r+0x21c>)
 80061f8:	f7fa f80a 	bl	8000210 <memchr>
 80061fc:	9a04      	ldr	r2, [sp, #16]
 80061fe:	b9d8      	cbnz	r0, 8006238 <_vfiprintf_r+0x110>
 8006200:	06d1      	lsls	r1, r2, #27
 8006202:	bf44      	itt	mi
 8006204:	2320      	movmi	r3, #32
 8006206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800620a:	0713      	lsls	r3, r2, #28
 800620c:	bf44      	itt	mi
 800620e:	232b      	movmi	r3, #43	@ 0x2b
 8006210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006214:	f89a 3000 	ldrb.w	r3, [sl]
 8006218:	2b2a      	cmp	r3, #42	@ 0x2a
 800621a:	d015      	beq.n	8006248 <_vfiprintf_r+0x120>
 800621c:	9a07      	ldr	r2, [sp, #28]
 800621e:	4654      	mov	r4, sl
 8006220:	2000      	movs	r0, #0
 8006222:	f04f 0c0a 	mov.w	ip, #10
 8006226:	4621      	mov	r1, r4
 8006228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800622c:	3b30      	subs	r3, #48	@ 0x30
 800622e:	2b09      	cmp	r3, #9
 8006230:	d94b      	bls.n	80062ca <_vfiprintf_r+0x1a2>
 8006232:	b1b0      	cbz	r0, 8006262 <_vfiprintf_r+0x13a>
 8006234:	9207      	str	r2, [sp, #28]
 8006236:	e014      	b.n	8006262 <_vfiprintf_r+0x13a>
 8006238:	eba0 0308 	sub.w	r3, r0, r8
 800623c:	fa09 f303 	lsl.w	r3, r9, r3
 8006240:	4313      	orrs	r3, r2
 8006242:	9304      	str	r3, [sp, #16]
 8006244:	46a2      	mov	sl, r4
 8006246:	e7d2      	b.n	80061ee <_vfiprintf_r+0xc6>
 8006248:	9b03      	ldr	r3, [sp, #12]
 800624a:	1d19      	adds	r1, r3, #4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	9103      	str	r1, [sp, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	bfbb      	ittet	lt
 8006254:	425b      	neglt	r3, r3
 8006256:	f042 0202 	orrlt.w	r2, r2, #2
 800625a:	9307      	strge	r3, [sp, #28]
 800625c:	9307      	strlt	r3, [sp, #28]
 800625e:	bfb8      	it	lt
 8006260:	9204      	strlt	r2, [sp, #16]
 8006262:	7823      	ldrb	r3, [r4, #0]
 8006264:	2b2e      	cmp	r3, #46	@ 0x2e
 8006266:	d10a      	bne.n	800627e <_vfiprintf_r+0x156>
 8006268:	7863      	ldrb	r3, [r4, #1]
 800626a:	2b2a      	cmp	r3, #42	@ 0x2a
 800626c:	d132      	bne.n	80062d4 <_vfiprintf_r+0x1ac>
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	1d1a      	adds	r2, r3, #4
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	9203      	str	r2, [sp, #12]
 8006276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800627a:	3402      	adds	r4, #2
 800627c:	9305      	str	r3, [sp, #20]
 800627e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006354 <_vfiprintf_r+0x22c>
 8006282:	7821      	ldrb	r1, [r4, #0]
 8006284:	2203      	movs	r2, #3
 8006286:	4650      	mov	r0, sl
 8006288:	f7f9 ffc2 	bl	8000210 <memchr>
 800628c:	b138      	cbz	r0, 800629e <_vfiprintf_r+0x176>
 800628e:	9b04      	ldr	r3, [sp, #16]
 8006290:	eba0 000a 	sub.w	r0, r0, sl
 8006294:	2240      	movs	r2, #64	@ 0x40
 8006296:	4082      	lsls	r2, r0
 8006298:	4313      	orrs	r3, r2
 800629a:	3401      	adds	r4, #1
 800629c:	9304      	str	r3, [sp, #16]
 800629e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a2:	4829      	ldr	r0, [pc, #164]	@ (8006348 <_vfiprintf_r+0x220>)
 80062a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062a8:	2206      	movs	r2, #6
 80062aa:	f7f9 ffb1 	bl	8000210 <memchr>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d03f      	beq.n	8006332 <_vfiprintf_r+0x20a>
 80062b2:	4b26      	ldr	r3, [pc, #152]	@ (800634c <_vfiprintf_r+0x224>)
 80062b4:	bb1b      	cbnz	r3, 80062fe <_vfiprintf_r+0x1d6>
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	3307      	adds	r3, #7
 80062ba:	f023 0307 	bic.w	r3, r3, #7
 80062be:	3308      	adds	r3, #8
 80062c0:	9303      	str	r3, [sp, #12]
 80062c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c4:	443b      	add	r3, r7
 80062c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80062c8:	e76a      	b.n	80061a0 <_vfiprintf_r+0x78>
 80062ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ce:	460c      	mov	r4, r1
 80062d0:	2001      	movs	r0, #1
 80062d2:	e7a8      	b.n	8006226 <_vfiprintf_r+0xfe>
 80062d4:	2300      	movs	r3, #0
 80062d6:	3401      	adds	r4, #1
 80062d8:	9305      	str	r3, [sp, #20]
 80062da:	4619      	mov	r1, r3
 80062dc:	f04f 0c0a 	mov.w	ip, #10
 80062e0:	4620      	mov	r0, r4
 80062e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062e6:	3a30      	subs	r2, #48	@ 0x30
 80062e8:	2a09      	cmp	r2, #9
 80062ea:	d903      	bls.n	80062f4 <_vfiprintf_r+0x1cc>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0c6      	beq.n	800627e <_vfiprintf_r+0x156>
 80062f0:	9105      	str	r1, [sp, #20]
 80062f2:	e7c4      	b.n	800627e <_vfiprintf_r+0x156>
 80062f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80062f8:	4604      	mov	r4, r0
 80062fa:	2301      	movs	r3, #1
 80062fc:	e7f0      	b.n	80062e0 <_vfiprintf_r+0x1b8>
 80062fe:	ab03      	add	r3, sp, #12
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	462a      	mov	r2, r5
 8006304:	4b12      	ldr	r3, [pc, #72]	@ (8006350 <_vfiprintf_r+0x228>)
 8006306:	a904      	add	r1, sp, #16
 8006308:	4630      	mov	r0, r6
 800630a:	f3af 8000 	nop.w
 800630e:	4607      	mov	r7, r0
 8006310:	1c78      	adds	r0, r7, #1
 8006312:	d1d6      	bne.n	80062c2 <_vfiprintf_r+0x19a>
 8006314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006316:	07d9      	lsls	r1, r3, #31
 8006318:	d405      	bmi.n	8006326 <_vfiprintf_r+0x1fe>
 800631a:	89ab      	ldrh	r3, [r5, #12]
 800631c:	059a      	lsls	r2, r3, #22
 800631e:	d402      	bmi.n	8006326 <_vfiprintf_r+0x1fe>
 8006320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006322:	f7ff fddd 	bl	8005ee0 <__retarget_lock_release_recursive>
 8006326:	89ab      	ldrh	r3, [r5, #12]
 8006328:	065b      	lsls	r3, r3, #25
 800632a:	f53f af1f 	bmi.w	800616c <_vfiprintf_r+0x44>
 800632e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006330:	e71e      	b.n	8006170 <_vfiprintf_r+0x48>
 8006332:	ab03      	add	r3, sp, #12
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	462a      	mov	r2, r5
 8006338:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <_vfiprintf_r+0x228>)
 800633a:	a904      	add	r1, sp, #16
 800633c:	4630      	mov	r0, r6
 800633e:	f000 f879 	bl	8006434 <_printf_i>
 8006342:	e7e4      	b.n	800630e <_vfiprintf_r+0x1e6>
 8006344:	08006940 	.word	0x08006940
 8006348:	0800694a 	.word	0x0800694a
 800634c:	00000000 	.word	0x00000000
 8006350:	08006103 	.word	0x08006103
 8006354:	08006946 	.word	0x08006946

08006358 <_printf_common>:
 8006358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	4616      	mov	r6, r2
 800635e:	4698      	mov	r8, r3
 8006360:	688a      	ldr	r2, [r1, #8]
 8006362:	690b      	ldr	r3, [r1, #16]
 8006364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006368:	4293      	cmp	r3, r2
 800636a:	bfb8      	it	lt
 800636c:	4613      	movlt	r3, r2
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006374:	4607      	mov	r7, r0
 8006376:	460c      	mov	r4, r1
 8006378:	b10a      	cbz	r2, 800637e <_printf_common+0x26>
 800637a:	3301      	adds	r3, #1
 800637c:	6033      	str	r3, [r6, #0]
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	0699      	lsls	r1, r3, #26
 8006382:	bf42      	ittt	mi
 8006384:	6833      	ldrmi	r3, [r6, #0]
 8006386:	3302      	addmi	r3, #2
 8006388:	6033      	strmi	r3, [r6, #0]
 800638a:	6825      	ldr	r5, [r4, #0]
 800638c:	f015 0506 	ands.w	r5, r5, #6
 8006390:	d106      	bne.n	80063a0 <_printf_common+0x48>
 8006392:	f104 0a19 	add.w	sl, r4, #25
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	6832      	ldr	r2, [r6, #0]
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	42ab      	cmp	r3, r5
 800639e:	dc26      	bgt.n	80063ee <_printf_common+0x96>
 80063a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	3b00      	subs	r3, #0
 80063a8:	bf18      	it	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	0692      	lsls	r2, r2, #26
 80063ae:	d42b      	bmi.n	8006408 <_printf_common+0xb0>
 80063b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063b4:	4641      	mov	r1, r8
 80063b6:	4638      	mov	r0, r7
 80063b8:	47c8      	blx	r9
 80063ba:	3001      	adds	r0, #1
 80063bc:	d01e      	beq.n	80063fc <_printf_common+0xa4>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	6922      	ldr	r2, [r4, #16]
 80063c2:	f003 0306 	and.w	r3, r3, #6
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	bf02      	ittt	eq
 80063ca:	68e5      	ldreq	r5, [r4, #12]
 80063cc:	6833      	ldreq	r3, [r6, #0]
 80063ce:	1aed      	subeq	r5, r5, r3
 80063d0:	68a3      	ldr	r3, [r4, #8]
 80063d2:	bf0c      	ite	eq
 80063d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d8:	2500      	movne	r5, #0
 80063da:	4293      	cmp	r3, r2
 80063dc:	bfc4      	itt	gt
 80063de:	1a9b      	subgt	r3, r3, r2
 80063e0:	18ed      	addgt	r5, r5, r3
 80063e2:	2600      	movs	r6, #0
 80063e4:	341a      	adds	r4, #26
 80063e6:	42b5      	cmp	r5, r6
 80063e8:	d11a      	bne.n	8006420 <_printf_common+0xc8>
 80063ea:	2000      	movs	r0, #0
 80063ec:	e008      	b.n	8006400 <_printf_common+0xa8>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4652      	mov	r2, sl
 80063f2:	4641      	mov	r1, r8
 80063f4:	4638      	mov	r0, r7
 80063f6:	47c8      	blx	r9
 80063f8:	3001      	adds	r0, #1
 80063fa:	d103      	bne.n	8006404 <_printf_common+0xac>
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006404:	3501      	adds	r5, #1
 8006406:	e7c6      	b.n	8006396 <_printf_common+0x3e>
 8006408:	18e1      	adds	r1, r4, r3
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	2030      	movs	r0, #48	@ 0x30
 800640e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006412:	4422      	add	r2, r4
 8006414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800641c:	3302      	adds	r3, #2
 800641e:	e7c7      	b.n	80063b0 <_printf_common+0x58>
 8006420:	2301      	movs	r3, #1
 8006422:	4622      	mov	r2, r4
 8006424:	4641      	mov	r1, r8
 8006426:	4638      	mov	r0, r7
 8006428:	47c8      	blx	r9
 800642a:	3001      	adds	r0, #1
 800642c:	d0e6      	beq.n	80063fc <_printf_common+0xa4>
 800642e:	3601      	adds	r6, #1
 8006430:	e7d9      	b.n	80063e6 <_printf_common+0x8e>
	...

08006434 <_printf_i>:
 8006434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	7e0f      	ldrb	r7, [r1, #24]
 800643a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800643c:	2f78      	cmp	r7, #120	@ 0x78
 800643e:	4691      	mov	r9, r2
 8006440:	4680      	mov	r8, r0
 8006442:	460c      	mov	r4, r1
 8006444:	469a      	mov	sl, r3
 8006446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800644a:	d807      	bhi.n	800645c <_printf_i+0x28>
 800644c:	2f62      	cmp	r7, #98	@ 0x62
 800644e:	d80a      	bhi.n	8006466 <_printf_i+0x32>
 8006450:	2f00      	cmp	r7, #0
 8006452:	f000 80d2 	beq.w	80065fa <_printf_i+0x1c6>
 8006456:	2f58      	cmp	r7, #88	@ 0x58
 8006458:	f000 80b9 	beq.w	80065ce <_printf_i+0x19a>
 800645c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006464:	e03a      	b.n	80064dc <_printf_i+0xa8>
 8006466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800646a:	2b15      	cmp	r3, #21
 800646c:	d8f6      	bhi.n	800645c <_printf_i+0x28>
 800646e:	a101      	add	r1, pc, #4	@ (adr r1, 8006474 <_printf_i+0x40>)
 8006470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006474:	080064cd 	.word	0x080064cd
 8006478:	080064e1 	.word	0x080064e1
 800647c:	0800645d 	.word	0x0800645d
 8006480:	0800645d 	.word	0x0800645d
 8006484:	0800645d 	.word	0x0800645d
 8006488:	0800645d 	.word	0x0800645d
 800648c:	080064e1 	.word	0x080064e1
 8006490:	0800645d 	.word	0x0800645d
 8006494:	0800645d 	.word	0x0800645d
 8006498:	0800645d 	.word	0x0800645d
 800649c:	0800645d 	.word	0x0800645d
 80064a0:	080065e1 	.word	0x080065e1
 80064a4:	0800650b 	.word	0x0800650b
 80064a8:	0800659b 	.word	0x0800659b
 80064ac:	0800645d 	.word	0x0800645d
 80064b0:	0800645d 	.word	0x0800645d
 80064b4:	08006603 	.word	0x08006603
 80064b8:	0800645d 	.word	0x0800645d
 80064bc:	0800650b 	.word	0x0800650b
 80064c0:	0800645d 	.word	0x0800645d
 80064c4:	0800645d 	.word	0x0800645d
 80064c8:	080065a3 	.word	0x080065a3
 80064cc:	6833      	ldr	r3, [r6, #0]
 80064ce:	1d1a      	adds	r2, r3, #4
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6032      	str	r2, [r6, #0]
 80064d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064dc:	2301      	movs	r3, #1
 80064de:	e09d      	b.n	800661c <_printf_i+0x1e8>
 80064e0:	6833      	ldr	r3, [r6, #0]
 80064e2:	6820      	ldr	r0, [r4, #0]
 80064e4:	1d19      	adds	r1, r3, #4
 80064e6:	6031      	str	r1, [r6, #0]
 80064e8:	0606      	lsls	r6, r0, #24
 80064ea:	d501      	bpl.n	80064f0 <_printf_i+0xbc>
 80064ec:	681d      	ldr	r5, [r3, #0]
 80064ee:	e003      	b.n	80064f8 <_printf_i+0xc4>
 80064f0:	0645      	lsls	r5, r0, #25
 80064f2:	d5fb      	bpl.n	80064ec <_printf_i+0xb8>
 80064f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064f8:	2d00      	cmp	r5, #0
 80064fa:	da03      	bge.n	8006504 <_printf_i+0xd0>
 80064fc:	232d      	movs	r3, #45	@ 0x2d
 80064fe:	426d      	negs	r5, r5
 8006500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006504:	4859      	ldr	r0, [pc, #356]	@ (800666c <_printf_i+0x238>)
 8006506:	230a      	movs	r3, #10
 8006508:	e011      	b.n	800652e <_printf_i+0xfa>
 800650a:	6821      	ldr	r1, [r4, #0]
 800650c:	6833      	ldr	r3, [r6, #0]
 800650e:	0608      	lsls	r0, r1, #24
 8006510:	f853 5b04 	ldr.w	r5, [r3], #4
 8006514:	d402      	bmi.n	800651c <_printf_i+0xe8>
 8006516:	0649      	lsls	r1, r1, #25
 8006518:	bf48      	it	mi
 800651a:	b2ad      	uxthmi	r5, r5
 800651c:	2f6f      	cmp	r7, #111	@ 0x6f
 800651e:	4853      	ldr	r0, [pc, #332]	@ (800666c <_printf_i+0x238>)
 8006520:	6033      	str	r3, [r6, #0]
 8006522:	bf14      	ite	ne
 8006524:	230a      	movne	r3, #10
 8006526:	2308      	moveq	r3, #8
 8006528:	2100      	movs	r1, #0
 800652a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800652e:	6866      	ldr	r6, [r4, #4]
 8006530:	60a6      	str	r6, [r4, #8]
 8006532:	2e00      	cmp	r6, #0
 8006534:	bfa2      	ittt	ge
 8006536:	6821      	ldrge	r1, [r4, #0]
 8006538:	f021 0104 	bicge.w	r1, r1, #4
 800653c:	6021      	strge	r1, [r4, #0]
 800653e:	b90d      	cbnz	r5, 8006544 <_printf_i+0x110>
 8006540:	2e00      	cmp	r6, #0
 8006542:	d04b      	beq.n	80065dc <_printf_i+0x1a8>
 8006544:	4616      	mov	r6, r2
 8006546:	fbb5 f1f3 	udiv	r1, r5, r3
 800654a:	fb03 5711 	mls	r7, r3, r1, r5
 800654e:	5dc7      	ldrb	r7, [r0, r7]
 8006550:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006554:	462f      	mov	r7, r5
 8006556:	42bb      	cmp	r3, r7
 8006558:	460d      	mov	r5, r1
 800655a:	d9f4      	bls.n	8006546 <_printf_i+0x112>
 800655c:	2b08      	cmp	r3, #8
 800655e:	d10b      	bne.n	8006578 <_printf_i+0x144>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	07df      	lsls	r7, r3, #31
 8006564:	d508      	bpl.n	8006578 <_printf_i+0x144>
 8006566:	6923      	ldr	r3, [r4, #16]
 8006568:	6861      	ldr	r1, [r4, #4]
 800656a:	4299      	cmp	r1, r3
 800656c:	bfde      	ittt	le
 800656e:	2330      	movle	r3, #48	@ 0x30
 8006570:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006574:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006578:	1b92      	subs	r2, r2, r6
 800657a:	6122      	str	r2, [r4, #16]
 800657c:	f8cd a000 	str.w	sl, [sp]
 8006580:	464b      	mov	r3, r9
 8006582:	aa03      	add	r2, sp, #12
 8006584:	4621      	mov	r1, r4
 8006586:	4640      	mov	r0, r8
 8006588:	f7ff fee6 	bl	8006358 <_printf_common>
 800658c:	3001      	adds	r0, #1
 800658e:	d14a      	bne.n	8006626 <_printf_i+0x1f2>
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	b004      	add	sp, #16
 8006596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	f043 0320 	orr.w	r3, r3, #32
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	4833      	ldr	r0, [pc, #204]	@ (8006670 <_printf_i+0x23c>)
 80065a4:	2778      	movs	r7, #120	@ 0x78
 80065a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	6831      	ldr	r1, [r6, #0]
 80065ae:	061f      	lsls	r7, r3, #24
 80065b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80065b4:	d402      	bmi.n	80065bc <_printf_i+0x188>
 80065b6:	065f      	lsls	r7, r3, #25
 80065b8:	bf48      	it	mi
 80065ba:	b2ad      	uxthmi	r5, r5
 80065bc:	6031      	str	r1, [r6, #0]
 80065be:	07d9      	lsls	r1, r3, #31
 80065c0:	bf44      	itt	mi
 80065c2:	f043 0320 	orrmi.w	r3, r3, #32
 80065c6:	6023      	strmi	r3, [r4, #0]
 80065c8:	b11d      	cbz	r5, 80065d2 <_printf_i+0x19e>
 80065ca:	2310      	movs	r3, #16
 80065cc:	e7ac      	b.n	8006528 <_printf_i+0xf4>
 80065ce:	4827      	ldr	r0, [pc, #156]	@ (800666c <_printf_i+0x238>)
 80065d0:	e7e9      	b.n	80065a6 <_printf_i+0x172>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f023 0320 	bic.w	r3, r3, #32
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	e7f6      	b.n	80065ca <_printf_i+0x196>
 80065dc:	4616      	mov	r6, r2
 80065de:	e7bd      	b.n	800655c <_printf_i+0x128>
 80065e0:	6833      	ldr	r3, [r6, #0]
 80065e2:	6825      	ldr	r5, [r4, #0]
 80065e4:	6961      	ldr	r1, [r4, #20]
 80065e6:	1d18      	adds	r0, r3, #4
 80065e8:	6030      	str	r0, [r6, #0]
 80065ea:	062e      	lsls	r6, r5, #24
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	d501      	bpl.n	80065f4 <_printf_i+0x1c0>
 80065f0:	6019      	str	r1, [r3, #0]
 80065f2:	e002      	b.n	80065fa <_printf_i+0x1c6>
 80065f4:	0668      	lsls	r0, r5, #25
 80065f6:	d5fb      	bpl.n	80065f0 <_printf_i+0x1bc>
 80065f8:	8019      	strh	r1, [r3, #0]
 80065fa:	2300      	movs	r3, #0
 80065fc:	6123      	str	r3, [r4, #16]
 80065fe:	4616      	mov	r6, r2
 8006600:	e7bc      	b.n	800657c <_printf_i+0x148>
 8006602:	6833      	ldr	r3, [r6, #0]
 8006604:	1d1a      	adds	r2, r3, #4
 8006606:	6032      	str	r2, [r6, #0]
 8006608:	681e      	ldr	r6, [r3, #0]
 800660a:	6862      	ldr	r2, [r4, #4]
 800660c:	2100      	movs	r1, #0
 800660e:	4630      	mov	r0, r6
 8006610:	f7f9 fdfe 	bl	8000210 <memchr>
 8006614:	b108      	cbz	r0, 800661a <_printf_i+0x1e6>
 8006616:	1b80      	subs	r0, r0, r6
 8006618:	6060      	str	r0, [r4, #4]
 800661a:	6863      	ldr	r3, [r4, #4]
 800661c:	6123      	str	r3, [r4, #16]
 800661e:	2300      	movs	r3, #0
 8006620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006624:	e7aa      	b.n	800657c <_printf_i+0x148>
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	4632      	mov	r2, r6
 800662a:	4649      	mov	r1, r9
 800662c:	4640      	mov	r0, r8
 800662e:	47d0      	blx	sl
 8006630:	3001      	adds	r0, #1
 8006632:	d0ad      	beq.n	8006590 <_printf_i+0x15c>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	079b      	lsls	r3, r3, #30
 8006638:	d413      	bmi.n	8006662 <_printf_i+0x22e>
 800663a:	68e0      	ldr	r0, [r4, #12]
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	4298      	cmp	r0, r3
 8006640:	bfb8      	it	lt
 8006642:	4618      	movlt	r0, r3
 8006644:	e7a6      	b.n	8006594 <_printf_i+0x160>
 8006646:	2301      	movs	r3, #1
 8006648:	4632      	mov	r2, r6
 800664a:	4649      	mov	r1, r9
 800664c:	4640      	mov	r0, r8
 800664e:	47d0      	blx	sl
 8006650:	3001      	adds	r0, #1
 8006652:	d09d      	beq.n	8006590 <_printf_i+0x15c>
 8006654:	3501      	adds	r5, #1
 8006656:	68e3      	ldr	r3, [r4, #12]
 8006658:	9903      	ldr	r1, [sp, #12]
 800665a:	1a5b      	subs	r3, r3, r1
 800665c:	42ab      	cmp	r3, r5
 800665e:	dcf2      	bgt.n	8006646 <_printf_i+0x212>
 8006660:	e7eb      	b.n	800663a <_printf_i+0x206>
 8006662:	2500      	movs	r5, #0
 8006664:	f104 0619 	add.w	r6, r4, #25
 8006668:	e7f5      	b.n	8006656 <_printf_i+0x222>
 800666a:	bf00      	nop
 800666c:	08006951 	.word	0x08006951
 8006670:	08006962 	.word	0x08006962

08006674 <__sflush_r>:
 8006674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667c:	0716      	lsls	r6, r2, #28
 800667e:	4605      	mov	r5, r0
 8006680:	460c      	mov	r4, r1
 8006682:	d454      	bmi.n	800672e <__sflush_r+0xba>
 8006684:	684b      	ldr	r3, [r1, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	dc02      	bgt.n	8006690 <__sflush_r+0x1c>
 800668a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	dd48      	ble.n	8006722 <__sflush_r+0xae>
 8006690:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006692:	2e00      	cmp	r6, #0
 8006694:	d045      	beq.n	8006722 <__sflush_r+0xae>
 8006696:	2300      	movs	r3, #0
 8006698:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800669c:	682f      	ldr	r7, [r5, #0]
 800669e:	6a21      	ldr	r1, [r4, #32]
 80066a0:	602b      	str	r3, [r5, #0]
 80066a2:	d030      	beq.n	8006706 <__sflush_r+0x92>
 80066a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	0759      	lsls	r1, r3, #29
 80066aa:	d505      	bpl.n	80066b8 <__sflush_r+0x44>
 80066ac:	6863      	ldr	r3, [r4, #4]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066b2:	b10b      	cbz	r3, 80066b8 <__sflush_r+0x44>
 80066b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	2300      	movs	r3, #0
 80066ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066bc:	6a21      	ldr	r1, [r4, #32]
 80066be:	4628      	mov	r0, r5
 80066c0:	47b0      	blx	r6
 80066c2:	1c43      	adds	r3, r0, #1
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	d106      	bne.n	80066d6 <__sflush_r+0x62>
 80066c8:	6829      	ldr	r1, [r5, #0]
 80066ca:	291d      	cmp	r1, #29
 80066cc:	d82b      	bhi.n	8006726 <__sflush_r+0xb2>
 80066ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006778 <__sflush_r+0x104>)
 80066d0:	410a      	asrs	r2, r1
 80066d2:	07d6      	lsls	r6, r2, #31
 80066d4:	d427      	bmi.n	8006726 <__sflush_r+0xb2>
 80066d6:	2200      	movs	r2, #0
 80066d8:	6062      	str	r2, [r4, #4]
 80066da:	04d9      	lsls	r1, r3, #19
 80066dc:	6922      	ldr	r2, [r4, #16]
 80066de:	6022      	str	r2, [r4, #0]
 80066e0:	d504      	bpl.n	80066ec <__sflush_r+0x78>
 80066e2:	1c42      	adds	r2, r0, #1
 80066e4:	d101      	bne.n	80066ea <__sflush_r+0x76>
 80066e6:	682b      	ldr	r3, [r5, #0]
 80066e8:	b903      	cbnz	r3, 80066ec <__sflush_r+0x78>
 80066ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80066ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066ee:	602f      	str	r7, [r5, #0]
 80066f0:	b1b9      	cbz	r1, 8006722 <__sflush_r+0xae>
 80066f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066f6:	4299      	cmp	r1, r3
 80066f8:	d002      	beq.n	8006700 <__sflush_r+0x8c>
 80066fa:	4628      	mov	r0, r5
 80066fc:	f7ff fbf2 	bl	8005ee4 <_free_r>
 8006700:	2300      	movs	r3, #0
 8006702:	6363      	str	r3, [r4, #52]	@ 0x34
 8006704:	e00d      	b.n	8006722 <__sflush_r+0xae>
 8006706:	2301      	movs	r3, #1
 8006708:	4628      	mov	r0, r5
 800670a:	47b0      	blx	r6
 800670c:	4602      	mov	r2, r0
 800670e:	1c50      	adds	r0, r2, #1
 8006710:	d1c9      	bne.n	80066a6 <__sflush_r+0x32>
 8006712:	682b      	ldr	r3, [r5, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0c6      	beq.n	80066a6 <__sflush_r+0x32>
 8006718:	2b1d      	cmp	r3, #29
 800671a:	d001      	beq.n	8006720 <__sflush_r+0xac>
 800671c:	2b16      	cmp	r3, #22
 800671e:	d11e      	bne.n	800675e <__sflush_r+0xea>
 8006720:	602f      	str	r7, [r5, #0]
 8006722:	2000      	movs	r0, #0
 8006724:	e022      	b.n	800676c <__sflush_r+0xf8>
 8006726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800672a:	b21b      	sxth	r3, r3
 800672c:	e01b      	b.n	8006766 <__sflush_r+0xf2>
 800672e:	690f      	ldr	r7, [r1, #16]
 8006730:	2f00      	cmp	r7, #0
 8006732:	d0f6      	beq.n	8006722 <__sflush_r+0xae>
 8006734:	0793      	lsls	r3, r2, #30
 8006736:	680e      	ldr	r6, [r1, #0]
 8006738:	bf08      	it	eq
 800673a:	694b      	ldreq	r3, [r1, #20]
 800673c:	600f      	str	r7, [r1, #0]
 800673e:	bf18      	it	ne
 8006740:	2300      	movne	r3, #0
 8006742:	eba6 0807 	sub.w	r8, r6, r7
 8006746:	608b      	str	r3, [r1, #8]
 8006748:	f1b8 0f00 	cmp.w	r8, #0
 800674c:	dde9      	ble.n	8006722 <__sflush_r+0xae>
 800674e:	6a21      	ldr	r1, [r4, #32]
 8006750:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006752:	4643      	mov	r3, r8
 8006754:	463a      	mov	r2, r7
 8006756:	4628      	mov	r0, r5
 8006758:	47b0      	blx	r6
 800675a:	2800      	cmp	r0, #0
 800675c:	dc08      	bgt.n	8006770 <__sflush_r+0xfc>
 800675e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006770:	4407      	add	r7, r0
 8006772:	eba8 0800 	sub.w	r8, r8, r0
 8006776:	e7e7      	b.n	8006748 <__sflush_r+0xd4>
 8006778:	dfbffffe 	.word	0xdfbffffe

0800677c <_fflush_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	690b      	ldr	r3, [r1, #16]
 8006780:	4605      	mov	r5, r0
 8006782:	460c      	mov	r4, r1
 8006784:	b913      	cbnz	r3, 800678c <_fflush_r+0x10>
 8006786:	2500      	movs	r5, #0
 8006788:	4628      	mov	r0, r5
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	b118      	cbz	r0, 8006796 <_fflush_r+0x1a>
 800678e:	6a03      	ldr	r3, [r0, #32]
 8006790:	b90b      	cbnz	r3, 8006796 <_fflush_r+0x1a>
 8006792:	f7ff f9ad 	bl	8005af0 <__sinit>
 8006796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f3      	beq.n	8006786 <_fflush_r+0xa>
 800679e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067a0:	07d0      	lsls	r0, r2, #31
 80067a2:	d404      	bmi.n	80067ae <_fflush_r+0x32>
 80067a4:	0599      	lsls	r1, r3, #22
 80067a6:	d402      	bmi.n	80067ae <_fflush_r+0x32>
 80067a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067aa:	f7ff fb98 	bl	8005ede <__retarget_lock_acquire_recursive>
 80067ae:	4628      	mov	r0, r5
 80067b0:	4621      	mov	r1, r4
 80067b2:	f7ff ff5f 	bl	8006674 <__sflush_r>
 80067b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067b8:	07da      	lsls	r2, r3, #31
 80067ba:	4605      	mov	r5, r0
 80067bc:	d4e4      	bmi.n	8006788 <_fflush_r+0xc>
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	059b      	lsls	r3, r3, #22
 80067c2:	d4e1      	bmi.n	8006788 <_fflush_r+0xc>
 80067c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067c6:	f7ff fb8b 	bl	8005ee0 <__retarget_lock_release_recursive>
 80067ca:	e7dd      	b.n	8006788 <_fflush_r+0xc>

080067cc <__swhatbuf_r>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	460c      	mov	r4, r1
 80067d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d4:	2900      	cmp	r1, #0
 80067d6:	b096      	sub	sp, #88	@ 0x58
 80067d8:	4615      	mov	r5, r2
 80067da:	461e      	mov	r6, r3
 80067dc:	da0d      	bge.n	80067fa <__swhatbuf_r+0x2e>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067e4:	f04f 0100 	mov.w	r1, #0
 80067e8:	bf14      	ite	ne
 80067ea:	2340      	movne	r3, #64	@ 0x40
 80067ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067f0:	2000      	movs	r0, #0
 80067f2:	6031      	str	r1, [r6, #0]
 80067f4:	602b      	str	r3, [r5, #0]
 80067f6:	b016      	add	sp, #88	@ 0x58
 80067f8:	bd70      	pop	{r4, r5, r6, pc}
 80067fa:	466a      	mov	r2, sp
 80067fc:	f000 f848 	bl	8006890 <_fstat_r>
 8006800:	2800      	cmp	r0, #0
 8006802:	dbec      	blt.n	80067de <__swhatbuf_r+0x12>
 8006804:	9901      	ldr	r1, [sp, #4]
 8006806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800680a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800680e:	4259      	negs	r1, r3
 8006810:	4159      	adcs	r1, r3
 8006812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006816:	e7eb      	b.n	80067f0 <__swhatbuf_r+0x24>

08006818 <__smakebuf_r>:
 8006818:	898b      	ldrh	r3, [r1, #12]
 800681a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800681c:	079d      	lsls	r5, r3, #30
 800681e:	4606      	mov	r6, r0
 8006820:	460c      	mov	r4, r1
 8006822:	d507      	bpl.n	8006834 <__smakebuf_r+0x1c>
 8006824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	6123      	str	r3, [r4, #16]
 800682c:	2301      	movs	r3, #1
 800682e:	6163      	str	r3, [r4, #20]
 8006830:	b003      	add	sp, #12
 8006832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006834:	ab01      	add	r3, sp, #4
 8006836:	466a      	mov	r2, sp
 8006838:	f7ff ffc8 	bl	80067cc <__swhatbuf_r>
 800683c:	9f00      	ldr	r7, [sp, #0]
 800683e:	4605      	mov	r5, r0
 8006840:	4639      	mov	r1, r7
 8006842:	4630      	mov	r0, r6
 8006844:	f7ff fbba 	bl	8005fbc <_malloc_r>
 8006848:	b948      	cbnz	r0, 800685e <__smakebuf_r+0x46>
 800684a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800684e:	059a      	lsls	r2, r3, #22
 8006850:	d4ee      	bmi.n	8006830 <__smakebuf_r+0x18>
 8006852:	f023 0303 	bic.w	r3, r3, #3
 8006856:	f043 0302 	orr.w	r3, r3, #2
 800685a:	81a3      	strh	r3, [r4, #12]
 800685c:	e7e2      	b.n	8006824 <__smakebuf_r+0xc>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	6020      	str	r0, [r4, #0]
 8006862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006866:	81a3      	strh	r3, [r4, #12]
 8006868:	9b01      	ldr	r3, [sp, #4]
 800686a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800686e:	b15b      	cbz	r3, 8006888 <__smakebuf_r+0x70>
 8006870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006874:	4630      	mov	r0, r6
 8006876:	f000 f81d 	bl	80068b4 <_isatty_r>
 800687a:	b128      	cbz	r0, 8006888 <__smakebuf_r+0x70>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f023 0303 	bic.w	r3, r3, #3
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	431d      	orrs	r5, r3
 800688c:	81a5      	strh	r5, [r4, #12]
 800688e:	e7cf      	b.n	8006830 <__smakebuf_r+0x18>

08006890 <_fstat_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4d07      	ldr	r5, [pc, #28]	@ (80068b0 <_fstat_r+0x20>)
 8006894:	2300      	movs	r3, #0
 8006896:	4604      	mov	r4, r0
 8006898:	4608      	mov	r0, r1
 800689a:	4611      	mov	r1, r2
 800689c:	602b      	str	r3, [r5, #0]
 800689e:	f7fb f880 	bl	80019a2 <_fstat>
 80068a2:	1c43      	adds	r3, r0, #1
 80068a4:	d102      	bne.n	80068ac <_fstat_r+0x1c>
 80068a6:	682b      	ldr	r3, [r5, #0]
 80068a8:	b103      	cbz	r3, 80068ac <_fstat_r+0x1c>
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	bd38      	pop	{r3, r4, r5, pc}
 80068ae:	bf00      	nop
 80068b0:	2000046c 	.word	0x2000046c

080068b4 <_isatty_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d06      	ldr	r5, [pc, #24]	@ (80068d0 <_isatty_r+0x1c>)
 80068b8:	2300      	movs	r3, #0
 80068ba:	4604      	mov	r4, r0
 80068bc:	4608      	mov	r0, r1
 80068be:	602b      	str	r3, [r5, #0]
 80068c0:	f7fb f87f 	bl	80019c2 <_isatty>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d102      	bne.n	80068ce <_isatty_r+0x1a>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	b103      	cbz	r3, 80068ce <_isatty_r+0x1a>
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	bd38      	pop	{r3, r4, r5, pc}
 80068d0:	2000046c 	.word	0x2000046c

080068d4 <_sbrk_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4d06      	ldr	r5, [pc, #24]	@ (80068f0 <_sbrk_r+0x1c>)
 80068d8:	2300      	movs	r3, #0
 80068da:	4604      	mov	r4, r0
 80068dc:	4608      	mov	r0, r1
 80068de:	602b      	str	r3, [r5, #0]
 80068e0:	f7fb f888 	bl	80019f4 <_sbrk>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d102      	bne.n	80068ee <_sbrk_r+0x1a>
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	b103      	cbz	r3, 80068ee <_sbrk_r+0x1a>
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	bd38      	pop	{r3, r4, r5, pc}
 80068f0:	2000046c 	.word	0x2000046c

080068f4 <_init>:
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	bf00      	nop
 80068f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fa:	bc08      	pop	{r3}
 80068fc:	469e      	mov	lr, r3
 80068fe:	4770      	bx	lr

08006900 <_fini>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	bf00      	nop
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr
