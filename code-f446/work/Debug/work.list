
work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007188  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007358  08007358  00008358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f0  080073f0  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  080073f0  080073f0  000083f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073f8  080073f8  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f8  080073f8  000083f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073fc  080073fc  000083fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007400  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000070  08007470  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08007470  000094a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001276f  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d99  00000000  00000000  0001b80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  0001e5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c73  00000000  00000000  0001f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ea3  00000000  00000000  00020223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014400  00000000  00000000  000440c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5719  00000000  00000000  000584c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012dbdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aec  00000000  00000000  0012dc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00132710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007340 	.word	0x08007340

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007340 	.word	0x08007340

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <GetElapsedTick>:

extern UART_HandleTypeDef huart2;


uint32_t GetElapsedTick(uint32_t start)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 8000d84:	f001 f95e 	bl	8002044 <HAL_GetTick>
 8000d88:	60f8      	str	r0, [r7, #12]
	if (now >= start)
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d303      	bcc.n	8000d9a <GetElapsedTick+0x1e>
		return now - start;
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	e003      	b.n	8000da2 <GetElapsedTick+0x26>
	else
		return 0xffffffff - start + now;
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	3b01      	subs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <__io_putchar>:


// printf()함수를 실행했을 때 UART2로 출력한다.
// printf() 출력내용에 개행문자 \n이 있어야 UART로 출력된다.
int __io_putchar(int ch)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8000db4:	1d39      	adds	r1, r7, #4
 8000db6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <__io_putchar+0x20>)
 8000dbe:	f004 fb2b 	bl	8005418 <HAL_UART_Transmit>
	return ch;
 8000dc2:	687b      	ldr	r3, [r7, #4]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200001e8 	.word	0x200001e8

08000dd0 <HAL_CAN_RxFifo0MsgPendingCallback>:

#include "can1.h"


// 수신된 CAN 메시지 처리
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	@ 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	f107 0210 	add.w	r2, r7, #16
 8000de0:	2100      	movs	r1, #0
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f001 fa59 	bl	800229a <HAL_CAN_GetRxMessage>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d11a      	bne.n	8000e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
        printf("Received ID: 0x%lX, Data: ", RxHeader.StdId);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4619      	mov	r1, r3
 8000df2:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000df4:	f005 fbd8 	bl	80065a8 <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++) {
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dfc:	e00b      	b.n	8000e16 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
            printf("%02X ", RxData[i]);
 8000dfe:	f107 0208 	add.w	r2, r7, #8
 8000e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e04:	4413      	add	r3, r2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000e0c:	f005 fbcc 	bl	80065a8 <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++) {
 8000e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e12:	3301      	adds	r3, #1
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e16:	6a3a      	ldr	r2, [r7, #32]
 8000e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d8ef      	bhi.n	8000dfe <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
        }
        printf("\r\n");
 8000e1e:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000e20:	f005 fc2a 	bl	8006678 <puts>
    }
}
 8000e24:	bf00      	nop
 8000e26:	3730      	adds	r7, #48	@ 0x30
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	08007358 	.word	0x08007358
 8000e30:	08007374 	.word	0x08007374
 8000e34:	0800737c 	.word	0x0800737c

08000e38 <Trigger_HCSR04>:

#include "hc-sr04.h"
#include "basic.h"

void Trigger_HCSR04()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e42:	4807      	ldr	r0, [pc, #28]	@ (8000e60 <Trigger_HCSR04+0x28>)
 8000e44:	f002 f8ca 	bl	8002fdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f001 f907 	bl	800205c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <Trigger_HCSR04+0x28>)
 8000e56:	f002 f8c1 	bl	8002fdc <HAL_GPIO_WritePin>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_TIM_IC_CaptureCallback>:
uint32_t rising_time;
uint32_t falling_time;

// TIM1 CC 인터럽트 핸들러
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a20      	ldr	r2, [pc, #128]	@ (8000ef4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d139      	bne.n	8000eea <HAL_TIM_IC_CaptureCallback+0x86>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7f1b      	ldrb	r3, [r3, #28]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d135      	bne.n	8000eea <HAL_TIM_IC_CaptureCallback+0x86>
	{
		if ((TIM1->CCER & TIM_CCER_CC1P) == 0)	// Rising Edge 감지
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d117      	bne.n	8000eba <HAL_TIM_IC_CaptureCallback+0x56>
		{
			rising_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f003 fd3b 	bl	8004908 <HAL_TIM_ReadCapturedValue>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a18      	ldr	r2, [pc, #96]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000e96:	6013      	str	r3, [r2, #0]
			// 다음에 Falling Edge 감지
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6a1a      	ldr	r2, [r3, #32]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 020a 	bic.w	r2, r2, #10
 8000ea6:	621a      	str	r2, [r3, #32]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6a1a      	ldr	r2, [r3, #32]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 0202 	orr.w	r2, r2, #2
 8000eb6:	621a      	str	r2, [r3, #32]
			// 다음에 Rising Edge 감지
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			is_capture_done = 1;
		}
	}
}
 8000eb8:	e017      	b.n	8000eea <HAL_TIM_IC_CaptureCallback+0x86>
			falling_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f003 fd23 	bl	8004908 <HAL_TIM_ReadCapturedValue>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ec6:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a1a      	ldr	r2, [r3, #32]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 020a 	bic.w	r2, r2, #10
 8000ed6:	621a      	str	r2, [r3, #32]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a12      	ldr	r2, [r2, #32]
 8000ee2:	621a      	str	r2, [r3, #32]
			is_capture_done = 1;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	20000090 	.word	0x20000090
 8000efc:	20000094 	.word	0x20000094
 8000f00:	2000008c 	.word	0x2000008c
 8000f04:	00000000 	.word	0x00000000

08000f08 <Calculate_Distance>:

// 거리 계산
uint32_t Calculate_Distance()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
	uint32_t pulse_width;

	if (falling_time > rising_time)
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <Calculate_Distance+0x78>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <Calculate_Distance+0x7c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d906      	bls.n	8000f28 <Calculate_Distance+0x20>
		pulse_width = falling_time - rising_time;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <Calculate_Distance+0x78>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <Calculate_Distance+0x7c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	e008      	b.n	8000f3a <Calculate_Distance+0x32>
	else
		pulse_width = (0xffff - falling_time) + rising_time;
 8000f28:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <Calculate_Distance+0x7c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <Calculate_Distance+0x78>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f36:	33ff      	adds	r3, #255	@ 0xff
 8000f38:	607b      	str	r3, [r7, #4]

	return (pulse_width * 0.0343) / 2;	// cm단위
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff fafa 	bl	8000534 <__aeabi_ui2d>
 8000f40:	a30d      	add	r3, pc, #52	@ (adr r3, 8000f78 <Calculate_Distance+0x70>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fb6f 	bl	8000628 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f5a:	f7ff fc8f 	bl	800087c <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f7ff fd71 	bl	8000a4c <__aeabi_d2uiz>
 8000f6a:	4603      	mov	r3, r0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	f3af 8000 	nop.w
 8000f78:	04816f00 	.word	0x04816f00
 8000f7c:	3fa18fc5 	.word	0x3fa18fc5
 8000f80:	20000094 	.word	0x20000094
 8000f84:	20000090 	.word	0x20000090

08000f88 <RunSonicSensor>:

uint32_t tm_sonic;
uint32_t sonic_distance;

void RunSonicSensor()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	if (GetElapsedTick(tm_sonic) >= 200)
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <RunSonicSensor+0x4c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fef3 	bl	8000d7c <GetElapsedTick>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f9a:	d918      	bls.n	8000fce <RunSonicSensor+0x46>
	{
		tm_sonic = HAL_GetTick();
 8000f9c:	f001 f852 	bl	8002044 <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd4 <RunSonicSensor+0x4c>)
 8000fa4:	6013      	str	r3, [r2, #0]

		Trigger_HCSR04();
 8000fa6:	f7ff ff47 	bl	8000e38 <Trigger_HCSR04>

		if (is_capture_done)
 8000faa:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <RunSonicSensor+0x50>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00d      	beq.n	8000fce <RunSonicSensor+0x46>
		{
			sonic_distance = Calculate_Distance();
 8000fb2:	f7ff ffa9 	bl	8000f08 <Calculate_Distance>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <RunSonicSensor+0x54>)
 8000fba:	6013      	str	r3, [r2, #0]
			printf("Distance: %lu cm\r\n", sonic_distance);
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <RunSonicSensor+0x54>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4807      	ldr	r0, [pc, #28]	@ (8000fe0 <RunSonicSensor+0x58>)
 8000fc4:	f005 faf0 	bl	80065a8 <iprintf>
			is_capture_done = 0;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <RunSonicSensor+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000098 	.word	0x20000098
 8000fd8:	2000008c 	.word	0x2000008c
 8000fdc:	2000009c 	.word	0x2000009c
 8000fe0:	08007388 	.word	0x08007388

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 ffc6 	bl	8001f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f814 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 fa82 	bl	80014f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff4:	f000 fa56 	bl	80014a4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ff8:	f000 f98e 	bl	8001318 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000ffc:	f000 f916 	bl	800122c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001000:	f000 f9d8 	bl	80013b4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001004:	f000 f89e 	bl	8001144 <MX_TIM1_Init>
  MX_CAN1_Init();
 8001008:	f000 f866 	bl	80010d8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  InitWork();
 800100c:	f000 fe14 	bl	8001c38 <InitWork>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DoWork();
 8001010:	f000 fe3c 	bl	8001c8c <DoWork>
 8001014:	e7fc      	b.n	8001010 <main+0x2c>
	...

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	@ 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2234      	movs	r2, #52	@ 0x34
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f005 fc06 	bl	8006838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <SystemClock_Config+0xb8>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	4a22      	ldr	r2, [pc, #136]	@ (80010d0 <SystemClock_Config+0xb8>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	@ 0x40
 800104c:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <SystemClock_Config+0xb8>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001058:	2300      	movs	r3, #0
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <SystemClock_Config+0xbc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001064:	4a1b      	ldr	r2, [pc, #108]	@ (80010d4 <SystemClock_Config+0xbc>)
 8001066:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <SystemClock_Config+0xbc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001078:	2302      	movs	r3, #2
 800107a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107c:	2301      	movs	r3, #1
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001080:	2310      	movs	r3, #16
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fb23 	bl	80036d8 <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001098:	f000 fab2 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 ffc4 	bl	8003044 <HAL_RCC_ClockConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010c2:	f000 fa9d 	bl	8001600 <Error_Handler>
  }
}
 80010c6:	bf00      	nop
 80010c8:	3750      	adds	r7, #80	@ 0x50
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40007000 	.word	0x40007000

080010d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_CAN1_Init+0x64>)
 80010de:	4a18      	ldr	r2, [pc, #96]	@ (8001140 <MX_CAN1_Init+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_CAN1_Init+0x64>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_CAN1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_CAN1_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_CAN1_Init+0x64>)
 80010f6:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80010fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_CAN1_Init+0x64>)
 80010fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001102:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <MX_CAN1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_CAN1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <MX_CAN1_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_CAN1_Init+0x64>)
 8001118:	2201      	movs	r2, #1
 800111a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <MX_CAN1_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_CAN1_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_CAN1_Init+0x64>)
 800112a:	f000 ffbb 	bl	80020a4 <HAL_CAN_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001134:	f000 fa64 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* USER CODE END CAN1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000a0 	.word	0x200000a0
 8001140:	40006400 	.word	0x40006400

08001144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800116e:	4b2d      	ldr	r3, [pc, #180]	@ (8001224 <MX_TIM1_Init+0xe0>)
 8001170:	4a2d      	ldr	r2, [pc, #180]	@ (8001228 <MX_TIM1_Init+0xe4>)
 8001172:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001174:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <MX_TIM1_Init+0xe0>)
 8001176:	220f      	movs	r2, #15
 8001178:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <MX_TIM1_Init+0xe0>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001180:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <MX_TIM1_Init+0xe0>)
 8001182:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001186:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <MX_TIM1_Init+0xe0>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118e:	4b25      	ldr	r3, [pc, #148]	@ (8001224 <MX_TIM1_Init+0xe0>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <MX_TIM1_Init+0xe0>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800119a:	4822      	ldr	r0, [pc, #136]	@ (8001224 <MX_TIM1_Init+0xe0>)
 800119c:	f002 fd3a 	bl	8003c14 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80011a6:	f000 fa2b 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	4619      	mov	r1, r3
 80011b6:	481b      	ldr	r0, [pc, #108]	@ (8001224 <MX_TIM1_Init+0xe0>)
 80011b8:	f003 fade 	bl	8004778 <HAL_TIM_ConfigClockSource>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011c2:	f000 fa1d 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011c6:	4817      	ldr	r0, [pc, #92]	@ (8001224 <MX_TIM1_Init+0xe0>)
 80011c8:	f002 ff06 	bl	8003fd8 <HAL_TIM_IC_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011d2:	f000 fa15 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	480f      	ldr	r0, [pc, #60]	@ (8001224 <MX_TIM1_Init+0xe0>)
 80011e6:	f004 f837 	bl	8005258 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80011f0:	f000 fa06 	bl	8001600 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80011f4:	230a      	movs	r3, #10
 80011f6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011f8:	2301      	movs	r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	@ (8001224 <MX_TIM1_Init+0xe0>)
 800120c:	f003 f956 	bl	80044bc <HAL_TIM_IC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001216:	f000 f9f3 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200000c8 	.word	0x200000c8
 8001228:	40010000 	.word	0x40010000

0800122c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	@ 0x38
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800125c:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <MX_TIM2_Init+0xe8>)
 800125e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001262:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8001264:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <MX_TIM2_Init+0xe8>)
 8001266:	f240 623f 	movw	r2, #1599	@ 0x63f
 800126a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <MX_TIM2_Init+0xe8>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001272:	4b28      	ldr	r3, [pc, #160]	@ (8001314 <MX_TIM2_Init+0xe8>)
 8001274:	2263      	movs	r2, #99	@ 0x63
 8001276:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <MX_TIM2_Init+0xe8>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b25      	ldr	r3, [pc, #148]	@ (8001314 <MX_TIM2_Init+0xe8>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001284:	4823      	ldr	r0, [pc, #140]	@ (8001314 <MX_TIM2_Init+0xe8>)
 8001286:	f002 fcc5 	bl	8003c14 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001290:	f000 f9b6 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800129a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800129e:	4619      	mov	r1, r3
 80012a0:	481c      	ldr	r0, [pc, #112]	@ (8001314 <MX_TIM2_Init+0xe8>)
 80012a2:	f003 fa69 	bl	8004778 <HAL_TIM_ConfigClockSource>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012ac:	f000 f9a8 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012b0:	4818      	ldr	r0, [pc, #96]	@ (8001314 <MX_TIM2_Init+0xe8>)
 80012b2:	f002 fd6f 	bl	8003d94 <HAL_TIM_PWM_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80012bc:	f000 f9a0 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	4619      	mov	r1, r3
 80012ce:	4811      	ldr	r0, [pc, #68]	@ (8001314 <MX_TIM2_Init+0xe8>)
 80012d0:	f003 ffc2 	bl	8005258 <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80012da:	f000 f991 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012de:	2360      	movs	r3, #96	@ 0x60
 80012e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 80012e2:	2331      	movs	r3, #49	@ 0x31
 80012e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4807      	ldr	r0, [pc, #28]	@ (8001314 <MX_TIM2_Init+0xe8>)
 80012f6:	f003 f97d 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001300:	f000 f97e 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <MX_TIM2_Init+0xe8>)
 8001306:	f000 fad9 	bl	80018bc <HAL_TIM_MspPostInit>

}
 800130a:	bf00      	nop
 800130c:	3738      	adds	r7, #56	@ 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000110 	.word	0x20000110

08001318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001334:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <MX_TIM3_Init+0x94>)
 8001336:	4a1e      	ldr	r2, [pc, #120]	@ (80013b0 <MX_TIM3_Init+0x98>)
 8001338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <MX_TIM3_Init+0x94>)
 800133c:	f240 623f 	movw	r2, #1599	@ 0x63f
 8001340:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <MX_TIM3_Init+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <MX_TIM3_Init+0x94>)
 800134a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800134e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <MX_TIM3_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <MX_TIM3_Init+0x94>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800135c:	4813      	ldr	r0, [pc, #76]	@ (80013ac <MX_TIM3_Init+0x94>)
 800135e:	f002 fc59 	bl	8003c14 <HAL_TIM_Base_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001368:	f000 f94a 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001370:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	4619      	mov	r1, r3
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <MX_TIM3_Init+0x94>)
 800137a:	f003 f9fd 	bl	8004778 <HAL_TIM_ConfigClockSource>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001384:	f000 f93c 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_TIM3_Init+0x94>)
 8001396:	f003 ff5f 	bl	8005258 <HAL_TIMEx_MasterConfigSynchronization>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013a0:	f000 f92e 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000158 	.word	0x20000158
 80013b0:	40000400 	.word	0x40000400

080013b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	@ 0x38
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	615a      	str	r2, [r3, #20]
 80013e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013e4:	4b2d      	ldr	r3, [pc, #180]	@ (800149c <MX_TIM4_Init+0xe8>)
 80013e6:	4a2e      	ldr	r2, [pc, #184]	@ (80014a0 <MX_TIM4_Init+0xec>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80013ea:	4b2c      	ldr	r3, [pc, #176]	@ (800149c <MX_TIM4_Init+0xe8>)
 80013ec:	220f      	movs	r2, #15
 80013ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <MX_TIM4_Init+0xe8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80013f6:	4b29      	ldr	r3, [pc, #164]	@ (800149c <MX_TIM4_Init+0xe8>)
 80013f8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80013fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b27      	ldr	r3, [pc, #156]	@ (800149c <MX_TIM4_Init+0xe8>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b25      	ldr	r3, [pc, #148]	@ (800149c <MX_TIM4_Init+0xe8>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800140a:	4824      	ldr	r0, [pc, #144]	@ (800149c <MX_TIM4_Init+0xe8>)
 800140c:	f002 fc02 	bl	8003c14 <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001416:	f000 f8f3 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001420:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001424:	4619      	mov	r1, r3
 8001426:	481d      	ldr	r0, [pc, #116]	@ (800149c <MX_TIM4_Init+0xe8>)
 8001428:	f003 f9a6 	bl	8004778 <HAL_TIM_ConfigClockSource>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001432:	f000 f8e5 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001436:	4819      	ldr	r0, [pc, #100]	@ (800149c <MX_TIM4_Init+0xe8>)
 8001438:	f002 fcac 	bl	8003d94 <HAL_TIM_PWM_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001442:	f000 f8dd 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	4619      	mov	r1, r3
 8001454:	4811      	ldr	r0, [pc, #68]	@ (800149c <MX_TIM4_Init+0xe8>)
 8001456:	f003 feff 	bl	8005258 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001460:	f000 f8ce 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001464:	2360      	movs	r3, #96	@ 0x60
 8001466:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 8001468:	f240 53db 	movw	r3, #1499	@ 0x5db
 800146c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	4619      	mov	r1, r3
 800147c:	4807      	ldr	r0, [pc, #28]	@ (800149c <MX_TIM4_Init+0xe8>)
 800147e:	f003 f8b9 	bl	80045f4 <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001488:	f000 f8ba 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800148c:	4803      	ldr	r0, [pc, #12]	@ (800149c <MX_TIM4_Init+0xe8>)
 800148e:	f000 fa15 	bl	80018bc <HAL_TIM_MspPostInit>

}
 8001492:	bf00      	nop
 8001494:	3738      	adds	r7, #56	@ 0x38
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001a0 	.word	0x200001a0
 80014a0:	40000800 	.word	0x40000800

080014a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <MX_USART2_UART_Init+0x50>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_USART2_UART_Init+0x4c>)
 80014dc:	f003 ff4c 	bl	8005378 <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014e6:	f000 f88b 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200001e8 	.word	0x200001e8
 80014f4:	40004400 	.word	0x40004400

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b38      	ldr	r3, [pc, #224]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a37      	ldr	r2, [pc, #220]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b35      	ldr	r3, [pc, #212]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b31      	ldr	r3, [pc, #196]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	4a30      	ldr	r2, [pc, #192]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001538:	6313      	str	r3, [r2, #48]	@ 0x30
 800153a:	4b2e      	ldr	r3, [pc, #184]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a29      	ldr	r2, [pc, #164]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a22      	ldr	r2, [pc, #136]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <MX_GPIO_Init+0xfc>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 7158 	mov.w	r1, #864	@ 0x360
 8001584:	481c      	ldr	r0, [pc, #112]	@ (80015f8 <MX_GPIO_Init+0x100>)
 8001586:	f001 fd29 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001590:	481a      	ldr	r0, [pc, #104]	@ (80015fc <MX_GPIO_Init+0x104>)
 8001592:	f001 fd23 	bl	8002fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001596:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4813      	ldr	r0, [pc, #76]	@ (80015f8 <MX_GPIO_Init+0x100>)
 80015ac:	f001 fb6a 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80015b0:	f44f 7358 	mov.w	r3, #864	@ 0x360
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <MX_GPIO_Init+0x100>)
 80015ca:	f001 fb5b 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_GPIO_Init+0x104>)
 80015e8:	f001 fb4c 	bl	8002c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	@ 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020000 	.word	0x40020000

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <Error_Handler+0x8>

0800160c <Servo_Set_Angle>:
#include "basic.h"
#include "sg90_servo.h"
#include "hc-sr04.h"

void Servo_Set_Angle(uint8_t angle)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
	if (angle > 180)
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2bb4      	cmp	r3, #180	@ 0xb4
 800161a:	d901      	bls.n	8001620 <Servo_Set_Angle+0x14>
		angle = 180;
 800161c:	23b4      	movs	r3, #180	@ 0xb4
 800161e:	71fb      	strb	r3, [r7, #7]

	// 0도=0.5ms, 180도=2.5ms
	uint32_t pulse = 500 + ((angle * 2000) / 180);
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <Servo_Set_Angle+0x48>)
 800162c:	fb82 1203 	smull	r1, r2, r2, r3
 8001630:	441a      	add	r2, r3
 8001632:	11d2      	asrs	r2, r2, #7
 8001634:	17db      	asrs	r3, r3, #31
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800163c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <Servo_Set_Angle+0x4c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	b60b60b7 	.word	0xb60b60b7
 8001658:	200001a0 	.word	0x200001a0

0800165c <ChangeServoSG90Pwm>:

uint32_t tm_sg90;
uint8_t sg90_angle = 0;

void ChangeServoSG90Pwm()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

		Servo_Set_Angle(sg90_angle);
	}
	*/

	if (sonic_distance <= 15)
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <ChangeServoSG90Pwm+0x38>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d803      	bhi.n	8001670 <ChangeServoSG90Pwm+0x14>
		sg90_angle = 180;
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <ChangeServoSG90Pwm+0x3c>)
 800166a:	22b4      	movs	r2, #180	@ 0xb4
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	e00a      	b.n	8001686 <ChangeServoSG90Pwm+0x2a>
	else if (sonic_distance <= 30)
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <ChangeServoSG90Pwm+0x38>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b1e      	cmp	r3, #30
 8001676:	d803      	bhi.n	8001680 <ChangeServoSG90Pwm+0x24>
		sg90_angle = 90;
 8001678:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <ChangeServoSG90Pwm+0x3c>)
 800167a:	225a      	movs	r2, #90	@ 0x5a
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	e002      	b.n	8001686 <ChangeServoSG90Pwm+0x2a>
	else
		sg90_angle = 0;
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <ChangeServoSG90Pwm+0x3c>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]

	Servo_Set_Angle(sg90_angle);
 8001686:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <ChangeServoSG90Pwm+0x3c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ffbe 	bl	800160c <Servo_Set_Angle>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000009c 	.word	0x2000009c
 8001698:	20000230 	.word	0x20000230

0800169c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	4a0f      	ldr	r2, [pc, #60]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b2:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	4a08      	ldr	r2, [pc, #32]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800

080016ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	@ 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1d      	ldr	r2, [pc, #116]	@ (8001780 <HAL_CAN_MspInit+0x94>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d134      	bne.n	8001778 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <HAL_CAN_MspInit+0x98>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	4a1b      	ldr	r2, [pc, #108]	@ (8001784 <HAL_CAN_MspInit+0x98>)
 8001718:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_CAN_MspInit+0x98>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_CAN_MspInit+0x98>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <HAL_CAN_MspInit+0x98>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_CAN_MspInit+0x98>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001746:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001758:	2309      	movs	r3, #9
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4809      	ldr	r0, [pc, #36]	@ (8001788 <HAL_CAN_MspInit+0x9c>)
 8001764:	f001 fa8e 	bl	8002c84 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2014      	movs	r0, #20
 800176e:	f001 f9c0 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001772:	2014      	movs	r0, #20
 8001774:	f001 f9d9 	bl	8002b2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	@ 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40006400 	.word	0x40006400
 8001784:	40023800 	.word	0x40023800
 8001788:	40020000 	.word	0x40020000

0800178c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	@ 0x30
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a3f      	ldr	r2, [pc, #252]	@ (80018a8 <HAL_TIM_Base_MspInit+0x11c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d135      	bne.n	800181a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	4b3e      	ldr	r3, [pc, #248]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a3d      	ldr	r2, [pc, #244]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b3b      	ldr	r3, [pc, #236]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a36      	ldr	r2, [pc, #216]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	4619      	mov	r1, r3
 8001802:	482b      	ldr	r0, [pc, #172]	@ (80018b0 <HAL_TIM_Base_MspInit+0x124>)
 8001804:	f001 fa3e 	bl	8002c84 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	201b      	movs	r0, #27
 800180e:	f001 f970 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001812:	201b      	movs	r0, #27
 8001814:	f001 f989 	bl	8002b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001818:	e042      	b.n	80018a0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001822:	d10e      	bne.n	8001842 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	4a1f      	ldr	r2, [pc, #124]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6413      	str	r3, [r2, #64]	@ 0x40
 8001834:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	693b      	ldr	r3, [r7, #16]
}
 8001840:	e02e      	b.n	80018a0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <HAL_TIM_Base_MspInit+0x128>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d116      	bne.n	800187a <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	4a15      	ldr	r2, [pc, #84]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	6413      	str	r3, [r2, #64]	@ 0x40
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	201d      	movs	r0, #29
 800186e:	f001 f940 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001872:	201d      	movs	r0, #29
 8001874:	f001 f959 	bl	8002b2a <HAL_NVIC_EnableIRQ>
}
 8001878:	e012      	b.n	80018a0 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM4)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a0e      	ldr	r2, [pc, #56]	@ (80018b8 <HAL_TIM_Base_MspInit+0x12c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d10d      	bne.n	80018a0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	4a07      	ldr	r2, [pc, #28]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6413      	str	r3, [r2, #64]	@ 0x40
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_TIM_Base_MspInit+0x120>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
}
 80018a0:	bf00      	nop
 80018a2:	3730      	adds	r7, #48	@ 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40010000 	.word	0x40010000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40000800 	.word	0x40000800

080018bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	@ 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018dc:	d11e      	bne.n	800191c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b22      	ldr	r3, [pc, #136]	@ (800196c <HAL_TIM_MspPostInit+0xb0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a21      	ldr	r2, [pc, #132]	@ (800196c <HAL_TIM_MspPostInit+0xb0>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <HAL_TIM_MspPostInit+0xb0>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018fa:	2320      	movs	r3, #32
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800190a:	2301      	movs	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4816      	ldr	r0, [pc, #88]	@ (8001970 <HAL_TIM_MspPostInit+0xb4>)
 8001916:	f001 f9b5 	bl	8002c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800191a:	e022      	b.n	8001962 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <HAL_TIM_MspPostInit+0xb8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d11d      	bne.n	8001962 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <HAL_TIM_MspPostInit+0xb0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a0f      	ldr	r2, [pc, #60]	@ (800196c <HAL_TIM_MspPostInit+0xb0>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <HAL_TIM_MspPostInit+0xb0>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001952:	2302      	movs	r3, #2
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4806      	ldr	r0, [pc, #24]	@ (8001978 <HAL_TIM_MspPostInit+0xbc>)
 800195e:	f001 f991 	bl	8002c84 <HAL_GPIO_Init>
}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	@ 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000
 8001974:	40000800 	.word	0x40000800
 8001978:	40020400 	.word	0x40020400

0800197c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1d      	ldr	r2, [pc, #116]	@ (8001a10 <HAL_UART_MspInit+0x94>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d133      	bne.n	8001a06 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <HAL_UART_MspInit+0x98>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <HAL_UART_MspInit+0x98>)
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ae:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <HAL_UART_MspInit+0x98>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <HAL_UART_MspInit+0x98>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a14      	ldr	r2, [pc, #80]	@ (8001a14 <HAL_UART_MspInit+0x98>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_UART_MspInit+0x98>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019d6:	230c      	movs	r3, #12
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e6:	2307      	movs	r3, #7
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	4809      	ldr	r0, [pc, #36]	@ (8001a18 <HAL_UART_MspInit+0x9c>)
 80019f2:	f001 f947 	bl	8002c84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2026      	movs	r0, #38	@ 0x26
 80019fc:	f001 f879 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a00:	2026      	movs	r0, #38	@ 0x26
 8001a02:	f001 f892 	bl	8002b2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a06:	bf00      	nop
 8001a08:	3728      	adds	r7, #40	@ 0x28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40004400 	.word	0x40004400
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020000 	.word	0x40020000

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <NMI_Handler+0x4>

08001a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <MemManage_Handler+0x4>

08001a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a72:	f000 fad3 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a80:	4802      	ldr	r0, [pc, #8]	@ (8001a8c <CAN1_RX0_IRQHandler+0x10>)
 8001a82:	f000 fd2c 	bl	80024de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200000a0 	.word	0x200000a0

08001a90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a94:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <TIM1_CC_IRQHandler+0x10>)
 8001a96:	f002 fc21 	bl	80042dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200000c8 	.word	0x200000c8

08001aa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aa8:	4802      	ldr	r0, [pc, #8]	@ (8001ab4 <TIM3_IRQHandler+0x10>)
 8001aaa:	f002 fc17 	bl	80042dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000158 	.word	0x20000158

08001ab8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001abc:	4802      	ldr	r0, [pc, #8]	@ (8001ac8 <USART2_IRQHandler+0x10>)
 8001abe:	f003 fd5b 	bl	8005578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200001e8 	.word	0x200001e8

08001acc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	e00a      	b.n	8001af4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ade:	f3af 8000 	nop.w
 8001ae2:	4601      	mov	r1, r0
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	60ba      	str	r2, [r7, #8]
 8001aea:	b2ca      	uxtb	r2, r1
 8001aec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf0      	blt.n	8001ade <_read+0x12>
  }

  return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e009      	b.n	8001b2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	60ba      	str	r2, [r7, #8]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff f943 	bl	8000dac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbf1      	blt.n	8001b18 <_write+0x12>
  }
  return len;
 8001b34:	687b      	ldr	r3, [r7, #4]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_close>:

int _close(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b66:	605a      	str	r2, [r3, #4]
  return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_isatty>:

int _isatty(int file)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	@ (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	@ (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f004 fe7c 	bl	80068d4 <__errno>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20020000 	.word	0x20020000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	20000234 	.word	0x20000234
 8001c10:	200004a8 	.word	0x200004a8

08001c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <SystemInit+0x20>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1e:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <SystemInit+0x20>)
 8001c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <InitWork>:
uint8_t rx2buff[256];
uint8_t rx2_r_idx = 0;
uint8_t rx2_w_idx = 0;

void InitWork()
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	printf("Start\r\n");
 8001c3c:	480c      	ldr	r0, [pc, #48]	@ (8001c70 <InitWork+0x38>)
 8001c3e:	f004 fd1b 	bl	8006678 <puts>

	// UART2 RX 인터럽트 활성
	HAL_UART_Receive_IT(&huart2, &rx2data, 1);
 8001c42:	2201      	movs	r2, #1
 8001c44:	490b      	ldr	r1, [pc, #44]	@ (8001c74 <InitWork+0x3c>)
 8001c46:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <InitWork+0x40>)
 8001c48:	f003 fc71 	bl	800552e <HAL_UART_Receive_IT>

	// TIMER1 CH1 인터럽트 활성(Input Capture, PA8) - HC-SR04
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	480b      	ldr	r0, [pc, #44]	@ (8001c7c <InitWork+0x44>)
 8001c50:	f002 fa1c 	bl	800408c <HAL_TIM_IC_Start_IT>

	// TIMER2 CH1 인터럽트 활성(PWM, PA5)
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c54:	2100      	movs	r1, #0
 8001c56:	480a      	ldr	r0, [pc, #40]	@ (8001c80 <InitWork+0x48>)
 8001c58:	f002 f8f6 	bl	8003e48 <HAL_TIM_PWM_Start>

	// TIMER3 인터럽트 활성
	HAL_TIM_Base_Start_IT(&htim3);
 8001c5c:	4809      	ldr	r0, [pc, #36]	@ (8001c84 <InitWork+0x4c>)
 8001c5e:	f002 f829 	bl	8003cb4 <HAL_TIM_Base_Start_IT>

	// TIMER4 CH1 인터럽트 활성(PWM, PB6) - SG90 Servo Motor
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001c62:	2100      	movs	r1, #0
 8001c64:	4808      	ldr	r0, [pc, #32]	@ (8001c88 <InitWork+0x50>)
 8001c66:	f002 f8ef 	bl	8003e48 <HAL_TIM_PWM_Start>

	//InitCan1();
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	0800739c 	.word	0x0800739c
 8001c74:	2000023c 	.word	0x2000023c
 8001c78:	200001e8 	.word	0x200001e8
 8001c7c:	200000c8 	.word	0x200000c8
 8001c80:	20000110 	.word	0x20000110
 8001c84:	20000158 	.word	0x20000158
 8001c88:	200001a0 	.word	0x200001a0

08001c8c <DoWork>:

uint32_t value;

void DoWork()
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	ReadButton();
 8001c90:	f000 f8e8 	bl	8001e64 <ReadButton>
	CheckButtonPressed();
 8001c94:	f000 f928 	bl	8001ee8 <CheckButtonPressed>
	ChangeRunLed();
 8001c98:	f000 f8ba 	bl	8001e10 <ChangeRunLed>

	CheckUart2Rx();
 8001c9c:	f000 f832 	bl	8001d04 <CheckUart2Rx>
	ChangeRunLedPwm();
 8001ca0:	f000 f806 	bl	8001cb0 <ChangeRunLedPwm>
	ChangeServoSG90Pwm();
 8001ca4:	f7ff fcda 	bl	800165c <ChangeServoSG90Pwm>

	RunSonicSensor();
 8001ca8:	f7ff f96e 	bl	8000f88 <RunSonicSensor>
	//DoCan1Work();
	//DoStepMotorWork();
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <ChangeRunLedPwm>:

uint32_t tm_run_led_pwm;

// Timer2-Ch1(PWM)을 사용해서 Run LED의 밝기를 변경한다.
void ChangeRunLedPwm()
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	// 10msec마다 PWM CCR1값을 바꾼다.
	if (GetElapsedTick(tm_run_led_pwm) > 10)
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <ChangeRunLedPwm+0x4c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f85f 	bl	8000d7c <GetElapsedTick>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b0a      	cmp	r3, #10
 8001cc2:	d919      	bls.n	8001cf8 <ChangeRunLedPwm+0x48>
	{
		tm_run_led_pwm = HAL_GetTick();
 8001cc4:	f000 f9be 	bl	8002044 <HAL_GetTick>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <ChangeRunLedPwm+0x4c>)
 8001ccc:	6013      	str	r3, [r2, #0]

		// Change Duty
		// 밝기를 줄이기 위해 1/4을 곱함
		TIM2->CCR1 = value/4;
 8001cce:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <ChangeRunLedPwm+0x50>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	6353      	str	r3, [r2, #52]	@ 0x34
		value += 1;
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <ChangeRunLedPwm+0x50>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <ChangeRunLedPwm+0x50>)
 8001ce2:	6013      	str	r3, [r2, #0]
		if (value > TIM2->ARR)	// 100
 8001ce4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cea:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <ChangeRunLedPwm+0x50>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d202      	bcs.n	8001cf8 <ChangeRunLedPwm+0x48>
			value = 0;	// 1초 마다 0으로 설정됨 (10 x 100)
 8001cf2:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <ChangeRunLedPwm+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
	}
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000348 	.word	0x20000348
 8001d00:	20000344 	.word	0x20000344

08001d04 <CheckUart2Rx>:


void CheckUart2Rx()
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
	uint8_t rx;
	if (GetUart2RxByte(&rx))
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f859 	bl	8001dc4 <GetUart2RxByte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <CheckUart2Rx+0x3c>
	{
		// Echo Back
		HAL_UART_Transmit(&huart2, &rx, 1, 0xffff);
 8001d18:	1df9      	adds	r1, r7, #7
 8001d1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4809      	ldr	r0, [pc, #36]	@ (8001d48 <CheckUart2Rx+0x44>)
 8001d22:	f003 fb79 	bl	8005418 <HAL_UART_Transmit>

		if (rx == '1')
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	2b31      	cmp	r3, #49	@ 0x31
 8001d2a:	d103      	bne.n	8001d34 <CheckUart2Rx+0x30>
		{
			run_led_interval = 100;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <CheckUart2Rx+0x48>)
 8001d2e:	2264      	movs	r2, #100	@ 0x64
 8001d30:	601a      	str	r2, [r3, #0]
		else if (rx == '2')
		{
			run_led_interval = 200;
		}
	}
}
 8001d32:	e005      	b.n	8001d40 <CheckUart2Rx+0x3c>
		else if (rx == '2')
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	2b32      	cmp	r3, #50	@ 0x32
 8001d38:	d102      	bne.n	8001d40 <CheckUart2Rx+0x3c>
			run_led_interval = 200;
 8001d3a:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <CheckUart2Rx+0x48>)
 8001d3c:	22c8      	movs	r2, #200	@ 0xc8
 8001d3e:	601a      	str	r2, [r3, #0]
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200001e8 	.word	0x200001e8
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_UART_RxCpltCallback>:


// UART2 수신 인터럽트 처리
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d90 <HAL_UART_RxCpltCallback+0x40>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d111      	bne.n	8001d86 <HAL_UART_RxCpltCallback+0x36>
	{
		rx2buff[rx2_w_idx] = rx2data;
 8001d62:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <HAL_UART_RxCpltCallback+0x44>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_UART_RxCpltCallback+0x48>)
 8001d6a:	7819      	ldrb	r1, [r3, #0]
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_UART_RxCpltCallback+0x4c>)
 8001d6e:	5499      	strb	r1, [r3, r2]
		rx2_w_idx = (rx2_w_idx + 1) % sizeof(rx2buff);
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <HAL_UART_RxCpltCallback+0x44>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_UART_RxCpltCallback+0x44>)
 8001d7a:	701a      	strb	r2, [r3, #0]

		// UART2 RX 인터럽트 활성
		HAL_UART_Receive_IT(&huart2, &rx2data, 1);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4906      	ldr	r1, [pc, #24]	@ (8001d98 <HAL_UART_RxCpltCallback+0x48>)
 8001d80:	4807      	ldr	r0, [pc, #28]	@ (8001da0 <HAL_UART_RxCpltCallback+0x50>)
 8001d82:	f003 fbd4 	bl	800552e <HAL_UART_Receive_IT>
	}
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40004400 	.word	0x40004400
 8001d94:	20000341 	.word	0x20000341
 8001d98:	2000023c 	.word	0x2000023c
 8001d9c:	20000240 	.word	0x20000240
 8001da0:	200001e8 	.word	0x200001e8

08001da4 <HAL_TIM_PeriodElapsedCallback>:

// TIMER3 인터럽트 처리 (1초 주기)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	if (run_led_source == 1)
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x14>
		ToggleRunLed();
 8001db4:	f000 f84c 	bl	8001e50 <ToggleRunLed>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <GetUart2RxByte>:


uint8_t GetUart2RxByte(uint8_t* rx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	if (rx2_r_idx != rx2_w_idx)
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <GetUart2RxByte+0x40>)
 8001dce:	781a      	ldrb	r2, [r3, #0]
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <GetUart2RxByte+0x44>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d00e      	beq.n	8001df6 <GetUart2RxByte+0x32>
	{
		*rx = rx2buff[rx2_r_idx];
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <GetUart2RxByte+0x40>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <GetUart2RxByte+0x48>)
 8001de0:	5c9a      	ldrb	r2, [r3, r2]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	701a      	strb	r2, [r3, #0]
		rx2_r_idx = (rx2_r_idx + 1) % sizeof(rx2buff);
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <GetUart2RxByte+0x40>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	3301      	adds	r3, #1
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <GetUart2RxByte+0x40>)
 8001df0:	701a      	strb	r2, [r3, #0]
		return 1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <GetUart2RxByte+0x34>
	}
	else
		return 0;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	20000340 	.word	0x20000340
 8001e08:	20000341 	.word	0x20000341
 8001e0c:	20000240 	.word	0x20000240

08001e10 <ChangeRunLed>:


void ChangeRunLed()
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	if (run_led_source == 0)
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <ChangeRunLed+0x34>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d110      	bne.n	8001e3e <ChangeRunLed+0x2e>
	{
		if (GetElapsedTick(tm_run_led) >= run_led_interval)
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <ChangeRunLed+0x38>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ffab 	bl	8000d7c <GetElapsedTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <ChangeRunLed+0x3c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d306      	bcc.n	8001e3e <ChangeRunLed+0x2e>
		{
			tm_run_led = HAL_GetTick();
 8001e30:	f000 f908 	bl	8002044 <HAL_GetTick>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <ChangeRunLed+0x38>)
 8001e38:	6013      	str	r3, [r2, #0]
			ToggleRunLed();
 8001e3a:	f000 f809 	bl	8001e50 <ToggleRunLed>
		}
	}
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000008 	.word	0x20000008
 8001e48:	20000238 	.word	0x20000238
 8001e4c:	20000004 	.word	0x20000004

08001e50 <ToggleRunLed>:

void ToggleRunLed()
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001e54:	2120      	movs	r1, #32
 8001e56:	4802      	ldr	r0, [pc, #8]	@ (8001e60 <ToggleRunLed+0x10>)
 8001e58:	f001 f8d9 	bl	800300e <HAL_GPIO_TogglePin>
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40020000 	.word	0x40020000

08001e64 <ReadButton>:
uint8_t rb_cont_cnt = 0;
uint8_t btn1_pressed = 0;
#define RB_CONT 50

void ReadButton()
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
	if (GetElapsedTick(tm_read_button) >= 1)
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed8 <ReadButton+0x74>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ff84 	bl	8000d7c <GetElapsedTick>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d02a      	beq.n	8001ed0 <ReadButton+0x6c>
	{
		tm_read_button = HAL_GetTick();
 8001e7a:	f000 f8e3 	bl	8002044 <HAL_GetTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a15      	ldr	r2, [pc, #84]	@ (8001ed8 <ReadButton+0x74>)
 8001e82:	6013      	str	r3, [r2, #0]

		// Read Button1
		uint8_t val = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001e84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e88:	4814      	ldr	r0, [pc, #80]	@ (8001edc <ReadButton+0x78>)
 8001e8a:	f001 f88f 	bl	8002fac <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
		// button pressed
		if (!val)
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d118      	bne.n	8001eca <ReadButton+0x66>
		{
			if (rb_cont_cnt == RB_CONT)
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <ReadButton+0x7c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b32      	cmp	r3, #50	@ 0x32
 8001e9e:	d109      	bne.n	8001eb4 <ReadButton+0x50>
			{
				btn1_pressed = 1;
 8001ea0:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <ReadButton+0x80>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
				rb_cont_cnt++;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <ReadButton+0x7c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <ReadButton+0x7c>)
 8001eb0:	701a      	strb	r2, [r3, #0]
		else
		{
			rb_cont_cnt = 0;
		}
	}
}
 8001eb2:	e00d      	b.n	8001ed0 <ReadButton+0x6c>
			else if(rb_cont_cnt > RB_CONT)
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <ReadButton+0x7c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b32      	cmp	r3, #50	@ 0x32
 8001eba:	d809      	bhi.n	8001ed0 <ReadButton+0x6c>
				rb_cont_cnt++;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <ReadButton+0x7c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <ReadButton+0x7c>)
 8001ec6:	701a      	strb	r2, [r3, #0]
}
 8001ec8:	e002      	b.n	8001ed0 <ReadButton+0x6c>
			rb_cont_cnt = 0;
 8001eca:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <ReadButton+0x7c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	2000034c 	.word	0x2000034c
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	20000350 	.word	0x20000350
 8001ee4:	20000351 	.word	0x20000351

08001ee8 <CheckButtonPressed>:


void CheckButtonPressed()
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
	if (btn1_pressed)
 8001eec:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <CheckButtonPressed+0x34>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00d      	beq.n	8001f10 <CheckButtonPressed+0x28>
	{
		btn1_pressed = 0;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <CheckButtonPressed+0x34>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
		if (run_led_source == 0)
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <CheckButtonPressed+0x38>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <CheckButtonPressed+0x22>
			run_led_source = 1;
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <CheckButtonPressed+0x38>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
		else
			run_led_source = 0;
	}
}
 8001f08:	e002      	b.n	8001f10 <CheckButtonPressed+0x28>
			run_led_source = 0;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <CheckButtonPressed+0x38>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000351 	.word	0x20000351
 8001f20:	20000008 	.word	0x20000008

08001f24 <Reset_Handler>:
 8001f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f5c <LoopFillZerobss+0xe>
 8001f28:	f7ff fe74 	bl	8001c14 <SystemInit>
 8001f2c:	480c      	ldr	r0, [pc, #48]	@ (8001f60 <LoopFillZerobss+0x12>)
 8001f2e:	490d      	ldr	r1, [pc, #52]	@ (8001f64 <LoopFillZerobss+0x16>)
 8001f30:	4a0d      	ldr	r2, [pc, #52]	@ (8001f68 <LoopFillZerobss+0x1a>)
 8001f32:	2300      	movs	r3, #0
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:
 8001f36:	58d4      	ldr	r4, [r2, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:
 8001f3c:	18c4      	adds	r4, r0, r3
 8001f3e:	428c      	cmp	r4, r1
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <LoopFillZerobss+0x1e>)
 8001f44:	4c0a      	ldr	r4, [pc, #40]	@ (8001f70 <LoopFillZerobss+0x22>)
 8001f46:	2300      	movs	r3, #0
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:
 8001f4e:	42a2      	cmp	r2, r4
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>
 8001f52:	f004 fcc5 	bl	80068e0 <__libc_init_array>
 8001f56:	f7ff f845 	bl	8000fe4 <main>
 8001f5a:	4770      	bx	lr
 8001f5c:	20020000 	.word	0x20020000
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000070 	.word	0x20000070
 8001f68:	08007400 	.word	0x08007400
 8001f6c:	20000070 	.word	0x20000070
 8001f70:	200004a4 	.word	0x200004a4

08001f74 <ADC_IRQHandler>:
 8001f74:	e7fe      	b.n	8001f74 <ADC_IRQHandler>
	...

08001f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <HAL_Init+0x40>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <HAL_Init+0x40>)
 8001f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f94:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_Init+0x40>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 fd9b 	bl	8002adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa6:	200f      	movs	r0, #15
 8001fa8:	f000 f808 	bl	8001fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fac:	f7ff fb76 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc4:	4b12      	ldr	r3, [pc, #72]	@ (8002010 <HAL_InitTick+0x54>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_InitTick+0x58>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fdb3 	bl	8002b46 <HAL_SYSTICK_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00e      	b.n	8002008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d80a      	bhi.n	8002006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f000 fd7b 	bl	8002af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	@ (8002018 <HAL_InitTick+0x5c>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000000 	.word	0x20000000
 8002014:	20000010 	.word	0x20000010
 8002018:	2000000c 	.word	0x2000000c

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000010 	.word	0x20000010
 8002040:	20000354 	.word	0x20000354

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000354 	.word	0x20000354

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff ffee 	bl	8002044 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffde 	bl	8002044 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000010 	.word	0x20000010

080020a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0ed      	b.n	8002292 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff fb12 	bl	80016ec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d8:	f7ff ffb4 	bl	8002044 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020de:	e012      	b.n	8002106 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020e0:	f7ff ffb0 	bl	8002044 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d90b      	bls.n	8002106 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2205      	movs	r2, #5
 80020fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0c5      	b.n	8002292 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0e5      	beq.n	80020e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0202 	bic.w	r2, r2, #2
 8002122:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002124:	f7ff ff8e 	bl	8002044 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800212a:	e012      	b.n	8002152 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800212c:	f7ff ff8a 	bl	8002044 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b0a      	cmp	r3, #10
 8002138:	d90b      	bls.n	8002152 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2205      	movs	r2, #5
 800214a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e09f      	b.n	8002292 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e5      	bne.n	800212c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7e1b      	ldrb	r3, [r3, #24]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e007      	b.n	800218a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7e5b      	ldrb	r3, [r3, #25]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e007      	b.n	80021b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7e9b      	ldrb	r3, [r3, #26]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d108      	bne.n	80021ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0220 	orr.w	r2, r2, #32
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e007      	b.n	80021de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0220 	bic.w	r2, r2, #32
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7edb      	ldrb	r3, [r3, #27]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d108      	bne.n	80021f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0210 	bic.w	r2, r2, #16
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e007      	b.n	8002208 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0210 	orr.w	r2, r2, #16
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7f1b      	ldrb	r3, [r3, #28]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d108      	bne.n	8002222 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0208 	orr.w	r2, r2, #8
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e007      	b.n	8002232 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0208 	bic.w	r2, r2, #8
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7f5b      	ldrb	r3, [r3, #29]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d108      	bne.n	800224c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0204 	orr.w	r2, r2, #4
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e007      	b.n	800225c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0204 	bic.w	r2, r2, #4
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	ea42 0103 	orr.w	r1, r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800229a:	b480      	push	{r7}
 800229c:	b087      	sub	sp, #28
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d003      	beq.n	80022be <HAL_CAN_GetRxMessage+0x24>
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	f040 8103 	bne.w	80024c4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10e      	bne.n	80022e2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d116      	bne.n	8002300 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0f7      	b.n	80024d2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0e8      	b.n	80024d2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	331b      	adds	r3, #27
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4413      	add	r3, r2
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0204 	and.w	r2, r3, #4
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	331b      	adds	r3, #27
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	4413      	add	r3, r2
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0d5b      	lsrs	r3, r3, #21
 800232e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e00b      	b.n	8002350 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	331b      	adds	r3, #27
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	4413      	add	r3, r2
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	08db      	lsrs	r3, r3, #3
 8002348:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	331b      	adds	r3, #27
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	4413      	add	r3, r2
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0202 	and.w	r2, r3, #2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	331b      	adds	r3, #27
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2208      	movs	r2, #8
 8002382:	611a      	str	r2, [r3, #16]
 8002384:	e00b      	b.n	800239e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	331b      	adds	r3, #27
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	4413      	add	r3, r2
 8002392:	3304      	adds	r3, #4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 020f 	and.w	r2, r3, #15
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	331b      	adds	r3, #27
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	4413      	add	r3, r2
 80023aa:	3304      	adds	r3, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	331b      	adds	r3, #27
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	4413      	add	r3, r2
 80023c2:	3304      	adds	r3, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0c1b      	lsrs	r3, r3, #16
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0a1a      	lsrs	r2, r3, #8
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	4413      	add	r3, r2
 8002408:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0c1a      	lsrs	r2, r3, #16
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	3302      	adds	r3, #2
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4413      	add	r3, r2
 8002422:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e1a      	lsrs	r2, r3, #24
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	3303      	adds	r3, #3
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4413      	add	r3, r2
 800243c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	3304      	adds	r3, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	4413      	add	r3, r2
 8002454:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0a1a      	lsrs	r2, r3, #8
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	3305      	adds	r3, #5
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	4413      	add	r3, r2
 800246e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0c1a      	lsrs	r2, r3, #16
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	3306      	adds	r3, #6
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4413      	add	r3, r2
 8002488:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0e1a      	lsrs	r2, r3, #24
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	3307      	adds	r3, #7
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d108      	bne.n	80024b0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	e007      	b.n	80024c0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0220 	orr.w	r2, r2, #32
 80024be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e006      	b.n	80024d2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b08a      	sub	sp, #40	@ 0x28
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d07c      	beq.n	800261e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d023      	beq.n	8002576 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2201      	movs	r2, #1
 8002534:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f983 	bl	800284c <HAL_CAN_TxMailbox0CompleteCallback>
 8002546:	e016      	b.n	8002576 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d004      	beq.n	800255c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
 800255a:	e00c      	b.n	8002576 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
 800256e:	e002      	b.n	8002576 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f989 	bl	8002888 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d024      	beq.n	80025ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002588:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f963 	bl	8002860 <HAL_CAN_TxMailbox1CompleteCallback>
 800259a:	e016      	b.n	80025ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ae:	e00c      	b.n	80025ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c2:	e002      	b.n	80025ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f969 	bl	800289c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d024      	beq.n	800261e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f943 	bl	8002874 <HAL_CAN_TxMailbox2CompleteCallback>
 80025ee:	e016      	b.n	800261e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
 8002602:	e00c      	b.n	800261e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
 8002616:	e002      	b.n	800261e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f949 	bl	80028b0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00c      	beq.n	8002642 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2210      	movs	r2, #16
 8002640:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2208      	movs	r2, #8
 800265c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f930 	bl	80028c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7fe fba7 	bl	8000dd0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00c      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2210      	movs	r2, #16
 80026a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00b      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2208      	movs	r2, #8
 80026c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f912 	bl	80028ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f8f9 	bl	80028d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2210      	movs	r2, #16
 8002700:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f8fc 	bl	8002900 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d006      	beq.n	800272a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2208      	movs	r2, #8
 8002722:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f8f5 	bl	8002914 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d07b      	beq.n	800282c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d072      	beq.n	8002824 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002798:	2b00      	cmp	r3, #0
 800279a:	d043      	beq.n	8002824 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d03e      	beq.n	8002824 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027ac:	2b60      	cmp	r3, #96	@ 0x60
 80027ae:	d02b      	beq.n	8002808 <HAL_CAN_IRQHandler+0x32a>
 80027b0:	2b60      	cmp	r3, #96	@ 0x60
 80027b2:	d82e      	bhi.n	8002812 <HAL_CAN_IRQHandler+0x334>
 80027b4:	2b50      	cmp	r3, #80	@ 0x50
 80027b6:	d022      	beq.n	80027fe <HAL_CAN_IRQHandler+0x320>
 80027b8:	2b50      	cmp	r3, #80	@ 0x50
 80027ba:	d82a      	bhi.n	8002812 <HAL_CAN_IRQHandler+0x334>
 80027bc:	2b40      	cmp	r3, #64	@ 0x40
 80027be:	d019      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x316>
 80027c0:	2b40      	cmp	r3, #64	@ 0x40
 80027c2:	d826      	bhi.n	8002812 <HAL_CAN_IRQHandler+0x334>
 80027c4:	2b30      	cmp	r3, #48	@ 0x30
 80027c6:	d010      	beq.n	80027ea <HAL_CAN_IRQHandler+0x30c>
 80027c8:	2b30      	cmp	r3, #48	@ 0x30
 80027ca:	d822      	bhi.n	8002812 <HAL_CAN_IRQHandler+0x334>
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d002      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x2f8>
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d005      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027d4:	e01d      	b.n	8002812 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027de:	e019      	b.n	8002814 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	f043 0310 	orr.w	r3, r3, #16
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027e8:	e014      	b.n	8002814 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	f043 0320 	orr.w	r3, r3, #32
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027f2:	e00f      	b.n	8002814 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027fc:	e00a      	b.n	8002814 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002806:	e005      	b.n	8002814 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002810:	e000      	b.n	8002814 <HAL_CAN_IRQHandler+0x336>
            break;
 8002812:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002822:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2204      	movs	r2, #4
 800282a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f872 	bl	8002928 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	@ 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800296c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296e:	4a04      	ldr	r2, [pc, #16]	@ (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60d3      	str	r3, [r2, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002988:	4b04      	ldr	r3, [pc, #16]	@ (800299c <__NVIC_GetPriorityGrouping+0x18>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 0307 	and.w	r3, r3, #7
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db0b      	blt.n	80029ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4907      	ldr	r1, [pc, #28]	@ (80029d8 <__NVIC_EnableIRQ+0x38>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e100 	.word	0xe000e100

080029dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db0a      	blt.n	8002a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	490c      	ldr	r1, [pc, #48]	@ (8002a28 <__NVIC_SetPriority+0x4c>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a04:	e00a      	b.n	8002a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4908      	ldr	r1, [pc, #32]	@ (8002a2c <__NVIC_SetPriority+0x50>)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3b04      	subs	r3, #4
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	440b      	add	r3, r1
 8002a1a:	761a      	strb	r2, [r3, #24]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	@ 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0307 	rsb	r3, r3, #7
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf28      	it	cs
 8002a4e:	2304      	movcs	r3, #4
 8002a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d902      	bls.n	8002a60 <NVIC_EncodePriority+0x30>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b03      	subs	r3, #3
 8002a5e:	e000      	b.n	8002a62 <NVIC_EncodePriority+0x32>
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	4313      	orrs	r3, r2
         );
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	@ 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aa8:	d301      	bcc.n	8002aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00f      	b.n	8002ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aae:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	f7ff ff8e 	bl	80029dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac6:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <SysTick_Config+0x40>)
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff29 	bl	800293c <__NVIC_SetPriorityGrouping>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b04:	f7ff ff3e 	bl	8002984 <__NVIC_GetPriorityGrouping>
 8002b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f7ff ff8e 	bl	8002a30 <NVIC_EncodePriority>
 8002b14:	4602      	mov	r2, r0
 8002b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff5d 	bl	80029dc <__NVIC_SetPriority>
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	4603      	mov	r3, r0
 8002b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff31 	bl	80029a0 <__NVIC_EnableIRQ>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffa2 	bl	8002a98 <SysTick_Config>
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7ff fa6a 	bl	8002044 <HAL_GetTick>
 8002b70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d008      	beq.n	8002b90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2280      	movs	r2, #128	@ 0x80
 8002b82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e052      	b.n	8002c36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0216 	bic.w	r2, r2, #22
 8002b9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d103      	bne.n	8002bc0 <HAL_DMA_Abort+0x62>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0208 	bic.w	r2, r2, #8
 8002bce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be0:	e013      	b.n	8002c0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002be2:	f7ff fa2f 	bl	8002044 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d90c      	bls.n	8002c0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e015      	b.n	8002c36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e4      	bne.n	8002be2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1c:	223f      	movs	r2, #63	@ 0x3f
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d004      	beq.n	8002c5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2280      	movs	r2, #128	@ 0x80
 8002c56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e00c      	b.n	8002c76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2205      	movs	r2, #5
 8002c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	@ 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e165      	b.n	8002f6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	f040 8154 	bne.w	8002f66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d005      	beq.n	8002cd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d130      	bne.n	8002d38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 0201 	and.w	r2, r3, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d017      	beq.n	8002d74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	2203      	movs	r2, #3
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d123      	bne.n	8002dc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	08da      	lsrs	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3208      	adds	r2, #8
 8002d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	220f      	movs	r2, #15
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	08da      	lsrs	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3208      	adds	r2, #8
 8002dc2:	69b9      	ldr	r1, [r7, #24]
 8002dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0203 	and.w	r2, r3, #3
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80ae 	beq.w	8002f66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002f84 <HAL_GPIO_Init+0x300>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	4a5c      	ldr	r2, [pc, #368]	@ (8002f84 <HAL_GPIO_Init+0x300>)
 8002e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8002f84 <HAL_GPIO_Init+0x300>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e26:	4a58      	ldr	r2, [pc, #352]	@ (8002f88 <HAL_GPIO_Init+0x304>)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4f      	ldr	r2, [pc, #316]	@ (8002f8c <HAL_GPIO_Init+0x308>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d025      	beq.n	8002e9e <HAL_GPIO_Init+0x21a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4e      	ldr	r2, [pc, #312]	@ (8002f90 <HAL_GPIO_Init+0x30c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01f      	beq.n	8002e9a <HAL_GPIO_Init+0x216>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f94 <HAL_GPIO_Init+0x310>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d019      	beq.n	8002e96 <HAL_GPIO_Init+0x212>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4c      	ldr	r2, [pc, #304]	@ (8002f98 <HAL_GPIO_Init+0x314>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_GPIO_Init+0x20e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f9c <HAL_GPIO_Init+0x318>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00d      	beq.n	8002e8e <HAL_GPIO_Init+0x20a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa0 <HAL_GPIO_Init+0x31c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d007      	beq.n	8002e8a <HAL_GPIO_Init+0x206>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a49      	ldr	r2, [pc, #292]	@ (8002fa4 <HAL_GPIO_Init+0x320>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <HAL_GPIO_Init+0x202>
 8002e82:	2306      	movs	r3, #6
 8002e84:	e00c      	b.n	8002ea0 <HAL_GPIO_Init+0x21c>
 8002e86:	2307      	movs	r3, #7
 8002e88:	e00a      	b.n	8002ea0 <HAL_GPIO_Init+0x21c>
 8002e8a:	2305      	movs	r3, #5
 8002e8c:	e008      	b.n	8002ea0 <HAL_GPIO_Init+0x21c>
 8002e8e:	2304      	movs	r3, #4
 8002e90:	e006      	b.n	8002ea0 <HAL_GPIO_Init+0x21c>
 8002e92:	2303      	movs	r3, #3
 8002e94:	e004      	b.n	8002ea0 <HAL_GPIO_Init+0x21c>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e002      	b.n	8002ea0 <HAL_GPIO_Init+0x21c>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_GPIO_Init+0x21c>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	f002 0203 	and.w	r2, r2, #3
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	4093      	lsls	r3, r2
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb0:	4935      	ldr	r1, [pc, #212]	@ (8002f88 <HAL_GPIO_Init+0x304>)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ee2:	4a31      	ldr	r2, [pc, #196]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f0c:	4a26      	ldr	r2, [pc, #152]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f12:	4b25      	ldr	r3, [pc, #148]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f36:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f60:	4a11      	ldr	r2, [pc, #68]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	f67f ae96 	bls.w	8002ca0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3724      	adds	r7, #36	@ 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40020400 	.word	0x40020400
 8002f94:	40020800 	.word	0x40020800
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40021400 	.word	0x40021400
 8002fa4:	40021800 	.word	0x40021800
 8002fa8:	40013c00 	.word	0x40013c00

08002fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	887b      	ldrh	r3, [r7, #2]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e001      	b.n	8002fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fec:	787b      	ldrb	r3, [r7, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ff8:	e003      	b.n	8003002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	619a      	str	r2, [r3, #24]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003020:	887a      	ldrh	r2, [r7, #2]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4013      	ands	r3, r2
 8003026:	041a      	lsls	r2, r3, #16
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	43d9      	mvns	r1, r3
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	400b      	ands	r3, r1
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	619a      	str	r2, [r3, #24]
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0cc      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b68      	ldr	r3, [pc, #416]	@ (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d90c      	bls.n	8003080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b65      	ldr	r3, [pc, #404]	@ (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b63      	ldr	r3, [pc, #396]	@ (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0b8      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003098:	4b59      	ldr	r3, [pc, #356]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a58      	ldr	r2, [pc, #352]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b0:	4b53      	ldr	r3, [pc, #332]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a52      	ldr	r2, [pc, #328]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030bc:	4b50      	ldr	r3, [pc, #320]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	494d      	ldr	r1, [pc, #308]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d044      	beq.n	8003164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b47      	ldr	r3, [pc, #284]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d119      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e07f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b3f      	ldr	r3, [pc, #252]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	4b3b      	ldr	r3, [pc, #236]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e067      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003122:	4b37      	ldr	r3, [pc, #220]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f023 0203 	bic.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4934      	ldr	r1, [pc, #208]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003134:	f7fe ff86 	bl	8002044 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	e00a      	b.n	8003152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313c:	f7fe ff82 	bl	8002044 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e04f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4b2b      	ldr	r3, [pc, #172]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 020c 	and.w	r2, r3, #12
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	429a      	cmp	r2, r3
 8003162:	d1eb      	bne.n	800313c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b25      	ldr	r3, [pc, #148]	@ (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d20c      	bcs.n	800318c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b22      	ldr	r3, [pc, #136]	@ (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b20      	ldr	r3, [pc, #128]	@ (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e032      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b19      	ldr	r3, [pc, #100]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4916      	ldr	r1, [pc, #88]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b6:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	490e      	ldr	r1, [pc, #56]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ca:	f000 f855 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	490a      	ldr	r1, [pc, #40]	@ (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	5ccb      	ldrb	r3, [r1, r3]
 80031de:	fa22 f303 	lsr.w	r3, r2, r3
 80031e2:	4a09      	ldr	r2, [pc, #36]	@ (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031e6:	4b09      	ldr	r3, [pc, #36]	@ (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe fee6 	bl	8001fbc <HAL_InitTick>

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023c00 	.word	0x40023c00
 8003200:	40023800 	.word	0x40023800
 8003204:	080073a4 	.word	0x080073a4
 8003208:	20000000 	.word	0x20000000
 800320c:	2000000c 	.word	0x2000000c

08003210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003214:	4b03      	ldr	r3, [pc, #12]	@ (8003224 <HAL_RCC_GetHCLKFreq+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000000 	.word	0x20000000

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800322c:	f7ff fff0 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0a9b      	lsrs	r3, r3, #10
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4903      	ldr	r1, [pc, #12]	@ (800324c <HAL_RCC_GetPCLK1Freq+0x24>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40023800 	.word	0x40023800
 800324c:	080073b4 	.word	0x080073b4

08003250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003254:	f7ff ffdc 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0b5b      	lsrs	r3, r3, #13
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4903      	ldr	r1, [pc, #12]	@ (8003274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40023800 	.word	0x40023800
 8003274:	080073b4 	.word	0x080073b4

08003278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b0ae      	sub	sp, #184	@ 0xb8
 800327e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329e:	4bcb      	ldr	r3, [pc, #812]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	f200 8206 	bhi.w	80036b8 <HAL_RCC_GetSysClockFreq+0x440>
 80032ac:	a201      	add	r2, pc, #4	@ (adr r2, 80032b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	080036b9 	.word	0x080036b9
 80032bc:	080036b9 	.word	0x080036b9
 80032c0:	080036b9 	.word	0x080036b9
 80032c4:	080032f1 	.word	0x080032f1
 80032c8:	080036b9 	.word	0x080036b9
 80032cc:	080036b9 	.word	0x080036b9
 80032d0:	080036b9 	.word	0x080036b9
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	080036b9 	.word	0x080036b9
 80032dc:	080036b9 	.word	0x080036b9
 80032e0:	080036b9 	.word	0x080036b9
 80032e4:	080034e9 	.word	0x080034e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4bb9      	ldr	r3, [pc, #740]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80032ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032ee:	e1e7      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f0:	4bb8      	ldr	r3, [pc, #736]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80032f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032f6:	e1e3      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f8:	4bb4      	ldr	r3, [pc, #720]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003300:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003304:	4bb1      	ldr	r3, [pc, #708]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d071      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003310:	4bae      	ldr	r3, [pc, #696]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800331c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003328:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003336:	4622      	mov	r2, r4
 8003338:	462b      	mov	r3, r5
 800333a:	f04f 0000 	mov.w	r0, #0
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	0159      	lsls	r1, r3, #5
 8003344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003348:	0150      	lsls	r0, r2, #5
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4621      	mov	r1, r4
 8003350:	1a51      	subs	r1, r2, r1
 8003352:	6439      	str	r1, [r7, #64]	@ 0x40
 8003354:	4629      	mov	r1, r5
 8003356:	eb63 0301 	sbc.w	r3, r3, r1
 800335a:	647b      	str	r3, [r7, #68]	@ 0x44
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003368:	4649      	mov	r1, r9
 800336a:	018b      	lsls	r3, r1, #6
 800336c:	4641      	mov	r1, r8
 800336e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003372:	4641      	mov	r1, r8
 8003374:	018a      	lsls	r2, r1, #6
 8003376:	4641      	mov	r1, r8
 8003378:	1a51      	subs	r1, r2, r1
 800337a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800337c:	4649      	mov	r1, r9
 800337e:	eb63 0301 	sbc.w	r3, r3, r1
 8003382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003390:	4649      	mov	r1, r9
 8003392:	00cb      	lsls	r3, r1, #3
 8003394:	4641      	mov	r1, r8
 8003396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800339a:	4641      	mov	r1, r8
 800339c:	00ca      	lsls	r2, r1, #3
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	4622      	mov	r2, r4
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80033aa:	462b      	mov	r3, r5
 80033ac:	460a      	mov	r2, r1
 80033ae:	eb42 0303 	adc.w	r3, r2, r3
 80033b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033c0:	4629      	mov	r1, r5
 80033c2:	024b      	lsls	r3, r1, #9
 80033c4:	4621      	mov	r1, r4
 80033c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033ca:	4621      	mov	r1, r4
 80033cc:	024a      	lsls	r2, r1, #9
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80033e4:	f7fd fb52 	bl	8000a8c <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033f2:	e067      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f4:	4b75      	ldr	r3, [pc, #468]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	099b      	lsrs	r3, r3, #6
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003400:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003404:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800340e:	2300      	movs	r3, #0
 8003410:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003412:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003416:	4622      	mov	r2, r4
 8003418:	462b      	mov	r3, r5
 800341a:	f04f 0000 	mov.w	r0, #0
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	0159      	lsls	r1, r3, #5
 8003424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003428:	0150      	lsls	r0, r2, #5
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4621      	mov	r1, r4
 8003430:	1a51      	subs	r1, r2, r1
 8003432:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003434:	4629      	mov	r1, r5
 8003436:	eb63 0301 	sbc.w	r3, r3, r1
 800343a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003448:	4649      	mov	r1, r9
 800344a:	018b      	lsls	r3, r1, #6
 800344c:	4641      	mov	r1, r8
 800344e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003452:	4641      	mov	r1, r8
 8003454:	018a      	lsls	r2, r1, #6
 8003456:	4641      	mov	r1, r8
 8003458:	ebb2 0a01 	subs.w	sl, r2, r1
 800345c:	4649      	mov	r1, r9
 800345e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800346e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003476:	4692      	mov	sl, r2
 8003478:	469b      	mov	fp, r3
 800347a:	4623      	mov	r3, r4
 800347c:	eb1a 0303 	adds.w	r3, sl, r3
 8003480:	623b      	str	r3, [r7, #32]
 8003482:	462b      	mov	r3, r5
 8003484:	eb4b 0303 	adc.w	r3, fp, r3
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003496:	4629      	mov	r1, r5
 8003498:	028b      	lsls	r3, r1, #10
 800349a:	4621      	mov	r1, r4
 800349c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034a0:	4621      	mov	r1, r4
 80034a2:	028a      	lsls	r2, r1, #10
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034ac:	2200      	movs	r2, #0
 80034ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80034b0:	677a      	str	r2, [r7, #116]	@ 0x74
 80034b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80034b6:	f7fd fae9 	bl	8000a8c <__aeabi_uldivmod>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4613      	mov	r3, r2
 80034c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034c4:	4b41      	ldr	r3, [pc, #260]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	3301      	adds	r3, #1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80034d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034e6:	e0eb      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e8:	4b38      	ldr	r3, [pc, #224]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f4:	4b35      	ldr	r3, [pc, #212]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d06b      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003500:	4b32      	ldr	r3, [pc, #200]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x354>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	099b      	lsrs	r3, r3, #6
 8003506:	2200      	movs	r2, #0
 8003508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800350a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800350c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800350e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003512:	663b      	str	r3, [r7, #96]	@ 0x60
 8003514:	2300      	movs	r3, #0
 8003516:	667b      	str	r3, [r7, #100]	@ 0x64
 8003518:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800351c:	4622      	mov	r2, r4
 800351e:	462b      	mov	r3, r5
 8003520:	f04f 0000 	mov.w	r0, #0
 8003524:	f04f 0100 	mov.w	r1, #0
 8003528:	0159      	lsls	r1, r3, #5
 800352a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800352e:	0150      	lsls	r0, r2, #5
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4621      	mov	r1, r4
 8003536:	1a51      	subs	r1, r2, r1
 8003538:	61b9      	str	r1, [r7, #24]
 800353a:	4629      	mov	r1, r5
 800353c:	eb63 0301 	sbc.w	r3, r3, r1
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800354e:	4659      	mov	r1, fp
 8003550:	018b      	lsls	r3, r1, #6
 8003552:	4651      	mov	r1, sl
 8003554:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003558:	4651      	mov	r1, sl
 800355a:	018a      	lsls	r2, r1, #6
 800355c:	4651      	mov	r1, sl
 800355e:	ebb2 0801 	subs.w	r8, r2, r1
 8003562:	4659      	mov	r1, fp
 8003564:	eb63 0901 	sbc.w	r9, r3, r1
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003574:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003578:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800357c:	4690      	mov	r8, r2
 800357e:	4699      	mov	r9, r3
 8003580:	4623      	mov	r3, r4
 8003582:	eb18 0303 	adds.w	r3, r8, r3
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	462b      	mov	r3, r5
 800358a:	eb49 0303 	adc.w	r3, r9, r3
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800359c:	4629      	mov	r1, r5
 800359e:	024b      	lsls	r3, r1, #9
 80035a0:	4621      	mov	r1, r4
 80035a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035a6:	4621      	mov	r1, r4
 80035a8:	024a      	lsls	r2, r1, #9
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035b2:	2200      	movs	r2, #0
 80035b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80035b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035bc:	f7fd fa66 	bl	8000a8c <__aeabi_uldivmod>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4613      	mov	r3, r2
 80035c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035ca:	e065      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x420>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d8:	4b3d      	ldr	r3, [pc, #244]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	099b      	lsrs	r3, r3, #6
 80035de:	2200      	movs	r2, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	4611      	mov	r1, r2
 80035e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80035ea:	2300      	movs	r3, #0
 80035ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80035ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80035f2:	4642      	mov	r2, r8
 80035f4:	464b      	mov	r3, r9
 80035f6:	f04f 0000 	mov.w	r0, #0
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	0159      	lsls	r1, r3, #5
 8003600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003604:	0150      	lsls	r0, r2, #5
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4641      	mov	r1, r8
 800360c:	1a51      	subs	r1, r2, r1
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	4649      	mov	r1, r9
 8003612:	eb63 0301 	sbc.w	r3, r3, r1
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003624:	4659      	mov	r1, fp
 8003626:	018b      	lsls	r3, r1, #6
 8003628:	4651      	mov	r1, sl
 800362a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800362e:	4651      	mov	r1, sl
 8003630:	018a      	lsls	r2, r1, #6
 8003632:	4651      	mov	r1, sl
 8003634:	1a54      	subs	r4, r2, r1
 8003636:	4659      	mov	r1, fp
 8003638:	eb63 0501 	sbc.w	r5, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	00eb      	lsls	r3, r5, #3
 8003646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800364a:	00e2      	lsls	r2, r4, #3
 800364c:	4614      	mov	r4, r2
 800364e:	461d      	mov	r5, r3
 8003650:	4643      	mov	r3, r8
 8003652:	18e3      	adds	r3, r4, r3
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	464b      	mov	r3, r9
 8003658:	eb45 0303 	adc.w	r3, r5, r3
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800366a:	4629      	mov	r1, r5
 800366c:	028b      	lsls	r3, r1, #10
 800366e:	4621      	mov	r1, r4
 8003670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003674:	4621      	mov	r1, r4
 8003676:	028a      	lsls	r2, r1, #10
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003680:	2200      	movs	r2, #0
 8003682:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003684:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003686:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800368a:	f7fd f9ff 	bl	8000a8c <__aeabi_uldivmod>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4613      	mov	r3, r2
 8003694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003698:	4b0d      	ldr	r3, [pc, #52]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	0f1b      	lsrs	r3, r3, #28
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80036a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036b6:	e003      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80036ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	37b8      	adds	r7, #184	@ 0xb8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800
 80036d4:	00f42400 	.word	0x00f42400

080036d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e28d      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8083 	beq.w	80037fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036f8:	4b94      	ldr	r3, [pc, #592]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b04      	cmp	r3, #4
 8003702:	d019      	beq.n	8003738 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003704:	4b91      	ldr	r3, [pc, #580]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
        || \
 800370c:	2b08      	cmp	r3, #8
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003710:	4b8e      	ldr	r3, [pc, #568]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003718:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800371c:	d00c      	beq.n	8003738 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371e:	4b8b      	ldr	r3, [pc, #556]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003726:	2b0c      	cmp	r3, #12
 8003728:	d112      	bne.n	8003750 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372a:	4b88      	ldr	r3, [pc, #544]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003736:	d10b      	bne.n	8003750 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003738:	4b84      	ldr	r3, [pc, #528]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d05b      	beq.n	80037fc <HAL_RCC_OscConfig+0x124>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d157      	bne.n	80037fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e25a      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003758:	d106      	bne.n	8003768 <HAL_RCC_OscConfig+0x90>
 800375a:	4b7c      	ldr	r3, [pc, #496]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a7b      	ldr	r2, [pc, #492]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e01d      	b.n	80037a4 <HAL_RCC_OscConfig+0xcc>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0xb4>
 8003772:	4b76      	ldr	r3, [pc, #472]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a75      	ldr	r2, [pc, #468]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b73      	ldr	r3, [pc, #460]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a72      	ldr	r2, [pc, #456]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0xcc>
 800378c:	4b6f      	ldr	r3, [pc, #444]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a6e      	ldr	r2, [pc, #440]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b6c      	ldr	r3, [pc, #432]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a6b      	ldr	r2, [pc, #428]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 800379e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe fc4a 	bl	8002044 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fe fc46 	bl	8002044 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	@ 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e21f      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b61      	ldr	r3, [pc, #388]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0xdc>
 80037d2:	e014      	b.n	80037fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fc36 	bl	8002044 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fe fc32 	bl	8002044 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	@ 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e20b      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ee:	4b57      	ldr	r3, [pc, #348]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x104>
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d06f      	beq.n	80038ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800380a:	4b50      	ldr	r3, [pc, #320]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b00      	cmp	r3, #0
 8003814:	d017      	beq.n	8003846 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003816:	4b4d      	ldr	r3, [pc, #308]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
        || \
 800381e:	2b08      	cmp	r3, #8
 8003820:	d105      	bne.n	800382e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003822:	4b4a      	ldr	r3, [pc, #296]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382e:	4b47      	ldr	r3, [pc, #284]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003836:	2b0c      	cmp	r3, #12
 8003838:	d11c      	bne.n	8003874 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383a:	4b44      	ldr	r3, [pc, #272]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d116      	bne.n	8003874 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	4b41      	ldr	r3, [pc, #260]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_RCC_OscConfig+0x186>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e1d3      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385e:	4b3b      	ldr	r3, [pc, #236]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4937      	ldr	r1, [pc, #220]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	e03a      	b.n	80038ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387c:	4b34      	ldr	r3, [pc, #208]	@ (8003950 <HAL_RCC_OscConfig+0x278>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fe fbdf 	bl	8002044 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388a:	f7fe fbdb 	bl	8002044 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e1b4      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	4b2b      	ldr	r3, [pc, #172]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b28      	ldr	r3, [pc, #160]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4925      	ldr	r1, [pc, #148]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038be:	4b24      	ldr	r3, [pc, #144]	@ (8003950 <HAL_RCC_OscConfig+0x278>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fe fbbe 	bl	8002044 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038cc:	f7fe fbba 	bl	8002044 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e193      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d036      	beq.n	8003964 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fe fb9e 	bl	8002044 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390c:	f7fe fb9a 	bl	8002044 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e173      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <HAL_RCC_OscConfig+0x274>)
 8003920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x234>
 800392a:	e01b      	b.n	8003964 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392c:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <HAL_RCC_OscConfig+0x27c>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fe fb87 	bl	8002044 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	e00e      	b.n	8003958 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393a:	f7fe fb83 	bl	8002044 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d907      	bls.n	8003958 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e15c      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
 800394c:	40023800 	.word	0x40023800
 8003950:	42470000 	.word	0x42470000
 8003954:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	4b8a      	ldr	r3, [pc, #552]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 800395a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ea      	bne.n	800393a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8097 	beq.w	8003aa0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003976:	4b83      	ldr	r3, [pc, #524]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	4b7f      	ldr	r3, [pc, #508]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	@ 0x40
 8003992:	4b7c      	ldr	r3, [pc, #496]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b79      	ldr	r3, [pc, #484]	@ (8003b88 <HAL_RCC_OscConfig+0x4b0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b76      	ldr	r3, [pc, #472]	@ (8003b88 <HAL_RCC_OscConfig+0x4b0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a75      	ldr	r2, [pc, #468]	@ (8003b88 <HAL_RCC_OscConfig+0x4b0>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fe fb43 	bl	8002044 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fe fb3f 	bl	8002044 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e118      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003b88 <HAL_RCC_OscConfig+0x4b0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x31e>
 80039e8:	4b66      	ldr	r3, [pc, #408]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ec:	4a65      	ldr	r2, [pc, #404]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039f4:	e01c      	b.n	8003a30 <HAL_RCC_OscConfig+0x358>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x340>
 80039fe:	4b61      	ldr	r3, [pc, #388]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a02:	4a60      	ldr	r2, [pc, #384]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0e:	4a5d      	ldr	r2, [pc, #372]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0x358>
 8003a18:	4b5a      	ldr	r3, [pc, #360]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1c:	4a59      	ldr	r2, [pc, #356]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a24:	4b57      	ldr	r3, [pc, #348]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a28:	4a56      	ldr	r2, [pc, #344]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a2a:	f023 0304 	bic.w	r3, r3, #4
 8003a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fe fb04 	bl	8002044 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fe fb00 	bl	8002044 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0d7      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a56:	4b4b      	ldr	r3, [pc, #300]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ee      	beq.n	8003a40 <HAL_RCC_OscConfig+0x368>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7fe faee 	bl	8002044 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe faea 	bl	8002044 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0c1      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a82:	4b40      	ldr	r3, [pc, #256]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ee      	bne.n	8003a6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a94:	4b3b      	ldr	r3, [pc, #236]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	4a3a      	ldr	r2, [pc, #232]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80ad 	beq.w	8003c04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aaa:	4b36      	ldr	r3, [pc, #216]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d060      	beq.n	8003b78 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d145      	bne.n	8003b4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b33      	ldr	r3, [pc, #204]	@ (8003b8c <HAL_RCC_OscConfig+0x4b4>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fe fabe 	bl	8002044 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fe faba 	bl	8002044 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e093      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	4b29      	ldr	r3, [pc, #164]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	019b      	lsls	r3, r3, #6
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	3b01      	subs	r3, #1
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b14:	071b      	lsls	r3, r3, #28
 8003b16:	491b      	ldr	r1, [pc, #108]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b8c <HAL_RCC_OscConfig+0x4b4>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b22:	f7fe fa8f 	bl	8002044 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2a:	f7fe fa8b 	bl	8002044 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e064      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3c:	4b11      	ldr	r3, [pc, #68]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x452>
 8003b48:	e05c      	b.n	8003c04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4a:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <HAL_RCC_OscConfig+0x4b4>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fe fa78 	bl	8002044 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b58:	f7fe fa74 	bl	8002044 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e04d      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <HAL_RCC_OscConfig+0x4ac>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x480>
 8003b76:	e045      	b.n	8003c04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d107      	bne.n	8003b90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e040      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
 8003b84:	40023800 	.word	0x40023800
 8003b88:	40007000 	.word	0x40007000
 8003b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b90:	4b1f      	ldr	r3, [pc, #124]	@ (8003c10 <HAL_RCC_OscConfig+0x538>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d030      	beq.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d129      	bne.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d122      	bne.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d119      	bne.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d10f      	bne.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d107      	bne.n	8003c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800

08003c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e041      	b.n	8003caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fda6 	bl	800178c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 feba 	bl	80049cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d001      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e04e      	b.n	8003d6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a23      	ldr	r2, [pc, #140]	@ (8003d78 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x80>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf6:	d01d      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x80>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8003d7c <HAL_TIM_Base_Start_IT+0xc8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x80>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1e      	ldr	r2, [pc, #120]	@ (8003d80 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x80>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1c      	ldr	r2, [pc, #112]	@ (8003d84 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x80>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003d88 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x80>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a19      	ldr	r2, [pc, #100]	@ (8003d8c <HAL_TIM_Base_Start_IT+0xd8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x80>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a18      	ldr	r2, [pc, #96]	@ (8003d90 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d111      	bne.n	8003d58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d010      	beq.n	8003d68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d56:	e007      	b.n	8003d68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800
 8003d84:	40000c00 	.word	0x40000c00
 8003d88:	40010400 	.word	0x40010400
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	40001800 	.word	0x40001800

08003d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e041      	b.n	8003e2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f839 	bl	8003e32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f000 fdfa 	bl	80049cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <HAL_TIM_PWM_Start+0x24>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	e022      	b.n	8003eb2 <HAL_TIM_PWM_Start+0x6a>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d109      	bne.n	8003e86 <HAL_TIM_PWM_Start+0x3e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	bf14      	ite	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	2300      	moveq	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	e015      	b.n	8003eb2 <HAL_TIM_PWM_Start+0x6a>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d109      	bne.n	8003ea0 <HAL_TIM_PWM_Start+0x58>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e008      	b.n	8003eb2 <HAL_TIM_PWM_Start+0x6a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e07c      	b.n	8003fb4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d104      	bne.n	8003eca <HAL_TIM_PWM_Start+0x82>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ec8:	e013      	b.n	8003ef2 <HAL_TIM_PWM_Start+0xaa>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d104      	bne.n	8003eda <HAL_TIM_PWM_Start+0x92>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ed8:	e00b      	b.n	8003ef2 <HAL_TIM_PWM_Start+0xaa>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d104      	bne.n	8003eea <HAL_TIM_PWM_Start+0xa2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ee8:	e003      	b.n	8003ef2 <HAL_TIM_PWM_Start+0xaa>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	6839      	ldr	r1, [r7, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 f986 	bl	800520c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2d      	ldr	r2, [pc, #180]	@ (8003fbc <HAL_TIM_PWM_Start+0x174>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_TIM_PWM_Start+0xcc>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc0 <HAL_TIM_PWM_Start+0x178>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <HAL_TIM_PWM_Start+0xd0>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <HAL_TIM_PWM_Start+0xd2>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a22      	ldr	r2, [pc, #136]	@ (8003fbc <HAL_TIM_PWM_Start+0x174>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d022      	beq.n	8003f7e <HAL_TIM_PWM_Start+0x136>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f40:	d01d      	beq.n	8003f7e <HAL_TIM_PWM_Start+0x136>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc4 <HAL_TIM_PWM_Start+0x17c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d018      	beq.n	8003f7e <HAL_TIM_PWM_Start+0x136>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc8 <HAL_TIM_PWM_Start+0x180>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_TIM_PWM_Start+0x136>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fcc <HAL_TIM_PWM_Start+0x184>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_TIM_PWM_Start+0x136>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a16      	ldr	r2, [pc, #88]	@ (8003fc0 <HAL_TIM_PWM_Start+0x178>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_TIM_PWM_Start+0x136>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a18      	ldr	r2, [pc, #96]	@ (8003fd0 <HAL_TIM_PWM_Start+0x188>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_TIM_PWM_Start+0x136>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a16      	ldr	r2, [pc, #88]	@ (8003fd4 <HAL_TIM_PWM_Start+0x18c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d111      	bne.n	8003fa2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b06      	cmp	r3, #6
 8003f8e:	d010      	beq.n	8003fb2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	e007      	b.n	8003fb2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0201 	orr.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40010400 	.word	0x40010400
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40000c00 	.word	0x40000c00
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40001800 	.word	0x40001800

08003fd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e041      	b.n	800406e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f839 	bl	8004076 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 fcd8 	bl	80049cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d104      	bne.n	80040aa <HAL_TIM_IC_Start_IT+0x1e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	e013      	b.n	80040d2 <HAL_TIM_IC_Start_IT+0x46>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_IC_Start_IT+0x2e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	e00b      	b.n	80040d2 <HAL_TIM_IC_Start_IT+0x46>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d104      	bne.n	80040ca <HAL_TIM_IC_Start_IT+0x3e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e003      	b.n	80040d2 <HAL_TIM_IC_Start_IT+0x46>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <HAL_TIM_IC_Start_IT+0x58>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e013      	b.n	800410c <HAL_TIM_IC_Start_IT+0x80>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d104      	bne.n	80040f4 <HAL_TIM_IC_Start_IT+0x68>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e00b      	b.n	800410c <HAL_TIM_IC_Start_IT+0x80>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d104      	bne.n	8004104 <HAL_TIM_IC_Start_IT+0x78>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e003      	b.n	800410c <HAL_TIM_IC_Start_IT+0x80>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800410a:	b2db      	uxtb	r3, r3
 800410c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800410e:	7bbb      	ldrb	r3, [r7, #14]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d102      	bne.n	800411a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004114:	7b7b      	ldrb	r3, [r7, #13]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d001      	beq.n	800411e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e0cc      	b.n	80042b8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <HAL_TIM_IC_Start_IT+0xa2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800412c:	e013      	b.n	8004156 <HAL_TIM_IC_Start_IT+0xca>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d104      	bne.n	800413e <HAL_TIM_IC_Start_IT+0xb2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800413c:	e00b      	b.n	8004156 <HAL_TIM_IC_Start_IT+0xca>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b08      	cmp	r3, #8
 8004142:	d104      	bne.n	800414e <HAL_TIM_IC_Start_IT+0xc2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800414c:	e003      	b.n	8004156 <HAL_TIM_IC_Start_IT+0xca>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <HAL_TIM_IC_Start_IT+0xda>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004164:	e013      	b.n	800418e <HAL_TIM_IC_Start_IT+0x102>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d104      	bne.n	8004176 <HAL_TIM_IC_Start_IT+0xea>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004174:	e00b      	b.n	800418e <HAL_TIM_IC_Start_IT+0x102>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d104      	bne.n	8004186 <HAL_TIM_IC_Start_IT+0xfa>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004184:	e003      	b.n	800418e <HAL_TIM_IC_Start_IT+0x102>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b0c      	cmp	r3, #12
 8004192:	d841      	bhi.n	8004218 <HAL_TIM_IC_Start_IT+0x18c>
 8004194:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <HAL_TIM_IC_Start_IT+0x110>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041d1 	.word	0x080041d1
 80041a0:	08004219 	.word	0x08004219
 80041a4:	08004219 	.word	0x08004219
 80041a8:	08004219 	.word	0x08004219
 80041ac:	080041e3 	.word	0x080041e3
 80041b0:	08004219 	.word	0x08004219
 80041b4:	08004219 	.word	0x08004219
 80041b8:	08004219 	.word	0x08004219
 80041bc:	080041f5 	.word	0x080041f5
 80041c0:	08004219 	.word	0x08004219
 80041c4:	08004219 	.word	0x08004219
 80041c8:	08004219 	.word	0x08004219
 80041cc:	08004207 	.word	0x08004207
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0202 	orr.w	r2, r2, #2
 80041de:	60da      	str	r2, [r3, #12]
      break;
 80041e0:	e01d      	b.n	800421e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0204 	orr.w	r2, r2, #4
 80041f0:	60da      	str	r2, [r3, #12]
      break;
 80041f2:	e014      	b.n	800421e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0208 	orr.w	r2, r2, #8
 8004202:	60da      	str	r2, [r3, #12]
      break;
 8004204:	e00b      	b.n	800421e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0210 	orr.w	r2, r2, #16
 8004214:	60da      	str	r2, [r3, #12]
      break;
 8004216:	e002      	b.n	800421e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      break;
 800421c:	bf00      	nop
  }

  if (status == HAL_OK)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d148      	bne.n	80042b6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2201      	movs	r2, #1
 800422a:	6839      	ldr	r1, [r7, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 ffed 	bl	800520c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a22      	ldr	r2, [pc, #136]	@ (80042c0 <HAL_TIM_IC_Start_IT+0x234>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d022      	beq.n	8004282 <HAL_TIM_IC_Start_IT+0x1f6>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004244:	d01d      	beq.n	8004282 <HAL_TIM_IC_Start_IT+0x1f6>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1e      	ldr	r2, [pc, #120]	@ (80042c4 <HAL_TIM_IC_Start_IT+0x238>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d018      	beq.n	8004282 <HAL_TIM_IC_Start_IT+0x1f6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1c      	ldr	r2, [pc, #112]	@ (80042c8 <HAL_TIM_IC_Start_IT+0x23c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <HAL_TIM_IC_Start_IT+0x1f6>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1b      	ldr	r2, [pc, #108]	@ (80042cc <HAL_TIM_IC_Start_IT+0x240>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00e      	beq.n	8004282 <HAL_TIM_IC_Start_IT+0x1f6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a19      	ldr	r2, [pc, #100]	@ (80042d0 <HAL_TIM_IC_Start_IT+0x244>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d009      	beq.n	8004282 <HAL_TIM_IC_Start_IT+0x1f6>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a18      	ldr	r2, [pc, #96]	@ (80042d4 <HAL_TIM_IC_Start_IT+0x248>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_TIM_IC_Start_IT+0x1f6>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a16      	ldr	r2, [pc, #88]	@ (80042d8 <HAL_TIM_IC_Start_IT+0x24c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d111      	bne.n	80042a6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b06      	cmp	r3, #6
 8004292:	d010      	beq.n	80042b6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a4:	e007      	b.n	80042b6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40010400 	.word	0x40010400
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40001800 	.word	0x40001800

080042dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d020      	beq.n	8004340 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01b      	beq.n	8004340 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0202 	mvn.w	r2, #2
 8004310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc fd9c 	bl	8000e64 <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fb2e 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fb35 	bl	80049a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d020      	beq.n	800438c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01b      	beq.n	800438c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0204 	mvn.w	r2, #4
 800435c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fc fd76 	bl	8000e64 <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fb08 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fb0f 	bl	80049a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d020      	beq.n	80043d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01b      	beq.n	80043d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0208 	mvn.w	r2, #8
 80043a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2204      	movs	r2, #4
 80043ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fc fd50 	bl	8000e64 <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fae2 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fae9 	bl	80049a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d020      	beq.n	8004424 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01b      	beq.n	8004424 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0210 	mvn.w	r2, #16
 80043f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2208      	movs	r2, #8
 80043fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc fd2a 	bl	8000e64 <HAL_TIM_IC_CaptureCallback>
 8004410:	e005      	b.n	800441e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fabc 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fac3 	bl	80049a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00c      	beq.n	8004448 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d007      	beq.n	8004448 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0201 	mvn.w	r2, #1
 8004440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd fcae 	bl	8001da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00c      	beq.n	800446c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 ff7c 	bl	8005364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00c      	beq.n	8004490 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa94 	bl	80049b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00c      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0220 	mvn.w	r2, #32
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 ff4e 	bl	8005350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_TIM_IC_ConfigChannel+0x1e>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e088      	b.n	80045ec <HAL_TIM_IC_ConfigChannel+0x130>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11b      	bne.n	8004520 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80044f8:	f000 fcc4 	bl	8004e84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 020c 	bic.w	r2, r2, #12
 800450a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6999      	ldr	r1, [r3, #24]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	619a      	str	r2, [r3, #24]
 800451e:	e060      	b.n	80045e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b04      	cmp	r3, #4
 8004524:	d11c      	bne.n	8004560 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004536:	f000 fd48 	bl	8004fca <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699a      	ldr	r2, [r3, #24]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004548:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6999      	ldr	r1, [r3, #24]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	021a      	lsls	r2, r3, #8
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	619a      	str	r2, [r3, #24]
 800455e:	e040      	b.n	80045e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b08      	cmp	r3, #8
 8004564:	d11b      	bne.n	800459e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004576:	f000 fd95 	bl	80050a4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 020c 	bic.w	r2, r2, #12
 8004588:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	61da      	str	r2, [r3, #28]
 800459c:	e021      	b.n	80045e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b0c      	cmp	r3, #12
 80045a2:	d11c      	bne.n	80045de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80045b4:	f000 fdb2 	bl	800511c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80045c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69d9      	ldr	r1, [r3, #28]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	021a      	lsls	r2, r3, #8
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	61da      	str	r2, [r3, #28]
 80045dc:	e001      	b.n	80045e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800460e:	2302      	movs	r3, #2
 8004610:	e0ae      	b.n	8004770 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b0c      	cmp	r3, #12
 800461e:	f200 809f 	bhi.w	8004760 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004622:	a201      	add	r2, pc, #4	@ (adr r2, 8004628 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004628:	0800465d 	.word	0x0800465d
 800462c:	08004761 	.word	0x08004761
 8004630:	08004761 	.word	0x08004761
 8004634:	08004761 	.word	0x08004761
 8004638:	0800469d 	.word	0x0800469d
 800463c:	08004761 	.word	0x08004761
 8004640:	08004761 	.word	0x08004761
 8004644:	08004761 	.word	0x08004761
 8004648:	080046df 	.word	0x080046df
 800464c:	08004761 	.word	0x08004761
 8004650:	08004761 	.word	0x08004761
 8004654:	08004761 	.word	0x08004761
 8004658:	0800471f 	.word	0x0800471f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fa5e 	bl	8004b24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0208 	orr.w	r2, r2, #8
 8004676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0204 	bic.w	r2, r2, #4
 8004686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6999      	ldr	r1, [r3, #24]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	619a      	str	r2, [r3, #24]
      break;
 800469a:	e064      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 faae 	bl	8004c04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	021a      	lsls	r2, r3, #8
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	619a      	str	r2, [r3, #24]
      break;
 80046dc:	e043      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fb03 	bl	8004cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0208 	orr.w	r2, r2, #8
 80046f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0204 	bic.w	r2, r2, #4
 8004708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69d9      	ldr	r1, [r3, #28]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	61da      	str	r2, [r3, #28]
      break;
 800471c:	e023      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fb57 	bl	8004dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69d9      	ldr	r1, [r3, #28]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	021a      	lsls	r2, r3, #8
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	61da      	str	r2, [r3, #28]
      break;
 800475e:	e002      	b.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	75fb      	strb	r3, [r7, #23]
      break;
 8004764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800476e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_TIM_ConfigClockSource+0x1c>
 8004790:	2302      	movs	r3, #2
 8004792:	e0b4      	b.n	80048fe <HAL_TIM_ConfigClockSource+0x186>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047cc:	d03e      	beq.n	800484c <HAL_TIM_ConfigClockSource+0xd4>
 80047ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047d2:	f200 8087 	bhi.w	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047da:	f000 8086 	beq.w	80048ea <HAL_TIM_ConfigClockSource+0x172>
 80047de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e2:	d87f      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047e4:	2b70      	cmp	r3, #112	@ 0x70
 80047e6:	d01a      	beq.n	800481e <HAL_TIM_ConfigClockSource+0xa6>
 80047e8:	2b70      	cmp	r3, #112	@ 0x70
 80047ea:	d87b      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ec:	2b60      	cmp	r3, #96	@ 0x60
 80047ee:	d050      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0x11a>
 80047f0:	2b60      	cmp	r3, #96	@ 0x60
 80047f2:	d877      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b50      	cmp	r3, #80	@ 0x50
 80047f6:	d03c      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0xfa>
 80047f8:	2b50      	cmp	r3, #80	@ 0x50
 80047fa:	d873      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b40      	cmp	r3, #64	@ 0x40
 80047fe:	d058      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004800:	2b40      	cmp	r3, #64	@ 0x40
 8004802:	d86f      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b30      	cmp	r3, #48	@ 0x30
 8004806:	d064      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004808:	2b30      	cmp	r3, #48	@ 0x30
 800480a:	d86b      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b20      	cmp	r3, #32
 800480e:	d060      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d867      	bhi.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d05c      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004818:	2b10      	cmp	r3, #16
 800481a:	d05a      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x15a>
 800481c:	e062      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800482e:	f000 fccd 	bl	80051cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	609a      	str	r2, [r3, #8]
      break;
 800484a:	e04f      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800485c:	f000 fcb6 	bl	80051cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800486e:	609a      	str	r2, [r3, #8]
      break;
 8004870:	e03c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	461a      	mov	r2, r3
 8004880:	f000 fb74 	bl	8004f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2150      	movs	r1, #80	@ 0x50
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fc83 	bl	8005196 <TIM_ITRx_SetConfig>
      break;
 8004890:	e02c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800489e:	461a      	mov	r2, r3
 80048a0:	f000 fbd0 	bl	8005044 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2160      	movs	r1, #96	@ 0x60
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fc73 	bl	8005196 <TIM_ITRx_SetConfig>
      break;
 80048b0:	e01c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048be:	461a      	mov	r2, r3
 80048c0:	f000 fb54 	bl	8004f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2140      	movs	r1, #64	@ 0x40
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fc63 	bl	8005196 <TIM_ITRx_SetConfig>
      break;
 80048d0:	e00c      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f000 fc5a 	bl	8005196 <TIM_ITRx_SetConfig>
      break;
 80048e2:	e003      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      break;
 80048e8:	e000      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b0c      	cmp	r3, #12
 800491a:	d831      	bhi.n	8004980 <HAL_TIM_ReadCapturedValue+0x78>
 800491c:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <HAL_TIM_ReadCapturedValue+0x1c>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004959 	.word	0x08004959
 8004928:	08004981 	.word	0x08004981
 800492c:	08004981 	.word	0x08004981
 8004930:	08004981 	.word	0x08004981
 8004934:	08004963 	.word	0x08004963
 8004938:	08004981 	.word	0x08004981
 800493c:	08004981 	.word	0x08004981
 8004940:	08004981 	.word	0x08004981
 8004944:	0800496d 	.word	0x0800496d
 8004948:	08004981 	.word	0x08004981
 800494c:	08004981 	.word	0x08004981
 8004950:	08004981 	.word	0x08004981
 8004954:	08004977 	.word	0x08004977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800495e:	60fb      	str	r3, [r7, #12]

      break;
 8004960:	e00f      	b.n	8004982 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004968:	60fb      	str	r3, [r7, #12]

      break;
 800496a:	e00a      	b.n	8004982 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004972:	60fb      	str	r3, [r7, #12]

      break;
 8004974:	e005      	b.n	8004982 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497c:	60fb      	str	r3, [r7, #12]

      break;
 800497e:	e000      	b.n	8004982 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004980:	bf00      	nop
  }

  return tmpreg;
 8004982:	68fb      	ldr	r3, [r7, #12]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a46      	ldr	r2, [pc, #280]	@ (8004af8 <TIM_Base_SetConfig+0x12c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ea:	d00f      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a43      	ldr	r2, [pc, #268]	@ (8004afc <TIM_Base_SetConfig+0x130>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00b      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a42      	ldr	r2, [pc, #264]	@ (8004b00 <TIM_Base_SetConfig+0x134>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a41      	ldr	r2, [pc, #260]	@ (8004b04 <TIM_Base_SetConfig+0x138>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a40      	ldr	r2, [pc, #256]	@ (8004b08 <TIM_Base_SetConfig+0x13c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d108      	bne.n	8004a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a35      	ldr	r2, [pc, #212]	@ (8004af8 <TIM_Base_SetConfig+0x12c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02b      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2c:	d027      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a32      	ldr	r2, [pc, #200]	@ (8004afc <TIM_Base_SetConfig+0x130>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d023      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a31      	ldr	r2, [pc, #196]	@ (8004b00 <TIM_Base_SetConfig+0x134>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01f      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a30      	ldr	r2, [pc, #192]	@ (8004b04 <TIM_Base_SetConfig+0x138>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d01b      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2f      	ldr	r2, [pc, #188]	@ (8004b08 <TIM_Base_SetConfig+0x13c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d017      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2e      	ldr	r2, [pc, #184]	@ (8004b0c <TIM_Base_SetConfig+0x140>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a2d      	ldr	r2, [pc, #180]	@ (8004b10 <TIM_Base_SetConfig+0x144>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00f      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a2c      	ldr	r2, [pc, #176]	@ (8004b14 <TIM_Base_SetConfig+0x148>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00b      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2b      	ldr	r2, [pc, #172]	@ (8004b18 <TIM_Base_SetConfig+0x14c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2a      	ldr	r2, [pc, #168]	@ (8004b1c <TIM_Base_SetConfig+0x150>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d003      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a29      	ldr	r2, [pc, #164]	@ (8004b20 <TIM_Base_SetConfig+0x154>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d108      	bne.n	8004a90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a10      	ldr	r2, [pc, #64]	@ (8004af8 <TIM_Base_SetConfig+0x12c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_Base_SetConfig+0xf8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a12      	ldr	r2, [pc, #72]	@ (8004b08 <TIM_Base_SetConfig+0x13c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d103      	bne.n	8004acc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d105      	bne.n	8004aea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f023 0201 	bic.w	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	611a      	str	r2, [r3, #16]
  }
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40010400 	.word	0x40010400
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800
 8004b18:	40001800 	.word	0x40001800
 8004b1c:	40001c00 	.word	0x40001c00
 8004b20:	40002000 	.word	0x40002000

08004b24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	f023 0201 	bic.w	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0303 	bic.w	r3, r3, #3
 8004b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f023 0302 	bic.w	r3, r3, #2
 8004b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a20      	ldr	r2, [pc, #128]	@ (8004bfc <TIM_OC1_SetConfig+0xd8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_OC1_SetConfig+0x64>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a1f      	ldr	r2, [pc, #124]	@ (8004c00 <TIM_OC1_SetConfig+0xdc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d10c      	bne.n	8004ba2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0308 	bic.w	r3, r3, #8
 8004b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f023 0304 	bic.w	r3, r3, #4
 8004ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a15      	ldr	r2, [pc, #84]	@ (8004bfc <TIM_OC1_SetConfig+0xd8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_OC1_SetConfig+0x8e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a14      	ldr	r2, [pc, #80]	@ (8004c00 <TIM_OC1_SetConfig+0xdc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d111      	bne.n	8004bd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40010000 	.word	0x40010000
 8004c00:	40010400 	.word	0x40010400

08004c04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f023 0210 	bic.w	r2, r3, #16
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f023 0320 	bic.w	r3, r3, #32
 8004c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a22      	ldr	r2, [pc, #136]	@ (8004ce8 <TIM_OC2_SetConfig+0xe4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_OC2_SetConfig+0x68>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a21      	ldr	r2, [pc, #132]	@ (8004cec <TIM_OC2_SetConfig+0xe8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d10d      	bne.n	8004c88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ce8 <TIM_OC2_SetConfig+0xe4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_OC2_SetConfig+0x94>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a16      	ldr	r2, [pc, #88]	@ (8004cec <TIM_OC2_SetConfig+0xe8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d113      	bne.n	8004cc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40010400 	.word	0x40010400

08004cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a21      	ldr	r2, [pc, #132]	@ (8004dd0 <TIM_OC3_SetConfig+0xe0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_OC3_SetConfig+0x66>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a20      	ldr	r2, [pc, #128]	@ (8004dd4 <TIM_OC3_SetConfig+0xe4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10d      	bne.n	8004d72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a16      	ldr	r2, [pc, #88]	@ (8004dd0 <TIM_OC3_SetConfig+0xe0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_OC3_SetConfig+0x92>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a15      	ldr	r2, [pc, #84]	@ (8004dd4 <TIM_OC3_SetConfig+0xe4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d113      	bne.n	8004daa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40010400 	.word	0x40010400

08004dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	021b      	lsls	r3, r3, #8
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	031b      	lsls	r3, r3, #12
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a12      	ldr	r2, [pc, #72]	@ (8004e7c <TIM_OC4_SetConfig+0xa4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d003      	beq.n	8004e40 <TIM_OC4_SetConfig+0x68>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a11      	ldr	r2, [pc, #68]	@ (8004e80 <TIM_OC4_SetConfig+0xa8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d109      	bne.n	8004e54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	019b      	lsls	r3, r3, #6
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	621a      	str	r2, [r3, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40010400 	.word	0x40010400

08004e84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f023 0201 	bic.w	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a28      	ldr	r2, [pc, #160]	@ (8004f50 <TIM_TI1_SetConfig+0xcc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d01b      	beq.n	8004eea <TIM_TI1_SetConfig+0x66>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb8:	d017      	beq.n	8004eea <TIM_TI1_SetConfig+0x66>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a25      	ldr	r2, [pc, #148]	@ (8004f54 <TIM_TI1_SetConfig+0xd0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <TIM_TI1_SetConfig+0x66>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4a24      	ldr	r2, [pc, #144]	@ (8004f58 <TIM_TI1_SetConfig+0xd4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00f      	beq.n	8004eea <TIM_TI1_SetConfig+0x66>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a23      	ldr	r2, [pc, #140]	@ (8004f5c <TIM_TI1_SetConfig+0xd8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00b      	beq.n	8004eea <TIM_TI1_SetConfig+0x66>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a22      	ldr	r2, [pc, #136]	@ (8004f60 <TIM_TI1_SetConfig+0xdc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <TIM_TI1_SetConfig+0x66>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a21      	ldr	r2, [pc, #132]	@ (8004f64 <TIM_TI1_SetConfig+0xe0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_TI1_SetConfig+0x66>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a20      	ldr	r2, [pc, #128]	@ (8004f68 <TIM_TI1_SetConfig+0xe4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d101      	bne.n	8004eee <TIM_TI1_SetConfig+0x6a>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <TIM_TI1_SetConfig+0x6c>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 0303 	bic.w	r3, r3, #3
 8004efa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e003      	b.n	8004f0e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f023 030a 	bic.w	r3, r3, #10
 8004f28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f003 030a 	and.w	r3, r3, #10
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40010400 	.word	0x40010400
 8004f64:	40014000 	.word	0x40014000
 8004f68:	40001800 	.word	0x40001800

08004f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f023 0201 	bic.w	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 030a 	bic.w	r3, r3, #10
 8004fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b087      	sub	sp, #28
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f023 0210 	bic.w	r2, r3, #16
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	031b      	lsls	r3, r3, #12
 800500e:	b29b      	uxth	r3, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800501c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	621a      	str	r2, [r3, #32]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f023 0210 	bic.w	r2, r3, #16
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800506e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	031b      	lsls	r3, r3, #12
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005080:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	621a      	str	r2, [r3, #32]
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f023 0303 	bic.w	r3, r3, #3
 80050d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80050f4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	621a      	str	r2, [r3, #32]
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005148:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800515a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	031b      	lsls	r3, r3, #12
 8005160:	b29b      	uxth	r3, r3
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800516e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	031b      	lsls	r3, r3, #12
 8005174:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f043 0307 	orr.w	r3, r3, #7
 80051b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	609a      	str	r2, [r3, #8]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	021a      	lsls	r2, r3, #8
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	609a      	str	r2, [r3, #8]
}
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	2201      	movs	r2, #1
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1a      	ldr	r2, [r3, #32]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	43db      	mvns	r3, r3
 800522e:	401a      	ands	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1a      	ldr	r2, [r3, #32]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	fa01 f303 	lsl.w	r3, r1, r3
 8005244:	431a      	orrs	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800526c:	2302      	movs	r3, #2
 800526e:	e05a      	b.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a21      	ldr	r2, [pc, #132]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052bc:	d01d      	beq.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d018      	beq.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1b      	ldr	r2, [pc, #108]	@ (800533c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a18      	ldr	r2, [pc, #96]	@ (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d009      	beq.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a17      	ldr	r2, [pc, #92]	@ (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d004      	beq.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a15      	ldr	r2, [pc, #84]	@ (800534c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d10c      	bne.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	4313      	orrs	r3, r2
 800530a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40010000 	.word	0x40010000
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800
 8005340:	40000c00 	.word	0x40000c00
 8005344:	40010400 	.word	0x40010400
 8005348:	40014000 	.word	0x40014000
 800534c:	40001800 	.word	0x40001800

08005350 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e042      	b.n	8005410 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc faec 	bl	800197c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2224      	movs	r2, #36	@ 0x24
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fdbd 	bl	8005f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	@ 0x28
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b20      	cmp	r3, #32
 8005436:	d175      	bne.n	8005524 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_UART_Transmit+0x2c>
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e06e      	b.n	8005526 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2221      	movs	r2, #33	@ 0x21
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005456:	f7fc fdf5 	bl	8002044 <HAL_GetTick>
 800545a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	88fa      	ldrh	r2, [r7, #6]
 8005460:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	88fa      	ldrh	r2, [r7, #6]
 8005466:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005470:	d108      	bne.n	8005484 <HAL_UART_Transmit+0x6c>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d104      	bne.n	8005484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	e003      	b.n	800548c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800548c:	e02e      	b.n	80054ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2200      	movs	r2, #0
 8005496:	2180      	movs	r1, #128	@ 0x80
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fb1f 	bl	8005adc <UART_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e03a      	b.n	8005526 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10b      	bne.n	80054ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	3302      	adds	r3, #2
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	e007      	b.n	80054de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	781a      	ldrb	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	3301      	adds	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1cb      	bne.n	800548e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2140      	movs	r1, #64	@ 0x40
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 faeb 	bl	8005adc <UART_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e006      	b.n	8005526 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	4613      	mov	r3, r2
 800553a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b20      	cmp	r3, #32
 8005546:	d112      	bne.n	800556e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_UART_Receive_IT+0x26>
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e00b      	b.n	8005570 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800555e:	88fb      	ldrh	r3, [r7, #6]
 8005560:	461a      	mov	r2, r3
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 fb12 	bl	8005b8e <UART_Start_Receive_IT>
 800556a:	4603      	mov	r3, r0
 800556c:	e000      	b.n	8005570 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800556e:	2302      	movs	r3, #2
  }
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b0ba      	sub	sp, #232	@ 0xe8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800559e:	2300      	movs	r3, #0
 80055a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80055b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10f      	bne.n	80055de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <HAL_UART_IRQHandler+0x66>
 80055ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fbf2 	bl	8005dc0 <UART_Receive_IT>
      return;
 80055dc:	e25b      	b.n	8005a96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 80de 	beq.w	80057a4 <HAL_UART_IRQHandler+0x22c>
 80055e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80d1 	beq.w	80057a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <HAL_UART_IRQHandler+0xae>
 800560e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	f043 0201 	orr.w	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <HAL_UART_IRQHandler+0xd2>
 8005632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005642:	f043 0202 	orr.w	r2, r3, #2
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800564a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00b      	beq.n	800566e <HAL_UART_IRQHandler+0xf6>
 8005656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	f043 0204 	orr.w	r2, r3, #4
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800566e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d011      	beq.n	800569e <HAL_UART_IRQHandler+0x126>
 800567a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d105      	bne.n	8005692 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d005      	beq.n	800569e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005696:	f043 0208 	orr.w	r2, r3, #8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 81f2 	beq.w	8005a8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <HAL_UART_IRQHandler+0x14e>
 80056b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fb7d 	bl	8005dc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d0:	2b40      	cmp	r3, #64	@ 0x40
 80056d2:	bf0c      	ite	eq
 80056d4:	2301      	moveq	r3, #1
 80056d6:	2300      	movne	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d103      	bne.n	80056f2 <HAL_UART_IRQHandler+0x17a>
 80056ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d04f      	beq.n	8005792 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa85 	bl	8005c02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005702:	2b40      	cmp	r3, #64	@ 0x40
 8005704:	d141      	bne.n	800578a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3314      	adds	r3, #20
 800570c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800571c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3314      	adds	r3, #20
 800572e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005732:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800573e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800574a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1d9      	bne.n	8005706 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d013      	beq.n	8005782 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575e:	4a7e      	ldr	r2, [pc, #504]	@ (8005958 <HAL_UART_IRQHandler+0x3e0>)
 8005760:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005766:	4618      	mov	r0, r3
 8005768:	f7fd fa69 	bl	8002c3e <HAL_DMA_Abort_IT>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d016      	beq.n	80057a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800577c:	4610      	mov	r0, r2
 800577e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005780:	e00e      	b.n	80057a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f994 	bl	8005ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005788:	e00a      	b.n	80057a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f990 	bl	8005ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005790:	e006      	b.n	80057a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f98c 	bl	8005ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800579e:	e175      	b.n	8005a8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	bf00      	nop
    return;
 80057a2:	e173      	b.n	8005a8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	f040 814f 	bne.w	8005a4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 8148 	beq.w	8005a4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 8141 	beq.w	8005a4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057ca:	2300      	movs	r3, #0
 80057cc:	60bb      	str	r3, [r7, #8]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60bb      	str	r3, [r7, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	60bb      	str	r3, [r7, #8]
 80057de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ea:	2b40      	cmp	r3, #64	@ 0x40
 80057ec:	f040 80b6 	bne.w	800595c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8145 	beq.w	8005a90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800580a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800580e:	429a      	cmp	r2, r3
 8005810:	f080 813e 	bcs.w	8005a90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800581a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005826:	f000 8088 	beq.w	800593a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005840:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005856:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800585a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005862:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800586e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1d9      	bne.n	800582a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3314      	adds	r3, #20
 800587c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005888:	f023 0301 	bic.w	r3, r3, #1
 800588c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3314      	adds	r3, #20
 8005896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800589a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800589e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e1      	bne.n	8005876 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3314      	adds	r3, #20
 80058b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3314      	adds	r3, #20
 80058d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80058d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80058d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80058e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e3      	bne.n	80058b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	330c      	adds	r3, #12
 80058fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800590a:	f023 0310 	bic.w	r3, r3, #16
 800590e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800591c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800591e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005922:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800592a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e3      	bne.n	80058f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005934:	4618      	mov	r0, r3
 8005936:	f7fd f912 	bl	8002b5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005948:	b29b      	uxth	r3, r3
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	b29b      	uxth	r3, r3
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f8b7 	bl	8005ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005956:	e09b      	b.n	8005a90 <HAL_UART_IRQHandler+0x518>
 8005958:	08005cc9 	.word	0x08005cc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005964:	b29b      	uxth	r3, r3
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 808e 	beq.w	8005a94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8089 	beq.w	8005a94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80059a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80059a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e3      	bne.n	8005982 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3314      	adds	r3, #20
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	623b      	str	r3, [r7, #32]
   return(result);
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3314      	adds	r3, #20
 80059da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80059de:	633a      	str	r2, [r7, #48]	@ 0x30
 80059e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e3      	bne.n	80059ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	330c      	adds	r3, #12
 8005a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0310 	bic.w	r3, r3, #16
 8005a16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a24:	61fa      	str	r2, [r7, #28]
 8005a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	69b9      	ldr	r1, [r7, #24]
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	617b      	str	r3, [r7, #20]
   return(result);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e3      	bne.n	8005a00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f83d 	bl	8005ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a4a:	e023      	b.n	8005a94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d009      	beq.n	8005a6c <HAL_UART_IRQHandler+0x4f4>
 8005a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f943 	bl	8005cf0 <UART_Transmit_IT>
    return;
 8005a6a:	e014      	b.n	8005a96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00e      	beq.n	8005a96 <HAL_UART_IRQHandler+0x51e>
 8005a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f983 	bl	8005d90 <UART_EndTransmit_IT>
    return;
 8005a8a:	e004      	b.n	8005a96 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a8c:	bf00      	nop
 8005a8e:	e002      	b.n	8005a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a90:	bf00      	nop
 8005a92:	e000      	b.n	8005a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a94:	bf00      	nop
  }
}
 8005a96:	37e8      	adds	r7, #232	@ 0xe8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aec:	e03b      	b.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d037      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af6:	f7fc faa5 	bl	8002044 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	6a3a      	ldr	r2, [r7, #32]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d302      	bcc.n	8005b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e03a      	b.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d023      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b80      	cmp	r3, #128	@ 0x80
 8005b22:	d020      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b40      	cmp	r3, #64	@ 0x40
 8005b28:	d01d      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d116      	bne.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f857 	bl	8005c02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2208      	movs	r2, #8
 8005b58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e00f      	b.n	8005b86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d0b4      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	88fa      	ldrh	r2, [r7, #6]
 8005ba6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	88fa      	ldrh	r2, [r7, #6]
 8005bac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2222      	movs	r2, #34	@ 0x22
 8005bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bd2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0220 	orr.w	r2, r2, #32
 8005bf2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b095      	sub	sp, #84	@ 0x54
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e5      	bne.n	8005c0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3314      	adds	r3, #20
 8005c5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e5      	bne.n	8005c3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d119      	bne.n	8005cae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f023 0310 	bic.w	r3, r3, #16
 8005c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c9a:	61ba      	str	r2, [r7, #24]
 8005c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6979      	ldr	r1, [r7, #20]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e5      	bne.n	8005c7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005cbc:	bf00      	nop
 8005cbe:	3754      	adds	r7, #84	@ 0x54
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff fee4 	bl	8005ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b21      	cmp	r3, #33	@ 0x21
 8005d02:	d13e      	bne.n	8005d82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0c:	d114      	bne.n	8005d38 <UART_Transmit_IT+0x48>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d110      	bne.n	8005d38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	1c9a      	adds	r2, r3, #2
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	621a      	str	r2, [r3, #32]
 8005d36:	e008      	b.n	8005d4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	1c59      	adds	r1, r3, #1
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6211      	str	r1, [r2, #32]
 8005d42:	781a      	ldrb	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	4619      	mov	r1, r3
 8005d58:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10f      	bne.n	8005d7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e000      	b.n	8005d84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005da6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff fe73 	bl	8005a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08c      	sub	sp, #48	@ 0x30
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b22      	cmp	r3, #34	@ 0x22
 8005dd2:	f040 80ae 	bne.w	8005f32 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dde:	d117      	bne.n	8005e10 <UART_Receive_IT+0x50>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d113      	bne.n	8005e10 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e08:	1c9a      	adds	r2, r3, #2
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e0e:	e026      	b.n	8005e5e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e22:	d007      	beq.n	8005e34 <UART_Receive_IT+0x74>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <UART_Receive_IT+0x82>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	e008      	b.n	8005e54 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e52:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d15d      	bne.n	8005f2e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0220 	bic.w	r2, r2, #32
 8005e80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695a      	ldr	r2, [r3, #20]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d135      	bne.n	8005f24 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	330c      	adds	r3, #12
 8005ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f023 0310 	bic.w	r3, r3, #16
 8005ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	330c      	adds	r3, #12
 8005edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ede:	623a      	str	r2, [r7, #32]
 8005ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	69f9      	ldr	r1, [r7, #28]
 8005ee4:	6a3a      	ldr	r2, [r7, #32]
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e5      	bne.n	8005ebe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0310 	and.w	r3, r3, #16
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d10a      	bne.n	8005f16 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff fdd1 	bl	8005ac4 <HAL_UARTEx_RxEventCallback>
 8005f22:	e002      	b.n	8005f2a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fb ff13 	bl	8001d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e002      	b.n	8005f34 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e000      	b.n	8005f34 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f32:	2302      	movs	r3, #2
  }
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3730      	adds	r7, #48	@ 0x30
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f40:	b0c0      	sub	sp, #256	@ 0x100
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f58:	68d9      	ldr	r1, [r3, #12]
 8005f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	ea40 0301 	orr.w	r3, r0, r1
 8005f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f94:	f021 010c 	bic.w	r1, r1, #12
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb6:	6999      	ldr	r1, [r3, #24]
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	ea40 0301 	orr.w	r3, r0, r1
 8005fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b8f      	ldr	r3, [pc, #572]	@ (8006208 <UART_SetConfig+0x2cc>)
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d005      	beq.n	8005fdc <UART_SetConfig+0xa0>
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800620c <UART_SetConfig+0x2d0>)
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d104      	bne.n	8005fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fdc:	f7fd f938 	bl	8003250 <HAL_RCC_GetPCLK2Freq>
 8005fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005fe4:	e003      	b.n	8005fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fe6:	f7fd f91f 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8005fea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ff8:	f040 810c 	bne.w	8006214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006000:	2200      	movs	r2, #0
 8006002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006006:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800600a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800600e:	4622      	mov	r2, r4
 8006010:	462b      	mov	r3, r5
 8006012:	1891      	adds	r1, r2, r2
 8006014:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006016:	415b      	adcs	r3, r3
 8006018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800601a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800601e:	4621      	mov	r1, r4
 8006020:	eb12 0801 	adds.w	r8, r2, r1
 8006024:	4629      	mov	r1, r5
 8006026:	eb43 0901 	adc.w	r9, r3, r1
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800603a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800603e:	4690      	mov	r8, r2
 8006040:	4699      	mov	r9, r3
 8006042:	4623      	mov	r3, r4
 8006044:	eb18 0303 	adds.w	r3, r8, r3
 8006048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800604c:	462b      	mov	r3, r5
 800604e:	eb49 0303 	adc.w	r3, r9, r3
 8006052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006062:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800606a:	460b      	mov	r3, r1
 800606c:	18db      	adds	r3, r3, r3
 800606e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006070:	4613      	mov	r3, r2
 8006072:	eb42 0303 	adc.w	r3, r2, r3
 8006076:	657b      	str	r3, [r7, #84]	@ 0x54
 8006078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800607c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006080:	f7fa fd04 	bl	8000a8c <__aeabi_uldivmod>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4b61      	ldr	r3, [pc, #388]	@ (8006210 <UART_SetConfig+0x2d4>)
 800608a:	fba3 2302 	umull	r2, r3, r3, r2
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	011c      	lsls	r4, r3, #4
 8006092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006096:	2200      	movs	r2, #0
 8006098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800609c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060a4:	4642      	mov	r2, r8
 80060a6:	464b      	mov	r3, r9
 80060a8:	1891      	adds	r1, r2, r2
 80060aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060ac:	415b      	adcs	r3, r3
 80060ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060b4:	4641      	mov	r1, r8
 80060b6:	eb12 0a01 	adds.w	sl, r2, r1
 80060ba:	4649      	mov	r1, r9
 80060bc:	eb43 0b01 	adc.w	fp, r3, r1
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060d4:	4692      	mov	sl, r2
 80060d6:	469b      	mov	fp, r3
 80060d8:	4643      	mov	r3, r8
 80060da:	eb1a 0303 	adds.w	r3, sl, r3
 80060de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060e2:	464b      	mov	r3, r9
 80060e4:	eb4b 0303 	adc.w	r3, fp, r3
 80060e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80060fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006100:	460b      	mov	r3, r1
 8006102:	18db      	adds	r3, r3, r3
 8006104:	643b      	str	r3, [r7, #64]	@ 0x40
 8006106:	4613      	mov	r3, r2
 8006108:	eb42 0303 	adc.w	r3, r2, r3
 800610c:	647b      	str	r3, [r7, #68]	@ 0x44
 800610e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006116:	f7fa fcb9 	bl	8000a8c <__aeabi_uldivmod>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4611      	mov	r1, r2
 8006120:	4b3b      	ldr	r3, [pc, #236]	@ (8006210 <UART_SetConfig+0x2d4>)
 8006122:	fba3 2301 	umull	r2, r3, r3, r1
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	2264      	movs	r2, #100	@ 0x64
 800612a:	fb02 f303 	mul.w	r3, r2, r3
 800612e:	1acb      	subs	r3, r1, r3
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006136:	4b36      	ldr	r3, [pc, #216]	@ (8006210 <UART_SetConfig+0x2d4>)
 8006138:	fba3 2302 	umull	r2, r3, r3, r2
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006144:	441c      	add	r4, r3
 8006146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800614a:	2200      	movs	r2, #0
 800614c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006150:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006158:	4642      	mov	r2, r8
 800615a:	464b      	mov	r3, r9
 800615c:	1891      	adds	r1, r2, r2
 800615e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006160:	415b      	adcs	r3, r3
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006168:	4641      	mov	r1, r8
 800616a:	1851      	adds	r1, r2, r1
 800616c:	6339      	str	r1, [r7, #48]	@ 0x30
 800616e:	4649      	mov	r1, r9
 8006170:	414b      	adcs	r3, r1
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006180:	4659      	mov	r1, fp
 8006182:	00cb      	lsls	r3, r1, #3
 8006184:	4651      	mov	r1, sl
 8006186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800618a:	4651      	mov	r1, sl
 800618c:	00ca      	lsls	r2, r1, #3
 800618e:	4610      	mov	r0, r2
 8006190:	4619      	mov	r1, r3
 8006192:	4603      	mov	r3, r0
 8006194:	4642      	mov	r2, r8
 8006196:	189b      	adds	r3, r3, r2
 8006198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800619c:	464b      	mov	r3, r9
 800619e:	460a      	mov	r2, r1
 80061a0:	eb42 0303 	adc.w	r3, r2, r3
 80061a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061bc:	460b      	mov	r3, r1
 80061be:	18db      	adds	r3, r3, r3
 80061c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061c2:	4613      	mov	r3, r2
 80061c4:	eb42 0303 	adc.w	r3, r2, r3
 80061c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80061d2:	f7fa fc5b 	bl	8000a8c <__aeabi_uldivmod>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4b0d      	ldr	r3, [pc, #52]	@ (8006210 <UART_SetConfig+0x2d4>)
 80061dc:	fba3 1302 	umull	r1, r3, r3, r2
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	2164      	movs	r1, #100	@ 0x64
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	3332      	adds	r3, #50	@ 0x32
 80061ee:	4a08      	ldr	r2, [pc, #32]	@ (8006210 <UART_SetConfig+0x2d4>)
 80061f0:	fba2 2303 	umull	r2, r3, r2, r3
 80061f4:	095b      	lsrs	r3, r3, #5
 80061f6:	f003 0207 	and.w	r2, r3, #7
 80061fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4422      	add	r2, r4
 8006202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006204:	e106      	b.n	8006414 <UART_SetConfig+0x4d8>
 8006206:	bf00      	nop
 8006208:	40011000 	.word	0x40011000
 800620c:	40011400 	.word	0x40011400
 8006210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006218:	2200      	movs	r2, #0
 800621a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800621e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006226:	4642      	mov	r2, r8
 8006228:	464b      	mov	r3, r9
 800622a:	1891      	adds	r1, r2, r2
 800622c:	6239      	str	r1, [r7, #32]
 800622e:	415b      	adcs	r3, r3
 8006230:	627b      	str	r3, [r7, #36]	@ 0x24
 8006232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006236:	4641      	mov	r1, r8
 8006238:	1854      	adds	r4, r2, r1
 800623a:	4649      	mov	r1, r9
 800623c:	eb43 0501 	adc.w	r5, r3, r1
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	00eb      	lsls	r3, r5, #3
 800624a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800624e:	00e2      	lsls	r2, r4, #3
 8006250:	4614      	mov	r4, r2
 8006252:	461d      	mov	r5, r3
 8006254:	4643      	mov	r3, r8
 8006256:	18e3      	adds	r3, r4, r3
 8006258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800625c:	464b      	mov	r3, r9
 800625e:	eb45 0303 	adc.w	r3, r5, r3
 8006262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006282:	4629      	mov	r1, r5
 8006284:	008b      	lsls	r3, r1, #2
 8006286:	4621      	mov	r1, r4
 8006288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800628c:	4621      	mov	r1, r4
 800628e:	008a      	lsls	r2, r1, #2
 8006290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006294:	f7fa fbfa 	bl	8000a8c <__aeabi_uldivmod>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4b60      	ldr	r3, [pc, #384]	@ (8006420 <UART_SetConfig+0x4e4>)
 800629e:	fba3 2302 	umull	r2, r3, r3, r2
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	011c      	lsls	r4, r3, #4
 80062a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062aa:	2200      	movs	r2, #0
 80062ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062b8:	4642      	mov	r2, r8
 80062ba:	464b      	mov	r3, r9
 80062bc:	1891      	adds	r1, r2, r2
 80062be:	61b9      	str	r1, [r7, #24]
 80062c0:	415b      	adcs	r3, r3
 80062c2:	61fb      	str	r3, [r7, #28]
 80062c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062c8:	4641      	mov	r1, r8
 80062ca:	1851      	adds	r1, r2, r1
 80062cc:	6139      	str	r1, [r7, #16]
 80062ce:	4649      	mov	r1, r9
 80062d0:	414b      	adcs	r3, r1
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062e0:	4659      	mov	r1, fp
 80062e2:	00cb      	lsls	r3, r1, #3
 80062e4:	4651      	mov	r1, sl
 80062e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ea:	4651      	mov	r1, sl
 80062ec:	00ca      	lsls	r2, r1, #3
 80062ee:	4610      	mov	r0, r2
 80062f0:	4619      	mov	r1, r3
 80062f2:	4603      	mov	r3, r0
 80062f4:	4642      	mov	r2, r8
 80062f6:	189b      	adds	r3, r3, r2
 80062f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062fc:	464b      	mov	r3, r9
 80062fe:	460a      	mov	r2, r1
 8006300:	eb42 0303 	adc.w	r3, r2, r3
 8006304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006320:	4649      	mov	r1, r9
 8006322:	008b      	lsls	r3, r1, #2
 8006324:	4641      	mov	r1, r8
 8006326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800632a:	4641      	mov	r1, r8
 800632c:	008a      	lsls	r2, r1, #2
 800632e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006332:	f7fa fbab 	bl	8000a8c <__aeabi_uldivmod>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4611      	mov	r1, r2
 800633c:	4b38      	ldr	r3, [pc, #224]	@ (8006420 <UART_SetConfig+0x4e4>)
 800633e:	fba3 2301 	umull	r2, r3, r3, r1
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	2264      	movs	r2, #100	@ 0x64
 8006346:	fb02 f303 	mul.w	r3, r2, r3
 800634a:	1acb      	subs	r3, r1, r3
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	3332      	adds	r3, #50	@ 0x32
 8006350:	4a33      	ldr	r2, [pc, #204]	@ (8006420 <UART_SetConfig+0x4e4>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800635c:	441c      	add	r4, r3
 800635e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006362:	2200      	movs	r2, #0
 8006364:	673b      	str	r3, [r7, #112]	@ 0x70
 8006366:	677a      	str	r2, [r7, #116]	@ 0x74
 8006368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800636c:	4642      	mov	r2, r8
 800636e:	464b      	mov	r3, r9
 8006370:	1891      	adds	r1, r2, r2
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	415b      	adcs	r3, r3
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800637c:	4641      	mov	r1, r8
 800637e:	1851      	adds	r1, r2, r1
 8006380:	6039      	str	r1, [r7, #0]
 8006382:	4649      	mov	r1, r9
 8006384:	414b      	adcs	r3, r1
 8006386:	607b      	str	r3, [r7, #4]
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	f04f 0300 	mov.w	r3, #0
 8006390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006394:	4659      	mov	r1, fp
 8006396:	00cb      	lsls	r3, r1, #3
 8006398:	4651      	mov	r1, sl
 800639a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800639e:	4651      	mov	r1, sl
 80063a0:	00ca      	lsls	r2, r1, #3
 80063a2:	4610      	mov	r0, r2
 80063a4:	4619      	mov	r1, r3
 80063a6:	4603      	mov	r3, r0
 80063a8:	4642      	mov	r2, r8
 80063aa:	189b      	adds	r3, r3, r2
 80063ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063ae:	464b      	mov	r3, r9
 80063b0:	460a      	mov	r2, r1
 80063b2:	eb42 0303 	adc.w	r3, r2, r3
 80063b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80063c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80063d0:	4649      	mov	r1, r9
 80063d2:	008b      	lsls	r3, r1, #2
 80063d4:	4641      	mov	r1, r8
 80063d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063da:	4641      	mov	r1, r8
 80063dc:	008a      	lsls	r2, r1, #2
 80063de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80063e2:	f7fa fb53 	bl	8000a8c <__aeabi_uldivmod>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <UART_SetConfig+0x4e4>)
 80063ec:	fba3 1302 	umull	r1, r3, r3, r2
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	2164      	movs	r1, #100	@ 0x64
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	3332      	adds	r3, #50	@ 0x32
 80063fe:	4a08      	ldr	r2, [pc, #32]	@ (8006420 <UART_SetConfig+0x4e4>)
 8006400:	fba2 2303 	umull	r2, r3, r2, r3
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	f003 020f 	and.w	r2, r3, #15
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4422      	add	r2, r4
 8006412:	609a      	str	r2, [r3, #8]
}
 8006414:	bf00      	nop
 8006416:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800641a:	46bd      	mov	sp, r7
 800641c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006420:	51eb851f 	.word	0x51eb851f

08006424 <std>:
 8006424:	2300      	movs	r3, #0
 8006426:	b510      	push	{r4, lr}
 8006428:	4604      	mov	r4, r0
 800642a:	e9c0 3300 	strd	r3, r3, [r0]
 800642e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006432:	6083      	str	r3, [r0, #8]
 8006434:	8181      	strh	r1, [r0, #12]
 8006436:	6643      	str	r3, [r0, #100]	@ 0x64
 8006438:	81c2      	strh	r2, [r0, #14]
 800643a:	6183      	str	r3, [r0, #24]
 800643c:	4619      	mov	r1, r3
 800643e:	2208      	movs	r2, #8
 8006440:	305c      	adds	r0, #92	@ 0x5c
 8006442:	f000 f9f9 	bl	8006838 <memset>
 8006446:	4b0d      	ldr	r3, [pc, #52]	@ (800647c <std+0x58>)
 8006448:	6263      	str	r3, [r4, #36]	@ 0x24
 800644a:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <std+0x5c>)
 800644c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800644e:	4b0d      	ldr	r3, [pc, #52]	@ (8006484 <std+0x60>)
 8006450:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006452:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <std+0x64>)
 8006454:	6323      	str	r3, [r4, #48]	@ 0x30
 8006456:	4b0d      	ldr	r3, [pc, #52]	@ (800648c <std+0x68>)
 8006458:	6224      	str	r4, [r4, #32]
 800645a:	429c      	cmp	r4, r3
 800645c:	d006      	beq.n	800646c <std+0x48>
 800645e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006462:	4294      	cmp	r4, r2
 8006464:	d002      	beq.n	800646c <std+0x48>
 8006466:	33d0      	adds	r3, #208	@ 0xd0
 8006468:	429c      	cmp	r4, r3
 800646a:	d105      	bne.n	8006478 <std+0x54>
 800646c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006474:	f000 ba58 	b.w	8006928 <__retarget_lock_init_recursive>
 8006478:	bd10      	pop	{r4, pc}
 800647a:	bf00      	nop
 800647c:	08006689 	.word	0x08006689
 8006480:	080066ab 	.word	0x080066ab
 8006484:	080066e3 	.word	0x080066e3
 8006488:	08006707 	.word	0x08006707
 800648c:	20000358 	.word	0x20000358

08006490 <stdio_exit_handler>:
 8006490:	4a02      	ldr	r2, [pc, #8]	@ (800649c <stdio_exit_handler+0xc>)
 8006492:	4903      	ldr	r1, [pc, #12]	@ (80064a0 <stdio_exit_handler+0x10>)
 8006494:	4803      	ldr	r0, [pc, #12]	@ (80064a4 <stdio_exit_handler+0x14>)
 8006496:	f000 b869 	b.w	800656c <_fwalk_sglue>
 800649a:	bf00      	nop
 800649c:	20000014 	.word	0x20000014
 80064a0:	080071c9 	.word	0x080071c9
 80064a4:	20000024 	.word	0x20000024

080064a8 <cleanup_stdio>:
 80064a8:	6841      	ldr	r1, [r0, #4]
 80064aa:	4b0c      	ldr	r3, [pc, #48]	@ (80064dc <cleanup_stdio+0x34>)
 80064ac:	4299      	cmp	r1, r3
 80064ae:	b510      	push	{r4, lr}
 80064b0:	4604      	mov	r4, r0
 80064b2:	d001      	beq.n	80064b8 <cleanup_stdio+0x10>
 80064b4:	f000 fe88 	bl	80071c8 <_fflush_r>
 80064b8:	68a1      	ldr	r1, [r4, #8]
 80064ba:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <cleanup_stdio+0x38>)
 80064bc:	4299      	cmp	r1, r3
 80064be:	d002      	beq.n	80064c6 <cleanup_stdio+0x1e>
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fe81 	bl	80071c8 <_fflush_r>
 80064c6:	68e1      	ldr	r1, [r4, #12]
 80064c8:	4b06      	ldr	r3, [pc, #24]	@ (80064e4 <cleanup_stdio+0x3c>)
 80064ca:	4299      	cmp	r1, r3
 80064cc:	d004      	beq.n	80064d8 <cleanup_stdio+0x30>
 80064ce:	4620      	mov	r0, r4
 80064d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d4:	f000 be78 	b.w	80071c8 <_fflush_r>
 80064d8:	bd10      	pop	{r4, pc}
 80064da:	bf00      	nop
 80064dc:	20000358 	.word	0x20000358
 80064e0:	200003c0 	.word	0x200003c0
 80064e4:	20000428 	.word	0x20000428

080064e8 <global_stdio_init.part.0>:
 80064e8:	b510      	push	{r4, lr}
 80064ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006518 <global_stdio_init.part.0+0x30>)
 80064ec:	4c0b      	ldr	r4, [pc, #44]	@ (800651c <global_stdio_init.part.0+0x34>)
 80064ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006520 <global_stdio_init.part.0+0x38>)
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	4620      	mov	r0, r4
 80064f4:	2200      	movs	r2, #0
 80064f6:	2104      	movs	r1, #4
 80064f8:	f7ff ff94 	bl	8006424 <std>
 80064fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006500:	2201      	movs	r2, #1
 8006502:	2109      	movs	r1, #9
 8006504:	f7ff ff8e 	bl	8006424 <std>
 8006508:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800650c:	2202      	movs	r2, #2
 800650e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006512:	2112      	movs	r1, #18
 8006514:	f7ff bf86 	b.w	8006424 <std>
 8006518:	20000490 	.word	0x20000490
 800651c:	20000358 	.word	0x20000358
 8006520:	08006491 	.word	0x08006491

08006524 <__sfp_lock_acquire>:
 8006524:	4801      	ldr	r0, [pc, #4]	@ (800652c <__sfp_lock_acquire+0x8>)
 8006526:	f000 ba00 	b.w	800692a <__retarget_lock_acquire_recursive>
 800652a:	bf00      	nop
 800652c:	20000499 	.word	0x20000499

08006530 <__sfp_lock_release>:
 8006530:	4801      	ldr	r0, [pc, #4]	@ (8006538 <__sfp_lock_release+0x8>)
 8006532:	f000 b9fb 	b.w	800692c <__retarget_lock_release_recursive>
 8006536:	bf00      	nop
 8006538:	20000499 	.word	0x20000499

0800653c <__sinit>:
 800653c:	b510      	push	{r4, lr}
 800653e:	4604      	mov	r4, r0
 8006540:	f7ff fff0 	bl	8006524 <__sfp_lock_acquire>
 8006544:	6a23      	ldr	r3, [r4, #32]
 8006546:	b11b      	cbz	r3, 8006550 <__sinit+0x14>
 8006548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800654c:	f7ff bff0 	b.w	8006530 <__sfp_lock_release>
 8006550:	4b04      	ldr	r3, [pc, #16]	@ (8006564 <__sinit+0x28>)
 8006552:	6223      	str	r3, [r4, #32]
 8006554:	4b04      	ldr	r3, [pc, #16]	@ (8006568 <__sinit+0x2c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f5      	bne.n	8006548 <__sinit+0xc>
 800655c:	f7ff ffc4 	bl	80064e8 <global_stdio_init.part.0>
 8006560:	e7f2      	b.n	8006548 <__sinit+0xc>
 8006562:	bf00      	nop
 8006564:	080064a9 	.word	0x080064a9
 8006568:	20000490 	.word	0x20000490

0800656c <_fwalk_sglue>:
 800656c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006570:	4607      	mov	r7, r0
 8006572:	4688      	mov	r8, r1
 8006574:	4614      	mov	r4, r2
 8006576:	2600      	movs	r6, #0
 8006578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800657c:	f1b9 0901 	subs.w	r9, r9, #1
 8006580:	d505      	bpl.n	800658e <_fwalk_sglue+0x22>
 8006582:	6824      	ldr	r4, [r4, #0]
 8006584:	2c00      	cmp	r4, #0
 8006586:	d1f7      	bne.n	8006578 <_fwalk_sglue+0xc>
 8006588:	4630      	mov	r0, r6
 800658a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800658e:	89ab      	ldrh	r3, [r5, #12]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d907      	bls.n	80065a4 <_fwalk_sglue+0x38>
 8006594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006598:	3301      	adds	r3, #1
 800659a:	d003      	beq.n	80065a4 <_fwalk_sglue+0x38>
 800659c:	4629      	mov	r1, r5
 800659e:	4638      	mov	r0, r7
 80065a0:	47c0      	blx	r8
 80065a2:	4306      	orrs	r6, r0
 80065a4:	3568      	adds	r5, #104	@ 0x68
 80065a6:	e7e9      	b.n	800657c <_fwalk_sglue+0x10>

080065a8 <iprintf>:
 80065a8:	b40f      	push	{r0, r1, r2, r3}
 80065aa:	b507      	push	{r0, r1, r2, lr}
 80065ac:	4906      	ldr	r1, [pc, #24]	@ (80065c8 <iprintf+0x20>)
 80065ae:	ab04      	add	r3, sp, #16
 80065b0:	6808      	ldr	r0, [r1, #0]
 80065b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b6:	6881      	ldr	r1, [r0, #8]
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	f000 fadb 	bl	8006b74 <_vfiprintf_r>
 80065be:	b003      	add	sp, #12
 80065c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c4:	b004      	add	sp, #16
 80065c6:	4770      	bx	lr
 80065c8:	20000020 	.word	0x20000020

080065cc <_puts_r>:
 80065cc:	6a03      	ldr	r3, [r0, #32]
 80065ce:	b570      	push	{r4, r5, r6, lr}
 80065d0:	6884      	ldr	r4, [r0, #8]
 80065d2:	4605      	mov	r5, r0
 80065d4:	460e      	mov	r6, r1
 80065d6:	b90b      	cbnz	r3, 80065dc <_puts_r+0x10>
 80065d8:	f7ff ffb0 	bl	800653c <__sinit>
 80065dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065de:	07db      	lsls	r3, r3, #31
 80065e0:	d405      	bmi.n	80065ee <_puts_r+0x22>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	0598      	lsls	r0, r3, #22
 80065e6:	d402      	bmi.n	80065ee <_puts_r+0x22>
 80065e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ea:	f000 f99e 	bl	800692a <__retarget_lock_acquire_recursive>
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	0719      	lsls	r1, r3, #28
 80065f2:	d502      	bpl.n	80065fa <_puts_r+0x2e>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d135      	bne.n	8006666 <_puts_r+0x9a>
 80065fa:	4621      	mov	r1, r4
 80065fc:	4628      	mov	r0, r5
 80065fe:	f000 f8c5 	bl	800678c <__swsetup_r>
 8006602:	b380      	cbz	r0, 8006666 <_puts_r+0x9a>
 8006604:	f04f 35ff 	mov.w	r5, #4294967295
 8006608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800660a:	07da      	lsls	r2, r3, #31
 800660c:	d405      	bmi.n	800661a <_puts_r+0x4e>
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	059b      	lsls	r3, r3, #22
 8006612:	d402      	bmi.n	800661a <_puts_r+0x4e>
 8006614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006616:	f000 f989 	bl	800692c <__retarget_lock_release_recursive>
 800661a:	4628      	mov	r0, r5
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	2b00      	cmp	r3, #0
 8006620:	da04      	bge.n	800662c <_puts_r+0x60>
 8006622:	69a2      	ldr	r2, [r4, #24]
 8006624:	429a      	cmp	r2, r3
 8006626:	dc17      	bgt.n	8006658 <_puts_r+0x8c>
 8006628:	290a      	cmp	r1, #10
 800662a:	d015      	beq.n	8006658 <_puts_r+0x8c>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	7019      	strb	r1, [r3, #0]
 8006634:	68a3      	ldr	r3, [r4, #8]
 8006636:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800663a:	3b01      	subs	r3, #1
 800663c:	60a3      	str	r3, [r4, #8]
 800663e:	2900      	cmp	r1, #0
 8006640:	d1ed      	bne.n	800661e <_puts_r+0x52>
 8006642:	2b00      	cmp	r3, #0
 8006644:	da11      	bge.n	800666a <_puts_r+0x9e>
 8006646:	4622      	mov	r2, r4
 8006648:	210a      	movs	r1, #10
 800664a:	4628      	mov	r0, r5
 800664c:	f000 f85f 	bl	800670e <__swbuf_r>
 8006650:	3001      	adds	r0, #1
 8006652:	d0d7      	beq.n	8006604 <_puts_r+0x38>
 8006654:	250a      	movs	r5, #10
 8006656:	e7d7      	b.n	8006608 <_puts_r+0x3c>
 8006658:	4622      	mov	r2, r4
 800665a:	4628      	mov	r0, r5
 800665c:	f000 f857 	bl	800670e <__swbuf_r>
 8006660:	3001      	adds	r0, #1
 8006662:	d1e7      	bne.n	8006634 <_puts_r+0x68>
 8006664:	e7ce      	b.n	8006604 <_puts_r+0x38>
 8006666:	3e01      	subs	r6, #1
 8006668:	e7e4      	b.n	8006634 <_puts_r+0x68>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	220a      	movs	r2, #10
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	e7ee      	b.n	8006654 <_puts_r+0x88>
	...

08006678 <puts>:
 8006678:	4b02      	ldr	r3, [pc, #8]	@ (8006684 <puts+0xc>)
 800667a:	4601      	mov	r1, r0
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	f7ff bfa5 	b.w	80065cc <_puts_r>
 8006682:	bf00      	nop
 8006684:	20000020 	.word	0x20000020

08006688 <__sread>:
 8006688:	b510      	push	{r4, lr}
 800668a:	460c      	mov	r4, r1
 800668c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006690:	f000 f8fc 	bl	800688c <_read_r>
 8006694:	2800      	cmp	r0, #0
 8006696:	bfab      	itete	ge
 8006698:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800669a:	89a3      	ldrhlt	r3, [r4, #12]
 800669c:	181b      	addge	r3, r3, r0
 800669e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066a2:	bfac      	ite	ge
 80066a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066a6:	81a3      	strhlt	r3, [r4, #12]
 80066a8:	bd10      	pop	{r4, pc}

080066aa <__swrite>:
 80066aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ae:	461f      	mov	r7, r3
 80066b0:	898b      	ldrh	r3, [r1, #12]
 80066b2:	05db      	lsls	r3, r3, #23
 80066b4:	4605      	mov	r5, r0
 80066b6:	460c      	mov	r4, r1
 80066b8:	4616      	mov	r6, r2
 80066ba:	d505      	bpl.n	80066c8 <__swrite+0x1e>
 80066bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c0:	2302      	movs	r3, #2
 80066c2:	2200      	movs	r2, #0
 80066c4:	f000 f8d0 	bl	8006868 <_lseek_r>
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	4632      	mov	r2, r6
 80066d6:	463b      	mov	r3, r7
 80066d8:	4628      	mov	r0, r5
 80066da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066de:	f000 b8e7 	b.w	80068b0 <_write_r>

080066e2 <__sseek>:
 80066e2:	b510      	push	{r4, lr}
 80066e4:	460c      	mov	r4, r1
 80066e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ea:	f000 f8bd 	bl	8006868 <_lseek_r>
 80066ee:	1c43      	adds	r3, r0, #1
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	bf15      	itete	ne
 80066f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066fe:	81a3      	strheq	r3, [r4, #12]
 8006700:	bf18      	it	ne
 8006702:	81a3      	strhne	r3, [r4, #12]
 8006704:	bd10      	pop	{r4, pc}

08006706 <__sclose>:
 8006706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670a:	f000 b89d 	b.w	8006848 <_close_r>

0800670e <__swbuf_r>:
 800670e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006710:	460e      	mov	r6, r1
 8006712:	4614      	mov	r4, r2
 8006714:	4605      	mov	r5, r0
 8006716:	b118      	cbz	r0, 8006720 <__swbuf_r+0x12>
 8006718:	6a03      	ldr	r3, [r0, #32]
 800671a:	b90b      	cbnz	r3, 8006720 <__swbuf_r+0x12>
 800671c:	f7ff ff0e 	bl	800653c <__sinit>
 8006720:	69a3      	ldr	r3, [r4, #24]
 8006722:	60a3      	str	r3, [r4, #8]
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	071a      	lsls	r2, r3, #28
 8006728:	d501      	bpl.n	800672e <__swbuf_r+0x20>
 800672a:	6923      	ldr	r3, [r4, #16]
 800672c:	b943      	cbnz	r3, 8006740 <__swbuf_r+0x32>
 800672e:	4621      	mov	r1, r4
 8006730:	4628      	mov	r0, r5
 8006732:	f000 f82b 	bl	800678c <__swsetup_r>
 8006736:	b118      	cbz	r0, 8006740 <__swbuf_r+0x32>
 8006738:	f04f 37ff 	mov.w	r7, #4294967295
 800673c:	4638      	mov	r0, r7
 800673e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	6922      	ldr	r2, [r4, #16]
 8006744:	1a98      	subs	r0, r3, r2
 8006746:	6963      	ldr	r3, [r4, #20]
 8006748:	b2f6      	uxtb	r6, r6
 800674a:	4283      	cmp	r3, r0
 800674c:	4637      	mov	r7, r6
 800674e:	dc05      	bgt.n	800675c <__swbuf_r+0x4e>
 8006750:	4621      	mov	r1, r4
 8006752:	4628      	mov	r0, r5
 8006754:	f000 fd38 	bl	80071c8 <_fflush_r>
 8006758:	2800      	cmp	r0, #0
 800675a:	d1ed      	bne.n	8006738 <__swbuf_r+0x2a>
 800675c:	68a3      	ldr	r3, [r4, #8]
 800675e:	3b01      	subs	r3, #1
 8006760:	60a3      	str	r3, [r4, #8]
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	6022      	str	r2, [r4, #0]
 8006768:	701e      	strb	r6, [r3, #0]
 800676a:	6962      	ldr	r2, [r4, #20]
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	429a      	cmp	r2, r3
 8006770:	d004      	beq.n	800677c <__swbuf_r+0x6e>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	07db      	lsls	r3, r3, #31
 8006776:	d5e1      	bpl.n	800673c <__swbuf_r+0x2e>
 8006778:	2e0a      	cmp	r6, #10
 800677a:	d1df      	bne.n	800673c <__swbuf_r+0x2e>
 800677c:	4621      	mov	r1, r4
 800677e:	4628      	mov	r0, r5
 8006780:	f000 fd22 	bl	80071c8 <_fflush_r>
 8006784:	2800      	cmp	r0, #0
 8006786:	d0d9      	beq.n	800673c <__swbuf_r+0x2e>
 8006788:	e7d6      	b.n	8006738 <__swbuf_r+0x2a>
	...

0800678c <__swsetup_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4b29      	ldr	r3, [pc, #164]	@ (8006834 <__swsetup_r+0xa8>)
 8006790:	4605      	mov	r5, r0
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	460c      	mov	r4, r1
 8006796:	b118      	cbz	r0, 80067a0 <__swsetup_r+0x14>
 8006798:	6a03      	ldr	r3, [r0, #32]
 800679a:	b90b      	cbnz	r3, 80067a0 <__swsetup_r+0x14>
 800679c:	f7ff fece 	bl	800653c <__sinit>
 80067a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a4:	0719      	lsls	r1, r3, #28
 80067a6:	d422      	bmi.n	80067ee <__swsetup_r+0x62>
 80067a8:	06da      	lsls	r2, r3, #27
 80067aa:	d407      	bmi.n	80067bc <__swsetup_r+0x30>
 80067ac:	2209      	movs	r2, #9
 80067ae:	602a      	str	r2, [r5, #0]
 80067b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	e033      	b.n	8006824 <__swsetup_r+0x98>
 80067bc:	0758      	lsls	r0, r3, #29
 80067be:	d512      	bpl.n	80067e6 <__swsetup_r+0x5a>
 80067c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067c2:	b141      	cbz	r1, 80067d6 <__swsetup_r+0x4a>
 80067c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067c8:	4299      	cmp	r1, r3
 80067ca:	d002      	beq.n	80067d2 <__swsetup_r+0x46>
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 f8af 	bl	8006930 <_free_r>
 80067d2:	2300      	movs	r3, #0
 80067d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067dc:	81a3      	strh	r3, [r4, #12]
 80067de:	2300      	movs	r3, #0
 80067e0:	6063      	str	r3, [r4, #4]
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	f043 0308 	orr.w	r3, r3, #8
 80067ec:	81a3      	strh	r3, [r4, #12]
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	b94b      	cbnz	r3, 8006806 <__swsetup_r+0x7a>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067fc:	d003      	beq.n	8006806 <__swsetup_r+0x7a>
 80067fe:	4621      	mov	r1, r4
 8006800:	4628      	mov	r0, r5
 8006802:	f000 fd2f 	bl	8007264 <__smakebuf_r>
 8006806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680a:	f013 0201 	ands.w	r2, r3, #1
 800680e:	d00a      	beq.n	8006826 <__swsetup_r+0x9a>
 8006810:	2200      	movs	r2, #0
 8006812:	60a2      	str	r2, [r4, #8]
 8006814:	6962      	ldr	r2, [r4, #20]
 8006816:	4252      	negs	r2, r2
 8006818:	61a2      	str	r2, [r4, #24]
 800681a:	6922      	ldr	r2, [r4, #16]
 800681c:	b942      	cbnz	r2, 8006830 <__swsetup_r+0xa4>
 800681e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006822:	d1c5      	bne.n	80067b0 <__swsetup_r+0x24>
 8006824:	bd38      	pop	{r3, r4, r5, pc}
 8006826:	0799      	lsls	r1, r3, #30
 8006828:	bf58      	it	pl
 800682a:	6962      	ldrpl	r2, [r4, #20]
 800682c:	60a2      	str	r2, [r4, #8]
 800682e:	e7f4      	b.n	800681a <__swsetup_r+0x8e>
 8006830:	2000      	movs	r0, #0
 8006832:	e7f7      	b.n	8006824 <__swsetup_r+0x98>
 8006834:	20000020 	.word	0x20000020

08006838 <memset>:
 8006838:	4402      	add	r2, r0
 800683a:	4603      	mov	r3, r0
 800683c:	4293      	cmp	r3, r2
 800683e:	d100      	bne.n	8006842 <memset+0xa>
 8006840:	4770      	bx	lr
 8006842:	f803 1b01 	strb.w	r1, [r3], #1
 8006846:	e7f9      	b.n	800683c <memset+0x4>

08006848 <_close_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d06      	ldr	r5, [pc, #24]	@ (8006864 <_close_r+0x1c>)
 800684c:	2300      	movs	r3, #0
 800684e:	4604      	mov	r4, r0
 8006850:	4608      	mov	r0, r1
 8006852:	602b      	str	r3, [r5, #0]
 8006854:	f7fb f973 	bl	8001b3e <_close>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_close_r+0x1a>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_close_r+0x1a>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	20000494 	.word	0x20000494

08006868 <_lseek_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4d07      	ldr	r5, [pc, #28]	@ (8006888 <_lseek_r+0x20>)
 800686c:	4604      	mov	r4, r0
 800686e:	4608      	mov	r0, r1
 8006870:	4611      	mov	r1, r2
 8006872:	2200      	movs	r2, #0
 8006874:	602a      	str	r2, [r5, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	f7fb f988 	bl	8001b8c <_lseek>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d102      	bne.n	8006886 <_lseek_r+0x1e>
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	b103      	cbz	r3, 8006886 <_lseek_r+0x1e>
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	20000494 	.word	0x20000494

0800688c <_read_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4d07      	ldr	r5, [pc, #28]	@ (80068ac <_read_r+0x20>)
 8006890:	4604      	mov	r4, r0
 8006892:	4608      	mov	r0, r1
 8006894:	4611      	mov	r1, r2
 8006896:	2200      	movs	r2, #0
 8006898:	602a      	str	r2, [r5, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	f7fb f916 	bl	8001acc <_read>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_read_r+0x1e>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_read_r+0x1e>
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	20000494 	.word	0x20000494

080068b0 <_write_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4d07      	ldr	r5, [pc, #28]	@ (80068d0 <_write_r+0x20>)
 80068b4:	4604      	mov	r4, r0
 80068b6:	4608      	mov	r0, r1
 80068b8:	4611      	mov	r1, r2
 80068ba:	2200      	movs	r2, #0
 80068bc:	602a      	str	r2, [r5, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	f7fb f921 	bl	8001b06 <_write>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d102      	bne.n	80068ce <_write_r+0x1e>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	b103      	cbz	r3, 80068ce <_write_r+0x1e>
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	bd38      	pop	{r3, r4, r5, pc}
 80068d0:	20000494 	.word	0x20000494

080068d4 <__errno>:
 80068d4:	4b01      	ldr	r3, [pc, #4]	@ (80068dc <__errno+0x8>)
 80068d6:	6818      	ldr	r0, [r3, #0]
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20000020 	.word	0x20000020

080068e0 <__libc_init_array>:
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006918 <__libc_init_array+0x38>)
 80068e4:	4c0d      	ldr	r4, [pc, #52]	@ (800691c <__libc_init_array+0x3c>)
 80068e6:	1b64      	subs	r4, r4, r5
 80068e8:	10a4      	asrs	r4, r4, #2
 80068ea:	2600      	movs	r6, #0
 80068ec:	42a6      	cmp	r6, r4
 80068ee:	d109      	bne.n	8006904 <__libc_init_array+0x24>
 80068f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006920 <__libc_init_array+0x40>)
 80068f2:	4c0c      	ldr	r4, [pc, #48]	@ (8006924 <__libc_init_array+0x44>)
 80068f4:	f000 fd24 	bl	8007340 <_init>
 80068f8:	1b64      	subs	r4, r4, r5
 80068fa:	10a4      	asrs	r4, r4, #2
 80068fc:	2600      	movs	r6, #0
 80068fe:	42a6      	cmp	r6, r4
 8006900:	d105      	bne.n	800690e <__libc_init_array+0x2e>
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	f855 3b04 	ldr.w	r3, [r5], #4
 8006908:	4798      	blx	r3
 800690a:	3601      	adds	r6, #1
 800690c:	e7ee      	b.n	80068ec <__libc_init_array+0xc>
 800690e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006912:	4798      	blx	r3
 8006914:	3601      	adds	r6, #1
 8006916:	e7f2      	b.n	80068fe <__libc_init_array+0x1e>
 8006918:	080073f8 	.word	0x080073f8
 800691c:	080073f8 	.word	0x080073f8
 8006920:	080073f8 	.word	0x080073f8
 8006924:	080073fc 	.word	0x080073fc

08006928 <__retarget_lock_init_recursive>:
 8006928:	4770      	bx	lr

0800692a <__retarget_lock_acquire_recursive>:
 800692a:	4770      	bx	lr

0800692c <__retarget_lock_release_recursive>:
 800692c:	4770      	bx	lr
	...

08006930 <_free_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4605      	mov	r5, r0
 8006934:	2900      	cmp	r1, #0
 8006936:	d041      	beq.n	80069bc <_free_r+0x8c>
 8006938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800693c:	1f0c      	subs	r4, r1, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	bfb8      	it	lt
 8006942:	18e4      	addlt	r4, r4, r3
 8006944:	f000 f8e0 	bl	8006b08 <__malloc_lock>
 8006948:	4a1d      	ldr	r2, [pc, #116]	@ (80069c0 <_free_r+0x90>)
 800694a:	6813      	ldr	r3, [r2, #0]
 800694c:	b933      	cbnz	r3, 800695c <_free_r+0x2c>
 800694e:	6063      	str	r3, [r4, #4]
 8006950:	6014      	str	r4, [r2, #0]
 8006952:	4628      	mov	r0, r5
 8006954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006958:	f000 b8dc 	b.w	8006b14 <__malloc_unlock>
 800695c:	42a3      	cmp	r3, r4
 800695e:	d908      	bls.n	8006972 <_free_r+0x42>
 8006960:	6820      	ldr	r0, [r4, #0]
 8006962:	1821      	adds	r1, r4, r0
 8006964:	428b      	cmp	r3, r1
 8006966:	bf01      	itttt	eq
 8006968:	6819      	ldreq	r1, [r3, #0]
 800696a:	685b      	ldreq	r3, [r3, #4]
 800696c:	1809      	addeq	r1, r1, r0
 800696e:	6021      	streq	r1, [r4, #0]
 8006970:	e7ed      	b.n	800694e <_free_r+0x1e>
 8006972:	461a      	mov	r2, r3
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	b10b      	cbz	r3, 800697c <_free_r+0x4c>
 8006978:	42a3      	cmp	r3, r4
 800697a:	d9fa      	bls.n	8006972 <_free_r+0x42>
 800697c:	6811      	ldr	r1, [r2, #0]
 800697e:	1850      	adds	r0, r2, r1
 8006980:	42a0      	cmp	r0, r4
 8006982:	d10b      	bne.n	800699c <_free_r+0x6c>
 8006984:	6820      	ldr	r0, [r4, #0]
 8006986:	4401      	add	r1, r0
 8006988:	1850      	adds	r0, r2, r1
 800698a:	4283      	cmp	r3, r0
 800698c:	6011      	str	r1, [r2, #0]
 800698e:	d1e0      	bne.n	8006952 <_free_r+0x22>
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	6053      	str	r3, [r2, #4]
 8006996:	4408      	add	r0, r1
 8006998:	6010      	str	r0, [r2, #0]
 800699a:	e7da      	b.n	8006952 <_free_r+0x22>
 800699c:	d902      	bls.n	80069a4 <_free_r+0x74>
 800699e:	230c      	movs	r3, #12
 80069a0:	602b      	str	r3, [r5, #0]
 80069a2:	e7d6      	b.n	8006952 <_free_r+0x22>
 80069a4:	6820      	ldr	r0, [r4, #0]
 80069a6:	1821      	adds	r1, r4, r0
 80069a8:	428b      	cmp	r3, r1
 80069aa:	bf04      	itt	eq
 80069ac:	6819      	ldreq	r1, [r3, #0]
 80069ae:	685b      	ldreq	r3, [r3, #4]
 80069b0:	6063      	str	r3, [r4, #4]
 80069b2:	bf04      	itt	eq
 80069b4:	1809      	addeq	r1, r1, r0
 80069b6:	6021      	streq	r1, [r4, #0]
 80069b8:	6054      	str	r4, [r2, #4]
 80069ba:	e7ca      	b.n	8006952 <_free_r+0x22>
 80069bc:	bd38      	pop	{r3, r4, r5, pc}
 80069be:	bf00      	nop
 80069c0:	200004a0 	.word	0x200004a0

080069c4 <sbrk_aligned>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	4e0f      	ldr	r6, [pc, #60]	@ (8006a04 <sbrk_aligned+0x40>)
 80069c8:	460c      	mov	r4, r1
 80069ca:	6831      	ldr	r1, [r6, #0]
 80069cc:	4605      	mov	r5, r0
 80069ce:	b911      	cbnz	r1, 80069d6 <sbrk_aligned+0x12>
 80069d0:	f000 fca6 	bl	8007320 <_sbrk_r>
 80069d4:	6030      	str	r0, [r6, #0]
 80069d6:	4621      	mov	r1, r4
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 fca1 	bl	8007320 <_sbrk_r>
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	d103      	bne.n	80069ea <sbrk_aligned+0x26>
 80069e2:	f04f 34ff 	mov.w	r4, #4294967295
 80069e6:	4620      	mov	r0, r4
 80069e8:	bd70      	pop	{r4, r5, r6, pc}
 80069ea:	1cc4      	adds	r4, r0, #3
 80069ec:	f024 0403 	bic.w	r4, r4, #3
 80069f0:	42a0      	cmp	r0, r4
 80069f2:	d0f8      	beq.n	80069e6 <sbrk_aligned+0x22>
 80069f4:	1a21      	subs	r1, r4, r0
 80069f6:	4628      	mov	r0, r5
 80069f8:	f000 fc92 	bl	8007320 <_sbrk_r>
 80069fc:	3001      	adds	r0, #1
 80069fe:	d1f2      	bne.n	80069e6 <sbrk_aligned+0x22>
 8006a00:	e7ef      	b.n	80069e2 <sbrk_aligned+0x1e>
 8006a02:	bf00      	nop
 8006a04:	2000049c 	.word	0x2000049c

08006a08 <_malloc_r>:
 8006a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a0c:	1ccd      	adds	r5, r1, #3
 8006a0e:	f025 0503 	bic.w	r5, r5, #3
 8006a12:	3508      	adds	r5, #8
 8006a14:	2d0c      	cmp	r5, #12
 8006a16:	bf38      	it	cc
 8006a18:	250c      	movcc	r5, #12
 8006a1a:	2d00      	cmp	r5, #0
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	db01      	blt.n	8006a24 <_malloc_r+0x1c>
 8006a20:	42a9      	cmp	r1, r5
 8006a22:	d904      	bls.n	8006a2e <_malloc_r+0x26>
 8006a24:	230c      	movs	r3, #12
 8006a26:	6033      	str	r3, [r6, #0]
 8006a28:	2000      	movs	r0, #0
 8006a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b04 <_malloc_r+0xfc>
 8006a32:	f000 f869 	bl	8006b08 <__malloc_lock>
 8006a36:	f8d8 3000 	ldr.w	r3, [r8]
 8006a3a:	461c      	mov	r4, r3
 8006a3c:	bb44      	cbnz	r4, 8006a90 <_malloc_r+0x88>
 8006a3e:	4629      	mov	r1, r5
 8006a40:	4630      	mov	r0, r6
 8006a42:	f7ff ffbf 	bl	80069c4 <sbrk_aligned>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	4604      	mov	r4, r0
 8006a4a:	d158      	bne.n	8006afe <_malloc_r+0xf6>
 8006a4c:	f8d8 4000 	ldr.w	r4, [r8]
 8006a50:	4627      	mov	r7, r4
 8006a52:	2f00      	cmp	r7, #0
 8006a54:	d143      	bne.n	8006ade <_malloc_r+0xd6>
 8006a56:	2c00      	cmp	r4, #0
 8006a58:	d04b      	beq.n	8006af2 <_malloc_r+0xea>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	4639      	mov	r1, r7
 8006a5e:	4630      	mov	r0, r6
 8006a60:	eb04 0903 	add.w	r9, r4, r3
 8006a64:	f000 fc5c 	bl	8007320 <_sbrk_r>
 8006a68:	4581      	cmp	r9, r0
 8006a6a:	d142      	bne.n	8006af2 <_malloc_r+0xea>
 8006a6c:	6821      	ldr	r1, [r4, #0]
 8006a6e:	1a6d      	subs	r5, r5, r1
 8006a70:	4629      	mov	r1, r5
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7ff ffa6 	bl	80069c4 <sbrk_aligned>
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d03a      	beq.n	8006af2 <_malloc_r+0xea>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	442b      	add	r3, r5
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	f8d8 3000 	ldr.w	r3, [r8]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	bb62      	cbnz	r2, 8006ae4 <_malloc_r+0xdc>
 8006a8a:	f8c8 7000 	str.w	r7, [r8]
 8006a8e:	e00f      	b.n	8006ab0 <_malloc_r+0xa8>
 8006a90:	6822      	ldr	r2, [r4, #0]
 8006a92:	1b52      	subs	r2, r2, r5
 8006a94:	d420      	bmi.n	8006ad8 <_malloc_r+0xd0>
 8006a96:	2a0b      	cmp	r2, #11
 8006a98:	d917      	bls.n	8006aca <_malloc_r+0xc2>
 8006a9a:	1961      	adds	r1, r4, r5
 8006a9c:	42a3      	cmp	r3, r4
 8006a9e:	6025      	str	r5, [r4, #0]
 8006aa0:	bf18      	it	ne
 8006aa2:	6059      	strne	r1, [r3, #4]
 8006aa4:	6863      	ldr	r3, [r4, #4]
 8006aa6:	bf08      	it	eq
 8006aa8:	f8c8 1000 	streq.w	r1, [r8]
 8006aac:	5162      	str	r2, [r4, r5]
 8006aae:	604b      	str	r3, [r1, #4]
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f000 f82f 	bl	8006b14 <__malloc_unlock>
 8006ab6:	f104 000b 	add.w	r0, r4, #11
 8006aba:	1d23      	adds	r3, r4, #4
 8006abc:	f020 0007 	bic.w	r0, r0, #7
 8006ac0:	1ac2      	subs	r2, r0, r3
 8006ac2:	bf1c      	itt	ne
 8006ac4:	1a1b      	subne	r3, r3, r0
 8006ac6:	50a3      	strne	r3, [r4, r2]
 8006ac8:	e7af      	b.n	8006a2a <_malloc_r+0x22>
 8006aca:	6862      	ldr	r2, [r4, #4]
 8006acc:	42a3      	cmp	r3, r4
 8006ace:	bf0c      	ite	eq
 8006ad0:	f8c8 2000 	streq.w	r2, [r8]
 8006ad4:	605a      	strne	r2, [r3, #4]
 8006ad6:	e7eb      	b.n	8006ab0 <_malloc_r+0xa8>
 8006ad8:	4623      	mov	r3, r4
 8006ada:	6864      	ldr	r4, [r4, #4]
 8006adc:	e7ae      	b.n	8006a3c <_malloc_r+0x34>
 8006ade:	463c      	mov	r4, r7
 8006ae0:	687f      	ldr	r7, [r7, #4]
 8006ae2:	e7b6      	b.n	8006a52 <_malloc_r+0x4a>
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	42a3      	cmp	r3, r4
 8006aea:	d1fb      	bne.n	8006ae4 <_malloc_r+0xdc>
 8006aec:	2300      	movs	r3, #0
 8006aee:	6053      	str	r3, [r2, #4]
 8006af0:	e7de      	b.n	8006ab0 <_malloc_r+0xa8>
 8006af2:	230c      	movs	r3, #12
 8006af4:	6033      	str	r3, [r6, #0]
 8006af6:	4630      	mov	r0, r6
 8006af8:	f000 f80c 	bl	8006b14 <__malloc_unlock>
 8006afc:	e794      	b.n	8006a28 <_malloc_r+0x20>
 8006afe:	6005      	str	r5, [r0, #0]
 8006b00:	e7d6      	b.n	8006ab0 <_malloc_r+0xa8>
 8006b02:	bf00      	nop
 8006b04:	200004a0 	.word	0x200004a0

08006b08 <__malloc_lock>:
 8006b08:	4801      	ldr	r0, [pc, #4]	@ (8006b10 <__malloc_lock+0x8>)
 8006b0a:	f7ff bf0e 	b.w	800692a <__retarget_lock_acquire_recursive>
 8006b0e:	bf00      	nop
 8006b10:	20000498 	.word	0x20000498

08006b14 <__malloc_unlock>:
 8006b14:	4801      	ldr	r0, [pc, #4]	@ (8006b1c <__malloc_unlock+0x8>)
 8006b16:	f7ff bf09 	b.w	800692c <__retarget_lock_release_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	20000498 	.word	0x20000498

08006b20 <__sfputc_r>:
 8006b20:	6893      	ldr	r3, [r2, #8]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	b410      	push	{r4}
 8006b28:	6093      	str	r3, [r2, #8]
 8006b2a:	da08      	bge.n	8006b3e <__sfputc_r+0x1e>
 8006b2c:	6994      	ldr	r4, [r2, #24]
 8006b2e:	42a3      	cmp	r3, r4
 8006b30:	db01      	blt.n	8006b36 <__sfputc_r+0x16>
 8006b32:	290a      	cmp	r1, #10
 8006b34:	d103      	bne.n	8006b3e <__sfputc_r+0x1e>
 8006b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b3a:	f7ff bde8 	b.w	800670e <__swbuf_r>
 8006b3e:	6813      	ldr	r3, [r2, #0]
 8006b40:	1c58      	adds	r0, r3, #1
 8006b42:	6010      	str	r0, [r2, #0]
 8006b44:	7019      	strb	r1, [r3, #0]
 8006b46:	4608      	mov	r0, r1
 8006b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <__sfputs_r>:
 8006b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b50:	4606      	mov	r6, r0
 8006b52:	460f      	mov	r7, r1
 8006b54:	4614      	mov	r4, r2
 8006b56:	18d5      	adds	r5, r2, r3
 8006b58:	42ac      	cmp	r4, r5
 8006b5a:	d101      	bne.n	8006b60 <__sfputs_r+0x12>
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	e007      	b.n	8006b70 <__sfputs_r+0x22>
 8006b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b64:	463a      	mov	r2, r7
 8006b66:	4630      	mov	r0, r6
 8006b68:	f7ff ffda 	bl	8006b20 <__sfputc_r>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d1f3      	bne.n	8006b58 <__sfputs_r+0xa>
 8006b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b74 <_vfiprintf_r>:
 8006b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	460d      	mov	r5, r1
 8006b7a:	b09d      	sub	sp, #116	@ 0x74
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	4698      	mov	r8, r3
 8006b80:	4606      	mov	r6, r0
 8006b82:	b118      	cbz	r0, 8006b8c <_vfiprintf_r+0x18>
 8006b84:	6a03      	ldr	r3, [r0, #32]
 8006b86:	b90b      	cbnz	r3, 8006b8c <_vfiprintf_r+0x18>
 8006b88:	f7ff fcd8 	bl	800653c <__sinit>
 8006b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b8e:	07d9      	lsls	r1, r3, #31
 8006b90:	d405      	bmi.n	8006b9e <_vfiprintf_r+0x2a>
 8006b92:	89ab      	ldrh	r3, [r5, #12]
 8006b94:	059a      	lsls	r2, r3, #22
 8006b96:	d402      	bmi.n	8006b9e <_vfiprintf_r+0x2a>
 8006b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b9a:	f7ff fec6 	bl	800692a <__retarget_lock_acquire_recursive>
 8006b9e:	89ab      	ldrh	r3, [r5, #12]
 8006ba0:	071b      	lsls	r3, r3, #28
 8006ba2:	d501      	bpl.n	8006ba8 <_vfiprintf_r+0x34>
 8006ba4:	692b      	ldr	r3, [r5, #16]
 8006ba6:	b99b      	cbnz	r3, 8006bd0 <_vfiprintf_r+0x5c>
 8006ba8:	4629      	mov	r1, r5
 8006baa:	4630      	mov	r0, r6
 8006bac:	f7ff fdee 	bl	800678c <__swsetup_r>
 8006bb0:	b170      	cbz	r0, 8006bd0 <_vfiprintf_r+0x5c>
 8006bb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bb4:	07dc      	lsls	r4, r3, #31
 8006bb6:	d504      	bpl.n	8006bc2 <_vfiprintf_r+0x4e>
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	b01d      	add	sp, #116	@ 0x74
 8006bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc2:	89ab      	ldrh	r3, [r5, #12]
 8006bc4:	0598      	lsls	r0, r3, #22
 8006bc6:	d4f7      	bmi.n	8006bb8 <_vfiprintf_r+0x44>
 8006bc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bca:	f7ff feaf 	bl	800692c <__retarget_lock_release_recursive>
 8006bce:	e7f3      	b.n	8006bb8 <_vfiprintf_r+0x44>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bd4:	2320      	movs	r3, #32
 8006bd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bda:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bde:	2330      	movs	r3, #48	@ 0x30
 8006be0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d90 <_vfiprintf_r+0x21c>
 8006be4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006be8:	f04f 0901 	mov.w	r9, #1
 8006bec:	4623      	mov	r3, r4
 8006bee:	469a      	mov	sl, r3
 8006bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bf4:	b10a      	cbz	r2, 8006bfa <_vfiprintf_r+0x86>
 8006bf6:	2a25      	cmp	r2, #37	@ 0x25
 8006bf8:	d1f9      	bne.n	8006bee <_vfiprintf_r+0x7a>
 8006bfa:	ebba 0b04 	subs.w	fp, sl, r4
 8006bfe:	d00b      	beq.n	8006c18 <_vfiprintf_r+0xa4>
 8006c00:	465b      	mov	r3, fp
 8006c02:	4622      	mov	r2, r4
 8006c04:	4629      	mov	r1, r5
 8006c06:	4630      	mov	r0, r6
 8006c08:	f7ff ffa1 	bl	8006b4e <__sfputs_r>
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	f000 80a7 	beq.w	8006d60 <_vfiprintf_r+0x1ec>
 8006c12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c14:	445a      	add	r2, fp
 8006c16:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c18:	f89a 3000 	ldrb.w	r3, [sl]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 809f 	beq.w	8006d60 <_vfiprintf_r+0x1ec>
 8006c22:	2300      	movs	r3, #0
 8006c24:	f04f 32ff 	mov.w	r2, #4294967295
 8006c28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c2c:	f10a 0a01 	add.w	sl, sl, #1
 8006c30:	9304      	str	r3, [sp, #16]
 8006c32:	9307      	str	r3, [sp, #28]
 8006c34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c38:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c3a:	4654      	mov	r4, sl
 8006c3c:	2205      	movs	r2, #5
 8006c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c42:	4853      	ldr	r0, [pc, #332]	@ (8006d90 <_vfiprintf_r+0x21c>)
 8006c44:	f7f9 fae4 	bl	8000210 <memchr>
 8006c48:	9a04      	ldr	r2, [sp, #16]
 8006c4a:	b9d8      	cbnz	r0, 8006c84 <_vfiprintf_r+0x110>
 8006c4c:	06d1      	lsls	r1, r2, #27
 8006c4e:	bf44      	itt	mi
 8006c50:	2320      	movmi	r3, #32
 8006c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c56:	0713      	lsls	r3, r2, #28
 8006c58:	bf44      	itt	mi
 8006c5a:	232b      	movmi	r3, #43	@ 0x2b
 8006c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c60:	f89a 3000 	ldrb.w	r3, [sl]
 8006c64:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c66:	d015      	beq.n	8006c94 <_vfiprintf_r+0x120>
 8006c68:	9a07      	ldr	r2, [sp, #28]
 8006c6a:	4654      	mov	r4, sl
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	f04f 0c0a 	mov.w	ip, #10
 8006c72:	4621      	mov	r1, r4
 8006c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c78:	3b30      	subs	r3, #48	@ 0x30
 8006c7a:	2b09      	cmp	r3, #9
 8006c7c:	d94b      	bls.n	8006d16 <_vfiprintf_r+0x1a2>
 8006c7e:	b1b0      	cbz	r0, 8006cae <_vfiprintf_r+0x13a>
 8006c80:	9207      	str	r2, [sp, #28]
 8006c82:	e014      	b.n	8006cae <_vfiprintf_r+0x13a>
 8006c84:	eba0 0308 	sub.w	r3, r0, r8
 8006c88:	fa09 f303 	lsl.w	r3, r9, r3
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	9304      	str	r3, [sp, #16]
 8006c90:	46a2      	mov	sl, r4
 8006c92:	e7d2      	b.n	8006c3a <_vfiprintf_r+0xc6>
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	1d19      	adds	r1, r3, #4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	9103      	str	r1, [sp, #12]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	bfbb      	ittet	lt
 8006ca0:	425b      	neglt	r3, r3
 8006ca2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ca6:	9307      	strge	r3, [sp, #28]
 8006ca8:	9307      	strlt	r3, [sp, #28]
 8006caa:	bfb8      	it	lt
 8006cac:	9204      	strlt	r2, [sp, #16]
 8006cae:	7823      	ldrb	r3, [r4, #0]
 8006cb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cb2:	d10a      	bne.n	8006cca <_vfiprintf_r+0x156>
 8006cb4:	7863      	ldrb	r3, [r4, #1]
 8006cb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cb8:	d132      	bne.n	8006d20 <_vfiprintf_r+0x1ac>
 8006cba:	9b03      	ldr	r3, [sp, #12]
 8006cbc:	1d1a      	adds	r2, r3, #4
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	9203      	str	r2, [sp, #12]
 8006cc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cc6:	3402      	adds	r4, #2
 8006cc8:	9305      	str	r3, [sp, #20]
 8006cca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006da0 <_vfiprintf_r+0x22c>
 8006cce:	7821      	ldrb	r1, [r4, #0]
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	4650      	mov	r0, sl
 8006cd4:	f7f9 fa9c 	bl	8000210 <memchr>
 8006cd8:	b138      	cbz	r0, 8006cea <_vfiprintf_r+0x176>
 8006cda:	9b04      	ldr	r3, [sp, #16]
 8006cdc:	eba0 000a 	sub.w	r0, r0, sl
 8006ce0:	2240      	movs	r2, #64	@ 0x40
 8006ce2:	4082      	lsls	r2, r0
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	3401      	adds	r4, #1
 8006ce8:	9304      	str	r3, [sp, #16]
 8006cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cee:	4829      	ldr	r0, [pc, #164]	@ (8006d94 <_vfiprintf_r+0x220>)
 8006cf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cf4:	2206      	movs	r2, #6
 8006cf6:	f7f9 fa8b 	bl	8000210 <memchr>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d03f      	beq.n	8006d7e <_vfiprintf_r+0x20a>
 8006cfe:	4b26      	ldr	r3, [pc, #152]	@ (8006d98 <_vfiprintf_r+0x224>)
 8006d00:	bb1b      	cbnz	r3, 8006d4a <_vfiprintf_r+0x1d6>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	3307      	adds	r3, #7
 8006d06:	f023 0307 	bic.w	r3, r3, #7
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	9303      	str	r3, [sp, #12]
 8006d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d10:	443b      	add	r3, r7
 8006d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d14:	e76a      	b.n	8006bec <_vfiprintf_r+0x78>
 8006d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	2001      	movs	r0, #1
 8006d1e:	e7a8      	b.n	8006c72 <_vfiprintf_r+0xfe>
 8006d20:	2300      	movs	r3, #0
 8006d22:	3401      	adds	r4, #1
 8006d24:	9305      	str	r3, [sp, #20]
 8006d26:	4619      	mov	r1, r3
 8006d28:	f04f 0c0a 	mov.w	ip, #10
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d32:	3a30      	subs	r2, #48	@ 0x30
 8006d34:	2a09      	cmp	r2, #9
 8006d36:	d903      	bls.n	8006d40 <_vfiprintf_r+0x1cc>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0c6      	beq.n	8006cca <_vfiprintf_r+0x156>
 8006d3c:	9105      	str	r1, [sp, #20]
 8006d3e:	e7c4      	b.n	8006cca <_vfiprintf_r+0x156>
 8006d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d44:	4604      	mov	r4, r0
 8006d46:	2301      	movs	r3, #1
 8006d48:	e7f0      	b.n	8006d2c <_vfiprintf_r+0x1b8>
 8006d4a:	ab03      	add	r3, sp, #12
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	462a      	mov	r2, r5
 8006d50:	4b12      	ldr	r3, [pc, #72]	@ (8006d9c <_vfiprintf_r+0x228>)
 8006d52:	a904      	add	r1, sp, #16
 8006d54:	4630      	mov	r0, r6
 8006d56:	f3af 8000 	nop.w
 8006d5a:	4607      	mov	r7, r0
 8006d5c:	1c78      	adds	r0, r7, #1
 8006d5e:	d1d6      	bne.n	8006d0e <_vfiprintf_r+0x19a>
 8006d60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d62:	07d9      	lsls	r1, r3, #31
 8006d64:	d405      	bmi.n	8006d72 <_vfiprintf_r+0x1fe>
 8006d66:	89ab      	ldrh	r3, [r5, #12]
 8006d68:	059a      	lsls	r2, r3, #22
 8006d6a:	d402      	bmi.n	8006d72 <_vfiprintf_r+0x1fe>
 8006d6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d6e:	f7ff fddd 	bl	800692c <__retarget_lock_release_recursive>
 8006d72:	89ab      	ldrh	r3, [r5, #12]
 8006d74:	065b      	lsls	r3, r3, #25
 8006d76:	f53f af1f 	bmi.w	8006bb8 <_vfiprintf_r+0x44>
 8006d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d7c:	e71e      	b.n	8006bbc <_vfiprintf_r+0x48>
 8006d7e:	ab03      	add	r3, sp, #12
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	462a      	mov	r2, r5
 8006d84:	4b05      	ldr	r3, [pc, #20]	@ (8006d9c <_vfiprintf_r+0x228>)
 8006d86:	a904      	add	r1, sp, #16
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f000 f879 	bl	8006e80 <_printf_i>
 8006d8e:	e7e4      	b.n	8006d5a <_vfiprintf_r+0x1e6>
 8006d90:	080073bc 	.word	0x080073bc
 8006d94:	080073c6 	.word	0x080073c6
 8006d98:	00000000 	.word	0x00000000
 8006d9c:	08006b4f 	.word	0x08006b4f
 8006da0:	080073c2 	.word	0x080073c2

08006da4 <_printf_common>:
 8006da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	4616      	mov	r6, r2
 8006daa:	4698      	mov	r8, r3
 8006dac:	688a      	ldr	r2, [r1, #8]
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	bfb8      	it	lt
 8006db8:	4613      	movlt	r3, r2
 8006dba:	6033      	str	r3, [r6, #0]
 8006dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b10a      	cbz	r2, 8006dca <_printf_common+0x26>
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	6033      	str	r3, [r6, #0]
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	0699      	lsls	r1, r3, #26
 8006dce:	bf42      	ittt	mi
 8006dd0:	6833      	ldrmi	r3, [r6, #0]
 8006dd2:	3302      	addmi	r3, #2
 8006dd4:	6033      	strmi	r3, [r6, #0]
 8006dd6:	6825      	ldr	r5, [r4, #0]
 8006dd8:	f015 0506 	ands.w	r5, r5, #6
 8006ddc:	d106      	bne.n	8006dec <_printf_common+0x48>
 8006dde:	f104 0a19 	add.w	sl, r4, #25
 8006de2:	68e3      	ldr	r3, [r4, #12]
 8006de4:	6832      	ldr	r2, [r6, #0]
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	42ab      	cmp	r3, r5
 8006dea:	dc26      	bgt.n	8006e3a <_printf_common+0x96>
 8006dec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006df0:	6822      	ldr	r2, [r4, #0]
 8006df2:	3b00      	subs	r3, #0
 8006df4:	bf18      	it	ne
 8006df6:	2301      	movne	r3, #1
 8006df8:	0692      	lsls	r2, r2, #26
 8006dfa:	d42b      	bmi.n	8006e54 <_printf_common+0xb0>
 8006dfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e00:	4641      	mov	r1, r8
 8006e02:	4638      	mov	r0, r7
 8006e04:	47c8      	blx	r9
 8006e06:	3001      	adds	r0, #1
 8006e08:	d01e      	beq.n	8006e48 <_printf_common+0xa4>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6922      	ldr	r2, [r4, #16]
 8006e0e:	f003 0306 	and.w	r3, r3, #6
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	bf02      	ittt	eq
 8006e16:	68e5      	ldreq	r5, [r4, #12]
 8006e18:	6833      	ldreq	r3, [r6, #0]
 8006e1a:	1aed      	subeq	r5, r5, r3
 8006e1c:	68a3      	ldr	r3, [r4, #8]
 8006e1e:	bf0c      	ite	eq
 8006e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e24:	2500      	movne	r5, #0
 8006e26:	4293      	cmp	r3, r2
 8006e28:	bfc4      	itt	gt
 8006e2a:	1a9b      	subgt	r3, r3, r2
 8006e2c:	18ed      	addgt	r5, r5, r3
 8006e2e:	2600      	movs	r6, #0
 8006e30:	341a      	adds	r4, #26
 8006e32:	42b5      	cmp	r5, r6
 8006e34:	d11a      	bne.n	8006e6c <_printf_common+0xc8>
 8006e36:	2000      	movs	r0, #0
 8006e38:	e008      	b.n	8006e4c <_printf_common+0xa8>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	4652      	mov	r2, sl
 8006e3e:	4641      	mov	r1, r8
 8006e40:	4638      	mov	r0, r7
 8006e42:	47c8      	blx	r9
 8006e44:	3001      	adds	r0, #1
 8006e46:	d103      	bne.n	8006e50 <_printf_common+0xac>
 8006e48:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e50:	3501      	adds	r5, #1
 8006e52:	e7c6      	b.n	8006de2 <_printf_common+0x3e>
 8006e54:	18e1      	adds	r1, r4, r3
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	2030      	movs	r0, #48	@ 0x30
 8006e5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e5e:	4422      	add	r2, r4
 8006e60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e68:	3302      	adds	r3, #2
 8006e6a:	e7c7      	b.n	8006dfc <_printf_common+0x58>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4622      	mov	r2, r4
 8006e70:	4641      	mov	r1, r8
 8006e72:	4638      	mov	r0, r7
 8006e74:	47c8      	blx	r9
 8006e76:	3001      	adds	r0, #1
 8006e78:	d0e6      	beq.n	8006e48 <_printf_common+0xa4>
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7d9      	b.n	8006e32 <_printf_common+0x8e>
	...

08006e80 <_printf_i>:
 8006e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	7e0f      	ldrb	r7, [r1, #24]
 8006e86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e88:	2f78      	cmp	r7, #120	@ 0x78
 8006e8a:	4691      	mov	r9, r2
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	469a      	mov	sl, r3
 8006e92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e96:	d807      	bhi.n	8006ea8 <_printf_i+0x28>
 8006e98:	2f62      	cmp	r7, #98	@ 0x62
 8006e9a:	d80a      	bhi.n	8006eb2 <_printf_i+0x32>
 8006e9c:	2f00      	cmp	r7, #0
 8006e9e:	f000 80d2 	beq.w	8007046 <_printf_i+0x1c6>
 8006ea2:	2f58      	cmp	r7, #88	@ 0x58
 8006ea4:	f000 80b9 	beq.w	800701a <_printf_i+0x19a>
 8006ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006eb0:	e03a      	b.n	8006f28 <_printf_i+0xa8>
 8006eb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006eb6:	2b15      	cmp	r3, #21
 8006eb8:	d8f6      	bhi.n	8006ea8 <_printf_i+0x28>
 8006eba:	a101      	add	r1, pc, #4	@ (adr r1, 8006ec0 <_printf_i+0x40>)
 8006ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ec0:	08006f19 	.word	0x08006f19
 8006ec4:	08006f2d 	.word	0x08006f2d
 8006ec8:	08006ea9 	.word	0x08006ea9
 8006ecc:	08006ea9 	.word	0x08006ea9
 8006ed0:	08006ea9 	.word	0x08006ea9
 8006ed4:	08006ea9 	.word	0x08006ea9
 8006ed8:	08006f2d 	.word	0x08006f2d
 8006edc:	08006ea9 	.word	0x08006ea9
 8006ee0:	08006ea9 	.word	0x08006ea9
 8006ee4:	08006ea9 	.word	0x08006ea9
 8006ee8:	08006ea9 	.word	0x08006ea9
 8006eec:	0800702d 	.word	0x0800702d
 8006ef0:	08006f57 	.word	0x08006f57
 8006ef4:	08006fe7 	.word	0x08006fe7
 8006ef8:	08006ea9 	.word	0x08006ea9
 8006efc:	08006ea9 	.word	0x08006ea9
 8006f00:	0800704f 	.word	0x0800704f
 8006f04:	08006ea9 	.word	0x08006ea9
 8006f08:	08006f57 	.word	0x08006f57
 8006f0c:	08006ea9 	.word	0x08006ea9
 8006f10:	08006ea9 	.word	0x08006ea9
 8006f14:	08006fef 	.word	0x08006fef
 8006f18:	6833      	ldr	r3, [r6, #0]
 8006f1a:	1d1a      	adds	r2, r3, #4
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6032      	str	r2, [r6, #0]
 8006f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e09d      	b.n	8007068 <_printf_i+0x1e8>
 8006f2c:	6833      	ldr	r3, [r6, #0]
 8006f2e:	6820      	ldr	r0, [r4, #0]
 8006f30:	1d19      	adds	r1, r3, #4
 8006f32:	6031      	str	r1, [r6, #0]
 8006f34:	0606      	lsls	r6, r0, #24
 8006f36:	d501      	bpl.n	8006f3c <_printf_i+0xbc>
 8006f38:	681d      	ldr	r5, [r3, #0]
 8006f3a:	e003      	b.n	8006f44 <_printf_i+0xc4>
 8006f3c:	0645      	lsls	r5, r0, #25
 8006f3e:	d5fb      	bpl.n	8006f38 <_printf_i+0xb8>
 8006f40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	da03      	bge.n	8006f50 <_printf_i+0xd0>
 8006f48:	232d      	movs	r3, #45	@ 0x2d
 8006f4a:	426d      	negs	r5, r5
 8006f4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f50:	4859      	ldr	r0, [pc, #356]	@ (80070b8 <_printf_i+0x238>)
 8006f52:	230a      	movs	r3, #10
 8006f54:	e011      	b.n	8006f7a <_printf_i+0xfa>
 8006f56:	6821      	ldr	r1, [r4, #0]
 8006f58:	6833      	ldr	r3, [r6, #0]
 8006f5a:	0608      	lsls	r0, r1, #24
 8006f5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f60:	d402      	bmi.n	8006f68 <_printf_i+0xe8>
 8006f62:	0649      	lsls	r1, r1, #25
 8006f64:	bf48      	it	mi
 8006f66:	b2ad      	uxthmi	r5, r5
 8006f68:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f6a:	4853      	ldr	r0, [pc, #332]	@ (80070b8 <_printf_i+0x238>)
 8006f6c:	6033      	str	r3, [r6, #0]
 8006f6e:	bf14      	ite	ne
 8006f70:	230a      	movne	r3, #10
 8006f72:	2308      	moveq	r3, #8
 8006f74:	2100      	movs	r1, #0
 8006f76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f7a:	6866      	ldr	r6, [r4, #4]
 8006f7c:	60a6      	str	r6, [r4, #8]
 8006f7e:	2e00      	cmp	r6, #0
 8006f80:	bfa2      	ittt	ge
 8006f82:	6821      	ldrge	r1, [r4, #0]
 8006f84:	f021 0104 	bicge.w	r1, r1, #4
 8006f88:	6021      	strge	r1, [r4, #0]
 8006f8a:	b90d      	cbnz	r5, 8006f90 <_printf_i+0x110>
 8006f8c:	2e00      	cmp	r6, #0
 8006f8e:	d04b      	beq.n	8007028 <_printf_i+0x1a8>
 8006f90:	4616      	mov	r6, r2
 8006f92:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f96:	fb03 5711 	mls	r7, r3, r1, r5
 8006f9a:	5dc7      	ldrb	r7, [r0, r7]
 8006f9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fa0:	462f      	mov	r7, r5
 8006fa2:	42bb      	cmp	r3, r7
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	d9f4      	bls.n	8006f92 <_printf_i+0x112>
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d10b      	bne.n	8006fc4 <_printf_i+0x144>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	07df      	lsls	r7, r3, #31
 8006fb0:	d508      	bpl.n	8006fc4 <_printf_i+0x144>
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	6861      	ldr	r1, [r4, #4]
 8006fb6:	4299      	cmp	r1, r3
 8006fb8:	bfde      	ittt	le
 8006fba:	2330      	movle	r3, #48	@ 0x30
 8006fbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fc4:	1b92      	subs	r2, r2, r6
 8006fc6:	6122      	str	r2, [r4, #16]
 8006fc8:	f8cd a000 	str.w	sl, [sp]
 8006fcc:	464b      	mov	r3, r9
 8006fce:	aa03      	add	r2, sp, #12
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	f7ff fee6 	bl	8006da4 <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d14a      	bne.n	8007072 <_printf_i+0x1f2>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	b004      	add	sp, #16
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	f043 0320 	orr.w	r3, r3, #32
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	4833      	ldr	r0, [pc, #204]	@ (80070bc <_printf_i+0x23c>)
 8006ff0:	2778      	movs	r7, #120	@ 0x78
 8006ff2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	6831      	ldr	r1, [r6, #0]
 8006ffa:	061f      	lsls	r7, r3, #24
 8006ffc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007000:	d402      	bmi.n	8007008 <_printf_i+0x188>
 8007002:	065f      	lsls	r7, r3, #25
 8007004:	bf48      	it	mi
 8007006:	b2ad      	uxthmi	r5, r5
 8007008:	6031      	str	r1, [r6, #0]
 800700a:	07d9      	lsls	r1, r3, #31
 800700c:	bf44      	itt	mi
 800700e:	f043 0320 	orrmi.w	r3, r3, #32
 8007012:	6023      	strmi	r3, [r4, #0]
 8007014:	b11d      	cbz	r5, 800701e <_printf_i+0x19e>
 8007016:	2310      	movs	r3, #16
 8007018:	e7ac      	b.n	8006f74 <_printf_i+0xf4>
 800701a:	4827      	ldr	r0, [pc, #156]	@ (80070b8 <_printf_i+0x238>)
 800701c:	e7e9      	b.n	8006ff2 <_printf_i+0x172>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	f023 0320 	bic.w	r3, r3, #32
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	e7f6      	b.n	8007016 <_printf_i+0x196>
 8007028:	4616      	mov	r6, r2
 800702a:	e7bd      	b.n	8006fa8 <_printf_i+0x128>
 800702c:	6833      	ldr	r3, [r6, #0]
 800702e:	6825      	ldr	r5, [r4, #0]
 8007030:	6961      	ldr	r1, [r4, #20]
 8007032:	1d18      	adds	r0, r3, #4
 8007034:	6030      	str	r0, [r6, #0]
 8007036:	062e      	lsls	r6, r5, #24
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	d501      	bpl.n	8007040 <_printf_i+0x1c0>
 800703c:	6019      	str	r1, [r3, #0]
 800703e:	e002      	b.n	8007046 <_printf_i+0x1c6>
 8007040:	0668      	lsls	r0, r5, #25
 8007042:	d5fb      	bpl.n	800703c <_printf_i+0x1bc>
 8007044:	8019      	strh	r1, [r3, #0]
 8007046:	2300      	movs	r3, #0
 8007048:	6123      	str	r3, [r4, #16]
 800704a:	4616      	mov	r6, r2
 800704c:	e7bc      	b.n	8006fc8 <_printf_i+0x148>
 800704e:	6833      	ldr	r3, [r6, #0]
 8007050:	1d1a      	adds	r2, r3, #4
 8007052:	6032      	str	r2, [r6, #0]
 8007054:	681e      	ldr	r6, [r3, #0]
 8007056:	6862      	ldr	r2, [r4, #4]
 8007058:	2100      	movs	r1, #0
 800705a:	4630      	mov	r0, r6
 800705c:	f7f9 f8d8 	bl	8000210 <memchr>
 8007060:	b108      	cbz	r0, 8007066 <_printf_i+0x1e6>
 8007062:	1b80      	subs	r0, r0, r6
 8007064:	6060      	str	r0, [r4, #4]
 8007066:	6863      	ldr	r3, [r4, #4]
 8007068:	6123      	str	r3, [r4, #16]
 800706a:	2300      	movs	r3, #0
 800706c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007070:	e7aa      	b.n	8006fc8 <_printf_i+0x148>
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	4632      	mov	r2, r6
 8007076:	4649      	mov	r1, r9
 8007078:	4640      	mov	r0, r8
 800707a:	47d0      	blx	sl
 800707c:	3001      	adds	r0, #1
 800707e:	d0ad      	beq.n	8006fdc <_printf_i+0x15c>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	079b      	lsls	r3, r3, #30
 8007084:	d413      	bmi.n	80070ae <_printf_i+0x22e>
 8007086:	68e0      	ldr	r0, [r4, #12]
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	4298      	cmp	r0, r3
 800708c:	bfb8      	it	lt
 800708e:	4618      	movlt	r0, r3
 8007090:	e7a6      	b.n	8006fe0 <_printf_i+0x160>
 8007092:	2301      	movs	r3, #1
 8007094:	4632      	mov	r2, r6
 8007096:	4649      	mov	r1, r9
 8007098:	4640      	mov	r0, r8
 800709a:	47d0      	blx	sl
 800709c:	3001      	adds	r0, #1
 800709e:	d09d      	beq.n	8006fdc <_printf_i+0x15c>
 80070a0:	3501      	adds	r5, #1
 80070a2:	68e3      	ldr	r3, [r4, #12]
 80070a4:	9903      	ldr	r1, [sp, #12]
 80070a6:	1a5b      	subs	r3, r3, r1
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	dcf2      	bgt.n	8007092 <_printf_i+0x212>
 80070ac:	e7eb      	b.n	8007086 <_printf_i+0x206>
 80070ae:	2500      	movs	r5, #0
 80070b0:	f104 0619 	add.w	r6, r4, #25
 80070b4:	e7f5      	b.n	80070a2 <_printf_i+0x222>
 80070b6:	bf00      	nop
 80070b8:	080073cd 	.word	0x080073cd
 80070bc:	080073de 	.word	0x080073de

080070c0 <__sflush_r>:
 80070c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c8:	0716      	lsls	r6, r2, #28
 80070ca:	4605      	mov	r5, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	d454      	bmi.n	800717a <__sflush_r+0xba>
 80070d0:	684b      	ldr	r3, [r1, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	dc02      	bgt.n	80070dc <__sflush_r+0x1c>
 80070d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	dd48      	ble.n	800716e <__sflush_r+0xae>
 80070dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070de:	2e00      	cmp	r6, #0
 80070e0:	d045      	beq.n	800716e <__sflush_r+0xae>
 80070e2:	2300      	movs	r3, #0
 80070e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80070e8:	682f      	ldr	r7, [r5, #0]
 80070ea:	6a21      	ldr	r1, [r4, #32]
 80070ec:	602b      	str	r3, [r5, #0]
 80070ee:	d030      	beq.n	8007152 <__sflush_r+0x92>
 80070f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	0759      	lsls	r1, r3, #29
 80070f6:	d505      	bpl.n	8007104 <__sflush_r+0x44>
 80070f8:	6863      	ldr	r3, [r4, #4]
 80070fa:	1ad2      	subs	r2, r2, r3
 80070fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070fe:	b10b      	cbz	r3, 8007104 <__sflush_r+0x44>
 8007100:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007102:	1ad2      	subs	r2, r2, r3
 8007104:	2300      	movs	r3, #0
 8007106:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007108:	6a21      	ldr	r1, [r4, #32]
 800710a:	4628      	mov	r0, r5
 800710c:	47b0      	blx	r6
 800710e:	1c43      	adds	r3, r0, #1
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	d106      	bne.n	8007122 <__sflush_r+0x62>
 8007114:	6829      	ldr	r1, [r5, #0]
 8007116:	291d      	cmp	r1, #29
 8007118:	d82b      	bhi.n	8007172 <__sflush_r+0xb2>
 800711a:	4a2a      	ldr	r2, [pc, #168]	@ (80071c4 <__sflush_r+0x104>)
 800711c:	410a      	asrs	r2, r1
 800711e:	07d6      	lsls	r6, r2, #31
 8007120:	d427      	bmi.n	8007172 <__sflush_r+0xb2>
 8007122:	2200      	movs	r2, #0
 8007124:	6062      	str	r2, [r4, #4]
 8007126:	04d9      	lsls	r1, r3, #19
 8007128:	6922      	ldr	r2, [r4, #16]
 800712a:	6022      	str	r2, [r4, #0]
 800712c:	d504      	bpl.n	8007138 <__sflush_r+0x78>
 800712e:	1c42      	adds	r2, r0, #1
 8007130:	d101      	bne.n	8007136 <__sflush_r+0x76>
 8007132:	682b      	ldr	r3, [r5, #0]
 8007134:	b903      	cbnz	r3, 8007138 <__sflush_r+0x78>
 8007136:	6560      	str	r0, [r4, #84]	@ 0x54
 8007138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800713a:	602f      	str	r7, [r5, #0]
 800713c:	b1b9      	cbz	r1, 800716e <__sflush_r+0xae>
 800713e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007142:	4299      	cmp	r1, r3
 8007144:	d002      	beq.n	800714c <__sflush_r+0x8c>
 8007146:	4628      	mov	r0, r5
 8007148:	f7ff fbf2 	bl	8006930 <_free_r>
 800714c:	2300      	movs	r3, #0
 800714e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007150:	e00d      	b.n	800716e <__sflush_r+0xae>
 8007152:	2301      	movs	r3, #1
 8007154:	4628      	mov	r0, r5
 8007156:	47b0      	blx	r6
 8007158:	4602      	mov	r2, r0
 800715a:	1c50      	adds	r0, r2, #1
 800715c:	d1c9      	bne.n	80070f2 <__sflush_r+0x32>
 800715e:	682b      	ldr	r3, [r5, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0c6      	beq.n	80070f2 <__sflush_r+0x32>
 8007164:	2b1d      	cmp	r3, #29
 8007166:	d001      	beq.n	800716c <__sflush_r+0xac>
 8007168:	2b16      	cmp	r3, #22
 800716a:	d11e      	bne.n	80071aa <__sflush_r+0xea>
 800716c:	602f      	str	r7, [r5, #0]
 800716e:	2000      	movs	r0, #0
 8007170:	e022      	b.n	80071b8 <__sflush_r+0xf8>
 8007172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007176:	b21b      	sxth	r3, r3
 8007178:	e01b      	b.n	80071b2 <__sflush_r+0xf2>
 800717a:	690f      	ldr	r7, [r1, #16]
 800717c:	2f00      	cmp	r7, #0
 800717e:	d0f6      	beq.n	800716e <__sflush_r+0xae>
 8007180:	0793      	lsls	r3, r2, #30
 8007182:	680e      	ldr	r6, [r1, #0]
 8007184:	bf08      	it	eq
 8007186:	694b      	ldreq	r3, [r1, #20]
 8007188:	600f      	str	r7, [r1, #0]
 800718a:	bf18      	it	ne
 800718c:	2300      	movne	r3, #0
 800718e:	eba6 0807 	sub.w	r8, r6, r7
 8007192:	608b      	str	r3, [r1, #8]
 8007194:	f1b8 0f00 	cmp.w	r8, #0
 8007198:	dde9      	ble.n	800716e <__sflush_r+0xae>
 800719a:	6a21      	ldr	r1, [r4, #32]
 800719c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800719e:	4643      	mov	r3, r8
 80071a0:	463a      	mov	r2, r7
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b0      	blx	r6
 80071a6:	2800      	cmp	r0, #0
 80071a8:	dc08      	bgt.n	80071bc <__sflush_r+0xfc>
 80071aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b2:	81a3      	strh	r3, [r4, #12]
 80071b4:	f04f 30ff 	mov.w	r0, #4294967295
 80071b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071bc:	4407      	add	r7, r0
 80071be:	eba8 0800 	sub.w	r8, r8, r0
 80071c2:	e7e7      	b.n	8007194 <__sflush_r+0xd4>
 80071c4:	dfbffffe 	.word	0xdfbffffe

080071c8 <_fflush_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	690b      	ldr	r3, [r1, #16]
 80071cc:	4605      	mov	r5, r0
 80071ce:	460c      	mov	r4, r1
 80071d0:	b913      	cbnz	r3, 80071d8 <_fflush_r+0x10>
 80071d2:	2500      	movs	r5, #0
 80071d4:	4628      	mov	r0, r5
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	b118      	cbz	r0, 80071e2 <_fflush_r+0x1a>
 80071da:	6a03      	ldr	r3, [r0, #32]
 80071dc:	b90b      	cbnz	r3, 80071e2 <_fflush_r+0x1a>
 80071de:	f7ff f9ad 	bl	800653c <__sinit>
 80071e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0f3      	beq.n	80071d2 <_fflush_r+0xa>
 80071ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80071ec:	07d0      	lsls	r0, r2, #31
 80071ee:	d404      	bmi.n	80071fa <_fflush_r+0x32>
 80071f0:	0599      	lsls	r1, r3, #22
 80071f2:	d402      	bmi.n	80071fa <_fflush_r+0x32>
 80071f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071f6:	f7ff fb98 	bl	800692a <__retarget_lock_acquire_recursive>
 80071fa:	4628      	mov	r0, r5
 80071fc:	4621      	mov	r1, r4
 80071fe:	f7ff ff5f 	bl	80070c0 <__sflush_r>
 8007202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007204:	07da      	lsls	r2, r3, #31
 8007206:	4605      	mov	r5, r0
 8007208:	d4e4      	bmi.n	80071d4 <_fflush_r+0xc>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	059b      	lsls	r3, r3, #22
 800720e:	d4e1      	bmi.n	80071d4 <_fflush_r+0xc>
 8007210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007212:	f7ff fb8b 	bl	800692c <__retarget_lock_release_recursive>
 8007216:	e7dd      	b.n	80071d4 <_fflush_r+0xc>

08007218 <__swhatbuf_r>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	460c      	mov	r4, r1
 800721c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007220:	2900      	cmp	r1, #0
 8007222:	b096      	sub	sp, #88	@ 0x58
 8007224:	4615      	mov	r5, r2
 8007226:	461e      	mov	r6, r3
 8007228:	da0d      	bge.n	8007246 <__swhatbuf_r+0x2e>
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007230:	f04f 0100 	mov.w	r1, #0
 8007234:	bf14      	ite	ne
 8007236:	2340      	movne	r3, #64	@ 0x40
 8007238:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800723c:	2000      	movs	r0, #0
 800723e:	6031      	str	r1, [r6, #0]
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	b016      	add	sp, #88	@ 0x58
 8007244:	bd70      	pop	{r4, r5, r6, pc}
 8007246:	466a      	mov	r2, sp
 8007248:	f000 f848 	bl	80072dc <_fstat_r>
 800724c:	2800      	cmp	r0, #0
 800724e:	dbec      	blt.n	800722a <__swhatbuf_r+0x12>
 8007250:	9901      	ldr	r1, [sp, #4]
 8007252:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007256:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800725a:	4259      	negs	r1, r3
 800725c:	4159      	adcs	r1, r3
 800725e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007262:	e7eb      	b.n	800723c <__swhatbuf_r+0x24>

08007264 <__smakebuf_r>:
 8007264:	898b      	ldrh	r3, [r1, #12]
 8007266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007268:	079d      	lsls	r5, r3, #30
 800726a:	4606      	mov	r6, r0
 800726c:	460c      	mov	r4, r1
 800726e:	d507      	bpl.n	8007280 <__smakebuf_r+0x1c>
 8007270:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	6123      	str	r3, [r4, #16]
 8007278:	2301      	movs	r3, #1
 800727a:	6163      	str	r3, [r4, #20]
 800727c:	b003      	add	sp, #12
 800727e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007280:	ab01      	add	r3, sp, #4
 8007282:	466a      	mov	r2, sp
 8007284:	f7ff ffc8 	bl	8007218 <__swhatbuf_r>
 8007288:	9f00      	ldr	r7, [sp, #0]
 800728a:	4605      	mov	r5, r0
 800728c:	4639      	mov	r1, r7
 800728e:	4630      	mov	r0, r6
 8007290:	f7ff fbba 	bl	8006a08 <_malloc_r>
 8007294:	b948      	cbnz	r0, 80072aa <__smakebuf_r+0x46>
 8007296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800729a:	059a      	lsls	r2, r3, #22
 800729c:	d4ee      	bmi.n	800727c <__smakebuf_r+0x18>
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	f043 0302 	orr.w	r3, r3, #2
 80072a6:	81a3      	strh	r3, [r4, #12]
 80072a8:	e7e2      	b.n	8007270 <__smakebuf_r+0xc>
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	6020      	str	r0, [r4, #0]
 80072ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b2:	81a3      	strh	r3, [r4, #12]
 80072b4:	9b01      	ldr	r3, [sp, #4]
 80072b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80072ba:	b15b      	cbz	r3, 80072d4 <__smakebuf_r+0x70>
 80072bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072c0:	4630      	mov	r0, r6
 80072c2:	f000 f81d 	bl	8007300 <_isatty_r>
 80072c6:	b128      	cbz	r0, 80072d4 <__smakebuf_r+0x70>
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	f023 0303 	bic.w	r3, r3, #3
 80072ce:	f043 0301 	orr.w	r3, r3, #1
 80072d2:	81a3      	strh	r3, [r4, #12]
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	431d      	orrs	r5, r3
 80072d8:	81a5      	strh	r5, [r4, #12]
 80072da:	e7cf      	b.n	800727c <__smakebuf_r+0x18>

080072dc <_fstat_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d07      	ldr	r5, [pc, #28]	@ (80072fc <_fstat_r+0x20>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	4611      	mov	r1, r2
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	f7fa fc34 	bl	8001b56 <_fstat>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d102      	bne.n	80072f8 <_fstat_r+0x1c>
 80072f2:	682b      	ldr	r3, [r5, #0]
 80072f4:	b103      	cbz	r3, 80072f8 <_fstat_r+0x1c>
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	bf00      	nop
 80072fc:	20000494 	.word	0x20000494

08007300 <_isatty_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4d06      	ldr	r5, [pc, #24]	@ (800731c <_isatty_r+0x1c>)
 8007304:	2300      	movs	r3, #0
 8007306:	4604      	mov	r4, r0
 8007308:	4608      	mov	r0, r1
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	f7fa fc33 	bl	8001b76 <_isatty>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_isatty_r+0x1a>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	b103      	cbz	r3, 800731a <_isatty_r+0x1a>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	20000494 	.word	0x20000494

08007320 <_sbrk_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4d06      	ldr	r5, [pc, #24]	@ (800733c <_sbrk_r+0x1c>)
 8007324:	2300      	movs	r3, #0
 8007326:	4604      	mov	r4, r0
 8007328:	4608      	mov	r0, r1
 800732a:	602b      	str	r3, [r5, #0]
 800732c:	f7fa fc3c 	bl	8001ba8 <_sbrk>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_sbrk_r+0x1a>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b103      	cbz	r3, 800733a <_sbrk_r+0x1a>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	20000494 	.word	0x20000494

08007340 <_init>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr

0800734c <_fini>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	bf00      	nop
 8007350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007352:	bc08      	pop	{r3}
 8007354:	469e      	mov	lr, r3
 8007356:	4770      	bx	lr
