
work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000459c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080046a8  080046a8  000056a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004784  08004784  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004784  08004784  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004784  08004784  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004784  08004784  00005784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004788  08004788  00005788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800478c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a10  20000068  080047f4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a78  080047f4  00006a78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a5ee  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f31  00000000  00000000  0001067f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  000125b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000720  00000000  00000000  00012f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018591  00000000  00000000  00013640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b629  00000000  00000000  0002bbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008682c  00000000  00000000  000371fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bda26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc8  00000000  00000000  000bda6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000c0734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004690 	.word	0x08004690

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004690 	.word	0x08004690

0800014c <GetElapsedTick>:
 */

#include "lib.h"

uint32_t GetElapsedTick(uint32_t start)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 8000154:	f000 feb4 	bl	8000ec0 <HAL_GetTick>
 8000158:	60f8      	str	r0, [r7, #12]

	if (now >= start)
 800015a:	68fa      	ldr	r2, [r7, #12]
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	429a      	cmp	r2, r3
 8000160:	d303      	bcc.n	800016a <GetElapsedTick+0x1e>
		return now - start;
 8000162:	68fa      	ldr	r2, [r7, #12]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	1ad3      	subs	r3, r2, r3
 8000168:	e005      	b.n	8000176 <GetElapsedTick+0x2a>
	else
		return (0xffff - start) + now;
 800016a:	68fa      	ldr	r2, [r7, #12]
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	1ad3      	subs	r3, r2, r3
 8000170:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000174:	33ff      	adds	r3, #255	@ 0xff
}
 8000176:	4618      	mov	r0, r3
 8000178:	3710      	adds	r7, #16
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
	...

08000180 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	// printf()함수를 실행했을 때 UART로 출력
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8000188:	1d39      	adds	r1, r7, #4
 800018a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800018e:	2201      	movs	r2, #1
 8000190:	4803      	ldr	r0, [pc, #12]	@ (80001a0 <__io_putchar+0x20>)
 8000192:	f002 fccb 	bl	8002b2c <HAL_UART_Transmit>
	return ch;
 8000196:	687b      	ldr	r3, [r7, #4]
}
 8000198:	4618      	mov	r0, r3
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	200000ac 	.word	0x200000ac

080001a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a8:	f000 fe32 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ac:	f000 f810 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b0:	f000 f8d6 	bl	8000360 <MX_GPIO_Init>
  MX_CAN_Init();
 80001b4:	f000 f852 	bl	800025c <MX_CAN_Init>
  MX_USART1_UART_Init();
 80001b8:	f000 f8a8 	bl	800030c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  InitWork();
 80001bc:	f000 fb10 	bl	80007e0 <InitWork>
  printf("Start\r\n");
 80001c0:	4802      	ldr	r0, [pc, #8]	@ (80001cc <main+0x28>)
 80001c2:	f003 fbf7 	bl	80039b4 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DoWork();
 80001c6:	f000 fcb9 	bl	8000b3c <DoWork>
 80001ca:	e7fc      	b.n	80001c6 <main+0x22>
 80001cc:	080046a8 	.word	0x080046a8

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	@ 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	@ 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f003 fcc8 	bl	8003b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f2:	2301      	movs	r3, #1
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000204:	2302      	movs	r3, #2
 8000206:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000208:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800020c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800020e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0318 	add.w	r3, r7, #24
 8000218:	4618      	mov	r0, r3
 800021a:	f002 f827 	bl	800226c <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000224:	f000 f902 	bl	800042c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022c:	2302      	movs	r3, #2
 800022e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000234:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2102      	movs	r1, #2
 8000242:	4618      	mov	r0, r3
 8000244:	f002 fa94 	bl	8002770 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800024e:	f000 f8ed 	bl	800042c <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	@ 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b08a      	sub	sp, #40	@ 0x28
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000262:	4b28      	ldr	r3, [pc, #160]	@ (8000304 <MX_CAN_Init+0xa8>)
 8000264:	4a28      	ldr	r2, [pc, #160]	@ (8000308 <MX_CAN_Init+0xac>)
 8000266:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000268:	4b26      	ldr	r3, [pc, #152]	@ (8000304 <MX_CAN_Init+0xa8>)
 800026a:	2204      	movs	r2, #4
 800026c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800026e:	4b25      	ldr	r3, [pc, #148]	@ (8000304 <MX_CAN_Init+0xa8>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000274:	4b23      	ldr	r3, [pc, #140]	@ (8000304 <MX_CAN_Init+0xa8>)
 8000276:	2200      	movs	r2, #0
 8000278:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800027a:	4b22      	ldr	r3, [pc, #136]	@ (8000304 <MX_CAN_Init+0xa8>)
 800027c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000280:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000282:	4b20      	ldr	r3, [pc, #128]	@ (8000304 <MX_CAN_Init+0xa8>)
 8000284:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000288:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800028a:	4b1e      	ldr	r3, [pc, #120]	@ (8000304 <MX_CAN_Init+0xa8>)
 800028c:	2200      	movs	r2, #0
 800028e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000290:	4b1c      	ldr	r3, [pc, #112]	@ (8000304 <MX_CAN_Init+0xa8>)
 8000292:	2200      	movs	r2, #0
 8000294:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000296:	4b1b      	ldr	r3, [pc, #108]	@ (8000304 <MX_CAN_Init+0xa8>)
 8000298:	2200      	movs	r2, #0
 800029a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800029c:	4b19      	ldr	r3, [pc, #100]	@ (8000304 <MX_CAN_Init+0xa8>)
 800029e:	2200      	movs	r2, #0
 80002a0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002a2:	4b18      	ldr	r3, [pc, #96]	@ (8000304 <MX_CAN_Init+0xa8>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002a8:	4b16      	ldr	r3, [pc, #88]	@ (8000304 <MX_CAN_Init+0xa8>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002ae:	4815      	ldr	r0, [pc, #84]	@ (8000304 <MX_CAN_Init+0xa8>)
 80002b0:	f000 fe10 	bl	8000ed4 <HAL_CAN_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80002ba:	f000 f8b7 	bl	800042c <Error_Handler>
  }

  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002c2:	2300      	movs	r3, #0
 80002c4:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80002ca:	2300      	movs	r3, #0
 80002cc:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80002ce:	2300      	movs	r3, #0
 80002d0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80002de:	2301      	movs	r3, #1
 80002e0:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80002e2:	230e      	movs	r3, #14
 80002e4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80002e6:	463b      	mov	r3, r7
 80002e8:	4619      	mov	r1, r3
 80002ea:	4806      	ldr	r0, [pc, #24]	@ (8000304 <MX_CAN_Init+0xa8>)
 80002ec:	f000 feed 	bl	80010ca <HAL_CAN_ConfigFilter>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_CAN_Init+0x9e>
  {
    /* Filter configuration Error */
    Error_Handler();
 80002f6:	f000 f899 	bl	800042c <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	3728      	adds	r7, #40	@ 0x28
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000084 	.word	0x20000084
 8000308:	40006400 	.word	0x40006400

0800030c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	@ (800035c <MX_USART1_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000344:	f002 fba2 	bl	8002a8c <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034e:	f000 f86d 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000ac 	.word	0x200000ac
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000374:	4b2b      	ldr	r3, [pc, #172]	@ (8000424 <MX_GPIO_Init+0xc4>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a2a      	ldr	r2, [pc, #168]	@ (8000424 <MX_GPIO_Init+0xc4>)
 800037a:	f043 0320 	orr.w	r3, r3, #32
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b28      	ldr	r3, [pc, #160]	@ (8000424 <MX_GPIO_Init+0xc4>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0320 	and.w	r3, r3, #32
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038c:	4b25      	ldr	r3, [pc, #148]	@ (8000424 <MX_GPIO_Init+0xc4>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a24      	ldr	r2, [pc, #144]	@ (8000424 <MX_GPIO_Init+0xc4>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b22      	ldr	r3, [pc, #136]	@ (8000424 <MX_GPIO_Init+0xc4>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0308 	and.w	r3, r3, #8
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000424 <MX_GPIO_Init+0xc4>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80003c2:	4819      	ldr	r0, [pc, #100]	@ (8000428 <MX_GPIO_Init+0xc8>)
 80003c4:	f001 ff21 	bl	800220a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	4812      	ldr	r0, [pc, #72]	@ (8000428 <MX_GPIO_Init+0xc8>)
 80003de:	f001 fd79 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	480c      	ldr	r0, [pc, #48]	@ (8000428 <MX_GPIO_Init+0xc8>)
 80003f8:	f001 fd6c 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80003fc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	2301      	movs	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040a:	2302      	movs	r3, #2
 800040c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	4619      	mov	r1, r3
 8000414:	4804      	ldr	r0, [pc, #16]	@ (8000428 <MX_GPIO_Init+0xc8>)
 8000416:	f001 fd5d 	bl	8001ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041a:	bf00      	nop
 800041c:	3720      	adds	r7, #32
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000
 8000428:	40010c00 	.word	0x40010c00

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <Error_Handler+0x8>

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a14      	ldr	r2, [pc, #80]	@ (8000494 <HAL_MspInit+0x5c>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <HAL_MspInit+0x5c>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <HAL_MspInit+0x60>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <HAL_MspInit+0x60>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	@ 0x28
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a29      	ldr	r2, [pc, #164]	@ (800055c <HAL_CAN_MspInit+0xc0>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d14b      	bne.n	8000554 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004bc:	4b28      	ldr	r3, [pc, #160]	@ (8000560 <HAL_CAN_MspInit+0xc4>)
 80004be:	69db      	ldr	r3, [r3, #28]
 80004c0:	4a27      	ldr	r2, [pc, #156]	@ (8000560 <HAL_CAN_MspInit+0xc4>)
 80004c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004c6:	61d3      	str	r3, [r2, #28]
 80004c8:	4b25      	ldr	r3, [pc, #148]	@ (8000560 <HAL_CAN_MspInit+0xc4>)
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004d0:	613b      	str	r3, [r7, #16]
 80004d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b22      	ldr	r3, [pc, #136]	@ (8000560 <HAL_CAN_MspInit+0xc4>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <HAL_CAN_MspInit+0xc4>)
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <HAL_CAN_MspInit+0xc4>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4619      	mov	r1, r3
 8000500:	4818      	ldr	r0, [pc, #96]	@ (8000564 <HAL_CAN_MspInit+0xc8>)
 8000502:	f001 fce7 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000506:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800050a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050c:	2302      	movs	r3, #2
 800050e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	4812      	ldr	r0, [pc, #72]	@ (8000564 <HAL_CAN_MspInit+0xc8>)
 800051c:	f001 fcda 	bl	8001ed4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000520:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <HAL_CAN_MspInit+0xcc>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	627b      	str	r3, [r7, #36]	@ 0x24
 8000526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000528:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 800052c:	627b      	str	r3, [r7, #36]	@ 0x24
 800052e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000530:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000534:	627b      	str	r3, [r7, #36]	@ 0x24
 8000536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800053c:	627b      	str	r3, [r7, #36]	@ 0x24
 800053e:	4a0a      	ldr	r2, [pc, #40]	@ (8000568 <HAL_CAN_MspInit+0xcc>)
 8000540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000542:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2100      	movs	r1, #0
 8000548:	2014      	movs	r0, #20
 800054a:	f001 fbda 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800054e:	2014      	movs	r0, #20
 8000550:	f001 fbf3 	bl	8001d3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000554:	bf00      	nop
 8000556:	3728      	adds	r7, #40	@ 0x28
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40006400 	.word	0x40006400
 8000560:	40021000 	.word	0x40021000
 8000564:	40010c00 	.word	0x40010c00
 8000568:	40010000 	.word	0x40010000

0800056c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a20      	ldr	r2, [pc, #128]	@ (8000608 <HAL_UART_MspInit+0x9c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d139      	bne.n	8000600 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800058c:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <HAL_UART_MspInit+0xa0>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a1e      	ldr	r2, [pc, #120]	@ (800060c <HAL_UART_MspInit+0xa0>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <HAL_UART_MspInit+0xa0>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b19      	ldr	r3, [pc, #100]	@ (800060c <HAL_UART_MspInit+0xa0>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a18      	ldr	r2, [pc, #96]	@ (800060c <HAL_UART_MspInit+0xa0>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b16      	ldr	r3, [pc, #88]	@ (800060c <HAL_UART_MspInit+0xa0>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	2302      	movs	r3, #2
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	4619      	mov	r1, r3
 80005d0:	480f      	ldr	r0, [pc, #60]	@ (8000610 <HAL_UART_MspInit+0xa4>)
 80005d2:	f001 fc7f 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4809      	ldr	r0, [pc, #36]	@ (8000610 <HAL_UART_MspInit+0xa4>)
 80005ec:	f001 fc72 	bl	8001ed4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2025      	movs	r0, #37	@ 0x25
 80005f6:	f001 fb84 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005fa:	2025      	movs	r0, #37	@ 0x25
 80005fc:	f001 fb9d 	bl	8001d3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40013800 	.word	0x40013800
 800060c:	40021000 	.word	0x40021000
 8000610:	40010800 	.word	0x40010800

08000614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <NMI_Handler+0x4>

0800061c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <MemManage_Handler+0x4>

0800062c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <BusFault_Handler+0x4>

08000634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <UsageFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 fc1a 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000670:	4802      	ldr	r0, [pc, #8]	@ (800067c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000672:	f001 f84c 	bl	800170e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000084 	.word	0x20000084

08000680 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000684:	4802      	ldr	r0, [pc, #8]	@ (8000690 <USART1_IRQHandler+0x10>)
 8000686:	f002 fb01 	bl	8002c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000ac 	.word	0x200000ac

08000694 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	e00a      	b.n	80006bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006a6:	f3af 8000 	nop.w
 80006aa:	4601      	mov	r1, r0
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	60ba      	str	r2, [r7, #8]
 80006b2:	b2ca      	uxtb	r2, r1
 80006b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbf0      	blt.n	80006a6 <_read+0x12>
  }

  return len;
 80006c4:	687b      	ldr	r3, [r7, #4]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	e009      	b.n	80006f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	60ba      	str	r2, [r7, #8]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd49 	bl	8000180 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dbf1      	blt.n	80006e0 <_write+0x12>
  }
  return len;
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <_close>:

int _close(int file)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800072c:	605a      	str	r2, [r3, #4]
  return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <_isatty>:

int _isatty(int file)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800074e:	b480      	push	{r7}
 8000750:	b085      	sub	sp, #20
 8000752:	af00      	add	r7, sp, #0
 8000754:	60f8      	str	r0, [r7, #12]
 8000756:	60b9      	str	r1, [r7, #8]
 8000758:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800075a:	2300      	movs	r3, #0
}
 800075c:	4618      	mov	r0, r3
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
	...

08000768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000770:	4a14      	ldr	r2, [pc, #80]	@ (80007c4 <_sbrk+0x5c>)
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <_sbrk+0x60>)
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800077c:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d102      	bne.n	800078a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <_sbrk+0x64>)
 8000786:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <_sbrk+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	429a      	cmp	r2, r3
 8000796:	d207      	bcs.n	80007a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000798:	f003 fa3a 	bl	8003c10 <__errno>
 800079c:	4603      	mov	r3, r0
 800079e:	220c      	movs	r2, #12
 80007a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	e009      	b.n	80007bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <_sbrk+0x64>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <_sbrk+0x64>)
 80007b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ba:	68fb      	ldr	r3, [r7, #12]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20005000 	.word	0x20005000
 80007c8:	00000400 	.word	0x00000400
 80007cc:	200000f4 	.word	0x200000f4
 80007d0:	20000a78 	.word	0x20000a78

080007d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <InitWork>:
volatile uint8_t rx1_buff[256];	// 링버퍼
volatile uint16_t rx1_w_idx = 0;
volatile uint16_t rx1_r_idx = 0;

void InitWork()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	// UART1 RX 인터럽트 활성
	HAL_UART_Receive_IT(&huart1, &rx1data, 1);
 80007e4:	2201      	movs	r2, #1
 80007e6:	4909      	ldr	r1, [pc, #36]	@ (800080c <InitWork+0x2c>)
 80007e8:	4809      	ldr	r0, [pc, #36]	@ (8000810 <InitWork+0x30>)
 80007ea:	f002 fa2a 	bl	8002c42 <HAL_UART_Receive_IT>

	// CAN 통신
	HAL_CAN_Start(&hcan);
 80007ee:	4809      	ldr	r0, [pc, #36]	@ (8000814 <InitWork+0x34>)
 80007f0:	f000 fd34 	bl	800125c <HAL_CAN_Start>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80007f4:	2102      	movs	r1, #2
 80007f6:	4807      	ldr	r0, [pc, #28]	@ (8000814 <InitWork+0x34>)
 80007f8:	f000 ff64 	bl	80016c4 <HAL_CAN_ActivateNotification>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <InitWork+0x28>
	{
		printf("CAN Activate Error\r\n");
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <InitWork+0x38>)
 8000804:	f003 f8d6 	bl	80039b4 <puts>
	}
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000f8 	.word	0x200000f8
 8000810:	200000ac 	.word	0x200000ac
 8000814:	20000084 	.word	0x20000084
 8000818:	080046b0 	.word	0x080046b0

0800081c <HAL_UART_RxCpltCallback>:

// UART1 RX 인터럽트 핸들러
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0e      	ldr	r2, [pc, #56]	@ (8000864 <HAL_UART_RxCpltCallback+0x48>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d115      	bne.n	800085a <HAL_UART_RxCpltCallback+0x3e>
	{
		rx1_buff[rx1_w_idx] = rx1data;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <HAL_UART_RxCpltCallback+0x4c>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b29b      	uxth	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <HAL_UART_RxCpltCallback+0x50>)
 8000838:	7819      	ldrb	r1, [r3, #0]
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <HAL_UART_RxCpltCallback+0x54>)
 800083c:	5499      	strb	r1, [r3, r2]
		rx1_w_idx = (rx1_w_idx + 1) % sizeof(rx1_buff);
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <HAL_UART_RxCpltCallback+0x4c>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	b29b      	uxth	r3, r3
 8000844:	3301      	adds	r3, #1
 8000846:	b29b      	uxth	r3, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_UART_RxCpltCallback+0x4c>)
 800084e:	801a      	strh	r2, [r3, #0]

		// UART1 RX 인터럽트 활성
		HAL_UART_Receive_IT(&huart1, &rx1data, 1);
 8000850:	2201      	movs	r2, #1
 8000852:	4906      	ldr	r1, [pc, #24]	@ (800086c <HAL_UART_RxCpltCallback+0x50>)
 8000854:	4807      	ldr	r0, [pc, #28]	@ (8000874 <HAL_UART_RxCpltCallback+0x58>)
 8000856:	f002 f9f4 	bl	8002c42 <HAL_UART_Receive_IT>
	}
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40013800 	.word	0x40013800
 8000868:	200001fc 	.word	0x200001fc
 800086c:	200000f8 	.word	0x200000f8
 8000870:	200000fc 	.word	0x200000fc
 8000874:	200000ac 	.word	0x200000ac

08000878 <HAL_CAN_RxFifo0MsgPendingCallback>:
volatile uint8_t can_rx_in = 0;
volatile uint8_t can_rx_out = 0;

// CAN RX_FIFO0 인터럽트 핸들러
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
			&can_rx_frames[can_rx_in].header,
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461a      	mov	r2, r3
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 8000888:	4613      	mov	r3, r2
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	4413      	add	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000892:	441a      	add	r2, r3
			can_rx_frames[can_rx_in].data) == HAL_OK)
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4619      	mov	r1, r3
 800089c:	460b      	mov	r3, r1
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	440b      	add	r3, r1
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	3318      	adds	r3, #24
 80008a6:	4912      	ldr	r1, [pc, #72]	@ (80008f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80008a8:	440b      	add	r3, r1
 80008aa:	3304      	adds	r3, #4
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0,
 80008ac:	2100      	movs	r1, #0
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 fde7 	bl	8001482 <HAL_CAN_GetRxMessage>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d111      	bne.n	80008de <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
	{
		can_rx_in = (can_rx_in + 1) % MAX_CAN_RX_FRAMES;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	3301      	adds	r3, #1
 80008c2:	4a0c      	ldr	r2, [pc, #48]	@ (80008f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80008c4:	fb82 1203 	smull	r1, r2, r2, r3
 80008c8:	1111      	asrs	r1, r2, #4
 80008ca:	17da      	asrs	r2, r3, #31
 80008cc:	1a8a      	subs	r2, r1, r2
 80008ce:	2132      	movs	r1, #50	@ 0x32
 80008d0:	fb01 f202 	mul.w	r2, r1, r2
 80008d4:	1a9a      	subs	r2, r3, r2
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80008da:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		printf("CAN RX Error\r\n");
	}
}
 80008dc:	e002      	b.n	80008e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		printf("CAN RX Error\r\n");
 80008de:	4806      	ldr	r0, [pc, #24]	@ (80008f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80008e0:	f003 f868 	bl	80039b4 <puts>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000908 	.word	0x20000908
 80008f0:	20000200 	.word	0x20000200
 80008f4:	51eb851f 	.word	0x51eb851f
 80008f8:	080046c4 	.word	0x080046c4

080008fc <GetUart1RxCount>:



uint16_t GetUart1RxCount()
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	if (rx1_w_idx >= rx1_r_idx)
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <GetUart1RxCount+0x44>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <GetUart1RxCount+0x48>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b29b      	uxth	r3, r3
 800090c:	429a      	cmp	r2, r3
 800090e:	d308      	bcc.n	8000922 <GetUart1RxCount+0x26>
	{
		return rx1_w_idx - rx1_r_idx;
 8000910:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <GetUart1RxCount+0x44>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	b29a      	uxth	r2, r3
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <GetUart1RxCount+0x48>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	b29b      	uxth	r3, r3
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	b29b      	uxth	r3, r3
 8000920:	e00a      	b.n	8000938 <GetUart1RxCount+0x3c>
	}
	else
	{
		return sizeof(rx1_buff) - rx1_r_idx + rx1_w_idx;
 8000922:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <GetUart1RxCount+0x44>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <GetUart1RxCount+0x48>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	b29b      	uxth	r3, r3
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	b29b      	uxth	r3, r3
 8000932:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000936:	b29b      	uxth	r3, r3
	}
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	200001fc 	.word	0x200001fc
 8000944:	200001fe 	.word	0x200001fe

08000948 <ReadUart1Byte>:

uint8_t ReadUart1Byte()
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
	uint8_t data = rx1_buff[rx1_r_idx];
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <ReadUart1Byte+0x34>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	b29b      	uxth	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <ReadUart1Byte+0x38>)
 8000958:	5c9b      	ldrb	r3, [r3, r2]
 800095a:	71fb      	strb	r3, [r7, #7]
	rx1_r_idx = (rx1_r_idx + 1) % sizeof(rx1_buff);
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <ReadUart1Byte+0x34>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	b29b      	uxth	r3, r3
 8000962:	3301      	adds	r3, #1
 8000964:	b29b      	uxth	r3, r3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b04      	ldr	r3, [pc, #16]	@ (800097c <ReadUart1Byte+0x34>)
 800096c:	801a      	strh	r2, [r3, #0]
	return data;
 800096e:	79fb      	ldrb	r3, [r7, #7]
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	200001fe 	.word	0x200001fe
 8000980:	200000fc 	.word	0x200000fc

08000984 <WriteUart1Bytes>:

void WriteUart1Bytes(uint8_t* buff, int len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, buff, len, 0xffff);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b29a      	uxth	r2, r3
 8000992:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <WriteUart1Bytes+0x24>)
 800099a:	f002 f8c7 	bl	8002b2c <HAL_UART_Transmit>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000ac 	.word	0x200000ac

080009ac <ReadButton>:
uint8_t sw5_cnt=0;
uint8_t tmp_sw5=0;


void ReadButton()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	// 10msec마다 sw4상태를 읽고 3번 연속 같은 값이면 입력 처리
	if(GetElapsedTick(tm_sw4) >= 10) {
 80009b0:	4b40      	ldr	r3, [pc, #256]	@ (8000ab4 <ReadButton+0x108>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fbc9 	bl	800014c <GetElapsedTick>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b09      	cmp	r3, #9
 80009be:	d937      	bls.n	8000a30 <ReadButton+0x84>
		tm_sw4 = HAL_GetTick();
 80009c0:	f000 fa7e 	bl	8000ec0 <HAL_GetTick>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ab4 <ReadButton+0x108>)
 80009c8:	6013      	str	r3, [r2, #0]
		tmp_sw4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80009ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ce:	483a      	ldr	r0, [pc, #232]	@ (8000ab8 <ReadButton+0x10c>)
 80009d0:	f001 fc04 	bl	80021dc <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b38      	ldr	r3, [pc, #224]	@ (8000abc <ReadButton+0x110>)
 80009da:	701a      	strb	r2, [r3, #0]

		if(old_sw4 != tmp_sw4) {
 80009dc:	4b38      	ldr	r3, [pc, #224]	@ (8000ac0 <ReadButton+0x114>)
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	4b36      	ldr	r3, [pc, #216]	@ (8000abc <ReadButton+0x110>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d007      	beq.n	80009f8 <ReadButton+0x4c>
			old_sw4 = tmp_sw4;
 80009e8:	4b34      	ldr	r3, [pc, #208]	@ (8000abc <ReadButton+0x110>)
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	4b34      	ldr	r3, [pc, #208]	@ (8000ac0 <ReadButton+0x114>)
 80009ee:	701a      	strb	r2, [r3, #0]
			sw4_cnt = 3;
 80009f0:	4b34      	ldr	r3, [pc, #208]	@ (8000ac4 <ReadButton+0x118>)
 80009f2:	2203      	movs	r2, #3
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	e01b      	b.n	8000a30 <ReadButton+0x84>
		} else {
			if(sw4_cnt) {
 80009f8:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <ReadButton+0x118>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d017      	beq.n	8000a30 <ReadButton+0x84>
				sw4_cnt--;
 8000a00:	4b30      	ldr	r3, [pc, #192]	@ (8000ac4 <ReadButton+0x118>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac4 <ReadButton+0x118>)
 8000a0a:	701a      	strb	r2, [r3, #0]
				if(sw4_cnt == 0) {
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <ReadButton+0x118>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d10d      	bne.n	8000a30 <ReadButton+0x84>
					// pushed down
					if (tmp_sw4 == 0)
 8000a14:	4b29      	ldr	r3, [pc, #164]	@ (8000abc <ReadButton+0x110>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d109      	bne.n	8000a30 <ReadButton+0x84>
					{
						SendCanMessageButton1(tmp_sw4);
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <ReadButton+0x110>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f98d 	bl	8000d40 <SendCanMessageButton1>
						ToggleLedD1();
 8000a26:	f000 f871 	bl	8000b0c <ToggleLedD1>
						printf("Button1 pushed\r\n");
 8000a2a:	4827      	ldr	r0, [pc, #156]	@ (8000ac8 <ReadButton+0x11c>)
 8000a2c:	f002 ffc2 	bl	80039b4 <puts>
			}
		}
	}

	// 10msec마다 sw5상태를 읽고 3번 연속 같은 값이면 입력 처리
	if(GetElapsedTick(tm_sw5) >= 10) {
 8000a30:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <ReadButton+0x120>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fb89 	bl	800014c <GetElapsedTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b09      	cmp	r3, #9
 8000a3e:	d937      	bls.n	8000ab0 <ReadButton+0x104>
		tm_sw5 = HAL_GetTick();
 8000a40:	f000 fa3e 	bl	8000ec0 <HAL_GetTick>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4a21      	ldr	r2, [pc, #132]	@ (8000acc <ReadButton+0x120>)
 8000a48:	6013      	str	r3, [r2, #0]
		tmp_sw5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8000a4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a4e:	481a      	ldr	r0, [pc, #104]	@ (8000ab8 <ReadButton+0x10c>)
 8000a50:	f001 fbc4 	bl	80021dc <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <ReadButton+0x124>)
 8000a5a:	701a      	strb	r2, [r3, #0]

		if(old_sw5 != tmp_sw5) {
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <ReadButton+0x128>)
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <ReadButton+0x124>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d007      	beq.n	8000a78 <ReadButton+0xcc>
			old_sw5 = tmp_sw5;
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <ReadButton+0x124>)
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <ReadButton+0x128>)
 8000a6e:	701a      	strb	r2, [r3, #0]
			sw5_cnt = 3;
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <ReadButton+0x12c>)
 8000a72:	2203      	movs	r2, #3
 8000a74:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8000a76:	e01b      	b.n	8000ab0 <ReadButton+0x104>
			if(sw5_cnt) {
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <ReadButton+0x12c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d017      	beq.n	8000ab0 <ReadButton+0x104>
				sw5_cnt--;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <ReadButton+0x12c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <ReadButton+0x12c>)
 8000a8a:	701a      	strb	r2, [r3, #0]
				if(sw5_cnt == 0) {
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <ReadButton+0x12c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d10d      	bne.n	8000ab0 <ReadButton+0x104>
					if (tmp_sw5 == 0)
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <ReadButton+0x124>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d109      	bne.n	8000ab0 <ReadButton+0x104>
						SendCanMessageButton2(tmp_sw5);
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <ReadButton+0x124>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f96e 	bl	8000d82 <SendCanMessageButton2>
						ToggleLedD1();
 8000aa6:	f000 f831 	bl	8000b0c <ToggleLedD1>
						printf("Bbutton2 pushed\r\n");
 8000aaa:	480c      	ldr	r0, [pc, #48]	@ (8000adc <ReadButton+0x130>)
 8000aac:	f002 ff82 	bl	80039b4 <puts>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000090c 	.word	0x2000090c
 8000ab8:	40010c00 	.word	0x40010c00
 8000abc:	20000912 	.word	0x20000912
 8000ac0:	20000910 	.word	0x20000910
 8000ac4:	20000911 	.word	0x20000911
 8000ac8:	080046d4 	.word	0x080046d4
 8000acc:	20000914 	.word	0x20000914
 8000ad0:	2000091a 	.word	0x2000091a
 8000ad4:	20000918 	.word	0x20000918
 8000ad8:	20000919 	.word	0x20000919
 8000adc:	080046e4 	.word	0x080046e4

08000ae0 <ToggleRunLed>:


uint32_t tm_run_led = 0;

void ToggleRunLed()
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	if(GetElapsedTick(tm_run_led) >= 500)
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <ToggleRunLed+0x28>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fb2f 	bl	800014c <GetElapsedTick>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000af4:	d306      	bcc.n	8000b04 <ToggleRunLed+0x24>
	{
		tm_run_led = HAL_GetTick();
 8000af6:	f000 f9e3 	bl	8000ec0 <HAL_GetTick>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a02      	ldr	r2, [pc, #8]	@ (8000b08 <ToggleRunLed+0x28>)
 8000afe:	6013      	str	r3, [r2, #0]

		// RUN LED Toggle
		ToggleLedD2();
 8000b00:	f000 f810 	bl	8000b24 <ToggleLedD2>
	}
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000091c 	.word	0x2000091c

08000b0c <ToggleLedD1>:
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
}

void ToggleLedD1()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000b10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b14:	4802      	ldr	r0, [pc, #8]	@ (8000b20 <ToggleLedD1+0x14>)
 8000b16:	f001 fb90 	bl	800223a <HAL_GPIO_TogglePin>
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010c00 	.word	0x40010c00

08000b24 <ToggleLedD2>:
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
}

void ToggleLedD2()
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8000b28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <ToggleLedD2+0x14>)
 8000b2e:	f001 fb84 	bl	800223a <HAL_GPIO_TogglePin>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40010c00 	.word	0x40010c00

08000b3c <DoWork>:


void DoWork()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	ToggleRunLed();
 8000b40:	f7ff ffce 	bl	8000ae0 <ToggleRunLed>
	ReadButton();
 8000b44:	f7ff ff32 	bl	80009ac <ReadButton>

	DoWorkAlways();
 8000b48:	f000 f804 	bl	8000b54 <DoWorkAlways>
	DoWorkEvery1Sec();
 8000b4c:	f000 f874 	bl	8000c38 <DoWorkEvery1Sec>
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <DoWorkAlways>:


void DoWorkAlways()
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0

	uint16_t rx1Cnt = GetUart1RxCount();
 8000b5a:	f7ff fecf 	bl	80008fc <GetUart1RxCount>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	81fb      	strh	r3, [r7, #14]
	if (rx1Cnt > 0)
 8000b62:	89fb      	ldrh	r3, [r7, #14]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d012      	beq.n	8000b8e <DoWorkAlways+0x3a>
	{
		for(int i = 0; i < rx1Cnt; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e00b      	b.n	8000b86 <DoWorkAlways+0x32>
		{
			uint8_t rx = ReadUart1Byte();
 8000b6e:	f7ff feeb 	bl	8000948 <ReadUart1Byte>
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
			// Echo Back
			WriteUart1Bytes(&rx, 1);
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	2101      	movs	r1, #1
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff02 	bl	8000984 <WriteUart1Bytes>
		for(int i = 0; i < rx1Cnt; i++)
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	3301      	adds	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	89fb      	ldrh	r3, [r7, #14]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	dbef      	blt.n	8000b6e <DoWorkAlways+0x1a>
		}
	}

	if (can_rx_in != can_rx_out)
 8000b8e:	4b23      	ldr	r3, [pc, #140]	@ (8000c1c <DoWorkAlways+0xc8>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <DoWorkAlways+0xcc>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d03a      	beq.n	8000c14 <DoWorkAlways+0xc0>
	{
		can_rx_frame_t *frame = &can_rx_frames[can_rx_out];
 8000b9e:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <DoWorkAlways+0xcc>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4a1d      	ldr	r2, [pc, #116]	@ (8000c24 <DoWorkAlways+0xd0>)
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
		can_rx_out = (can_rx_out + 1) % MAX_CAN_RX_FRAMES;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <DoWorkAlways+0xcc>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c28 <DoWorkAlways+0xd4>)
 8000bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc2:	1111      	asrs	r1, r2, #4
 8000bc4:	17da      	asrs	r2, r3, #31
 8000bc6:	1a8a      	subs	r2, r1, r2
 8000bc8:	2132      	movs	r1, #50	@ 0x32
 8000bca:	fb01 f202 	mul.w	r2, r1, r2
 8000bce:	1a9a      	subs	r2, r3, r2
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <DoWorkAlways+0xcc>)
 8000bd4:	701a      	strb	r2, [r3, #0]

		printf("CAN RX ID:%3lX, DLC:%ld, Data", frame->header.StdId, frame->header.DLC);
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	6819      	ldr	r1, [r3, #0]
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	461a      	mov	r2, r3
 8000be0:	4812      	ldr	r0, [pc, #72]	@ (8000c2c <DoWorkAlways+0xd8>)
 8000be2:	f002 fe7f 	bl	80038e4 <iprintf>
		for(int i = 0; i < frame->header.DLC; i++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	e00b      	b.n	8000c04 <DoWorkAlways+0xb0>
			printf("%02X ", frame->data[i]);
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	331c      	adds	r3, #28
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <DoWorkAlways+0xdc>)
 8000bfa:	f002 fe73 	bl	80038e4 <iprintf>
		for(int i = 0; i < frame->header.DLC; i++)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	3301      	adds	r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	691a      	ldr	r2, [r3, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d8ee      	bhi.n	8000bec <DoWorkAlways+0x98>
		printf("\r\n");
 8000c0e:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <DoWorkAlways+0xe0>)
 8000c10:	f002 fed0 	bl	80039b4 <puts>
	}
}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000908 	.word	0x20000908
 8000c20:	20000909 	.word	0x20000909
 8000c24:	20000200 	.word	0x20000200
 8000c28:	51eb851f 	.word	0x51eb851f
 8000c2c:	080046f8 	.word	0x080046f8
 8000c30:	08004718 	.word	0x08004718
 8000c34:	08004720 	.word	0x08004720

08000c38 <DoWorkEvery1Sec>:


uint32_t tm_work_1sec = 0;

void DoWorkEvery1Sec()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	if (GetElapsedTick(tm_work_1sec) >= 1000)
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <DoWorkEvery1Sec+0x28>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fa83 	bl	800014c <GetElapsedTick>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c4c:	d306      	bcc.n	8000c5c <DoWorkEvery1Sec+0x24>
	{
		tm_work_1sec = HAL_GetTick();
 8000c4e:	f000 f937 	bl	8000ec0 <HAL_GetTick>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a02      	ldr	r2, [pc, #8]	@ (8000c60 <DoWorkEvery1Sec+0x28>)
 8000c56:	6013      	str	r3, [r2, #0]

		// CAN Poll Message
		SendCanMessagePoll();
 8000c58:	f000 f840 	bl	8000cdc <SendCanMessagePoll>
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000920 	.word	0x20000920

08000c64 <SendCanFrame>:




int SendCanFrame(uint32_t id, int data_len, uint8_t data[])
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	@ 0x38
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
	CAN_TxHeaderTypeDef can_tx_header;
	uint8_t             can_tx_data[8];
	uint32_t            can_tx_mailbox;

	can_tx_header.StdId = id;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	61fb      	str	r3, [r7, #28]
	can_tx_header.RTR = CAN_RTR_DATA;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
	can_tx_header.IDE = CAN_ID_STD;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
	can_tx_header.DLC = data_len;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	can_tx_header.TransmitGlobalTime = DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

	for(int i = 0; i < data_len; i++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c8a:	e00c      	b.n	8000ca6 <SendCanFrame+0x42>
		can_tx_data[i] = data[i];
 8000c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	7819      	ldrb	r1, [r3, #0]
 8000c94:	f107 0214 	add.w	r2, r7, #20
 8000c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c9a:	4413      	add	r3, r2
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < data_len; i++)
 8000ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ca6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	dbee      	blt.n	8000c8c <SendCanFrame+0x28>

	if (HAL_CAN_AddTxMessage(&hcan, &can_tx_header, can_tx_data, &can_tx_mailbox) != HAL_OK)
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	f107 0214 	add.w	r2, r7, #20
 8000cb6:	f107 011c 	add.w	r1, r7, #28
 8000cba:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <SendCanFrame+0x74>)
 8000cbc:	f000 fb12 	bl	80012e4 <HAL_CAN_AddTxMessage>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <SendCanFrame+0x68>
	{
		return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e000      	b.n	8000cce <SendCanFrame+0x6a>
	}
	return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3738      	adds	r7, #56	@ 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000084 	.word	0x20000084

08000cdc <SendCanMessagePoll>:

int iPollCnt;

int SendCanMessagePoll()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
	iPollCnt += 100000;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <SendCanMessagePoll+0x60>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f503 33c3 	add.w	r3, r3, #99840	@ 0x18600
 8000cea:	33a0      	adds	r3, #160	@ 0xa0
 8000cec:	4a13      	ldr	r2, [pc, #76]	@ (8000d3c <SendCanMessagePoll+0x60>)
 8000cee:	6013      	str	r3, [r2, #0]

	uint8_t can_tx_data[8];

	can_tx_data[0] = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	703b      	strb	r3, [r7, #0]
	can_tx_data[1] = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	707b      	strb	r3, [r7, #1]
	can_tx_data[2] = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	70bb      	strb	r3, [r7, #2]
	can_tx_data[3] = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	70fb      	strb	r3, [r7, #3]
	can_tx_data[4] = (uint8_t)((iPollCnt >> 24) & 0xff);
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <SendCanMessagePoll+0x60>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	161b      	asrs	r3, r3, #24
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	713b      	strb	r3, [r7, #4]
	can_tx_data[5] = (uint8_t)((iPollCnt >> 16) & 0xff);
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <SendCanMessagePoll+0x60>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	141b      	asrs	r3, r3, #16
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	717b      	strb	r3, [r7, #5]
	can_tx_data[6] = (uint8_t)((iPollCnt >> 8) & 0xff);
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <SendCanMessagePoll+0x60>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	121b      	asrs	r3, r3, #8
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	71bb      	strb	r3, [r7, #6]
	can_tx_data[7] = (uint8_t)(iPollCnt & 0xff);
 8000d1e:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <SendCanMessagePoll+0x60>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	71fb      	strb	r3, [r7, #7]
	return SendCanFrame(0x03, 8, can_tx_data);
 8000d26:	463b      	mov	r3, r7
 8000d28:	461a      	mov	r2, r3
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f7ff ff99 	bl	8000c64 <SendCanFrame>
 8000d32:	4603      	mov	r3, r0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000924 	.word	0x20000924

08000d40 <SendCanMessageButton1>:

int SendCanMessageButton1(uint8_t button)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	uint8_t can_tx_data[8];

	can_tx_data[0] = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	723b      	strb	r3, [r7, #8]
	can_tx_data[1] = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	727b      	strb	r3, [r7, #9]
	can_tx_data[2] = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	72bb      	strb	r3, [r7, #10]
	can_tx_data[3] = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	72fb      	strb	r3, [r7, #11]
	can_tx_data[4] = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	733b      	strb	r3, [r7, #12]
	can_tx_data[5] = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	737b      	strb	r3, [r7, #13]
	can_tx_data[6] = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73bb      	strb	r3, [r7, #14]
	can_tx_data[7] = button;
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	73fb      	strb	r3, [r7, #15]
	return SendCanFrame(0x04, 8, can_tx_data);
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	461a      	mov	r2, r3
 8000d70:	2108      	movs	r1, #8
 8000d72:	2004      	movs	r0, #4
 8000d74:	f7ff ff76 	bl	8000c64 <SendCanFrame>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <SendCanMessageButton2>:

int SendCanMessageButton2(uint8_t button)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	uint8_t can_tx_data[8];

	can_tx_data[0] = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	723b      	strb	r3, [r7, #8]
	can_tx_data[1] = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	727b      	strb	r3, [r7, #9]
	can_tx_data[2] = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	72bb      	strb	r3, [r7, #10]
	can_tx_data[3] = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	72fb      	strb	r3, [r7, #11]
	can_tx_data[4] = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	733b      	strb	r3, [r7, #12]
	can_tx_data[5] = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	737b      	strb	r3, [r7, #13]
	can_tx_data[6] = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73bb      	strb	r3, [r7, #14]
	can_tx_data[7] = button;
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	73fb      	strb	r3, [r7, #15]
	return SendCanFrame(0x05, 8, can_tx_data);
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	461a      	mov	r2, r3
 8000db2:	2108      	movs	r1, #8
 8000db4:	2005      	movs	r0, #5
 8000db6:	f7ff ff55 	bl	8000c64 <SendCanFrame>
 8000dba:	4603      	mov	r3, r0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc4:	f7ff fd06 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480b      	ldr	r0, [pc, #44]	@ (8000df8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dca:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a09      	ldr	r2, [pc, #36]	@ (8000e04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000de0:	4c09      	ldr	r4, [pc, #36]	@ (8000e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dee:	f002 ff15 	bl	8003c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df2:	f7ff f9d7 	bl	80001a4 <main>
  bx lr
 8000df6:	4770      	bx	lr
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e00:	0800478c 	.word	0x0800478c
  ldr r2, =_sbss
 8000e04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e08:	20000a78 	.word	0x20000a78

08000e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_2_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HAL_Init+0x28>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <HAL_Init+0x28>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 ff63 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fb04 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40022000 	.word	0x40022000

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 ff7b 	bl	8001d56 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 ff43 	bl	8001d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_IncTick+0x1c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a03      	ldr	r2, [pc, #12]	@ (8000ebc <HAL_IncTick+0x20>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000928 	.word	0x20000928

08000ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	@ (8000ed0 <HAL_GetTick+0x10>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	20000928 	.word	0x20000928

08000ed4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e0ed      	b.n	80010c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fad2 	bl	800049c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0201 	orr.w	r2, r2, #1
 8000f06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f08:	f7ff ffda 	bl	8000ec0 <HAL_GetTick>
 8000f0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f0e:	e012      	b.n	8000f36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f10:	f7ff ffd6 	bl	8000ec0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b0a      	cmp	r3, #10
 8000f1c:	d90b      	bls.n	8000f36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f22:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2205      	movs	r2, #5
 8000f2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e0c5      	b.n	80010c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0e5      	beq.n	8000f10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0202 	bic.w	r2, r2, #2
 8000f52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f54:	f7ff ffb4 	bl	8000ec0 <HAL_GetTick>
 8000f58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f5a:	e012      	b.n	8000f82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f5c:	f7ff ffb0 	bl	8000ec0 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b0a      	cmp	r3, #10
 8000f68:	d90b      	bls.n	8000f82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2205      	movs	r2, #5
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e09f      	b.n	80010c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1e5      	bne.n	8000f5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7e1b      	ldrb	r3, [r3, #24]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d108      	bne.n	8000faa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e007      	b.n	8000fba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7e5b      	ldrb	r3, [r3, #25]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d108      	bne.n	8000fd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e007      	b.n	8000fe4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fe2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7e9b      	ldrb	r3, [r3, #26]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d108      	bne.n	8000ffe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0220 	orr.w	r2, r2, #32
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	e007      	b.n	800100e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0220 	bic.w	r2, r2, #32
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7edb      	ldrb	r3, [r3, #27]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d108      	bne.n	8001028 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0210 	bic.w	r2, r2, #16
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e007      	b.n	8001038 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0210 	orr.w	r2, r2, #16
 8001036:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7f1b      	ldrb	r3, [r3, #28]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d108      	bne.n	8001052 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0208 	orr.w	r2, r2, #8
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	e007      	b.n	8001062 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0208 	bic.w	r2, r2, #8
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7f5b      	ldrb	r3, [r3, #29]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d108      	bne.n	800107c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0204 	orr.w	r2, r2, #4
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e007      	b.n	800108c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0204 	bic.w	r2, r2, #4
 800108a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	ea42 0103 	orr.w	r1, r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	1e5a      	subs	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b087      	sub	sp, #28
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010e0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010e2:	7cfb      	ldrb	r3, [r7, #19]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d003      	beq.n	80010f0 <HAL_CAN_ConfigFilter+0x26>
 80010e8:	7cfb      	ldrb	r3, [r7, #19]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	f040 80aa 	bne.w	8001244 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	2201      	movs	r2, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d123      	bne.n	8001172 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	401a      	ands	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800114c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3248      	adds	r2, #72	@ 0x48
 8001152:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001166:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001168:	6979      	ldr	r1, [r7, #20]
 800116a:	3348      	adds	r3, #72	@ 0x48
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	440b      	add	r3, r1
 8001170:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d122      	bne.n	80011c0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800119a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3248      	adds	r2, #72	@ 0x48
 80011a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011b6:	6979      	ldr	r1, [r7, #20]
 80011b8:	3348      	adds	r3, #72	@ 0x48
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	440b      	add	r3, r1
 80011be:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d109      	bne.n	80011dc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80011da:	e007      	b.n	80011ec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d109      	bne.n	8001208 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001206:	e007      	b.n	8001218 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	431a      	orrs	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d107      	bne.n	8001230 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	431a      	orrs	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001236:	f023 0201 	bic.w	r2, r3, #1
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	e006      	b.n	8001252 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
  }
}
 8001252:	4618      	mov	r0, r3
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d12e      	bne.n	80012ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2202      	movs	r2, #2
 8001274:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001288:	f7ff fe1a 	bl	8000ec0 <HAL_GetTick>
 800128c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800128e:	e012      	b.n	80012b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001290:	f7ff fe16 	bl	8000ec0 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b0a      	cmp	r3, #10
 800129c:	d90b      	bls.n	80012b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2205      	movs	r2, #5
 80012ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e012      	b.n	80012dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1e5      	bne.n	8001290 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e006      	b.n	80012dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
  }
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	@ 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001302:	7ffb      	ldrb	r3, [r7, #31]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d003      	beq.n	8001310 <HAL_CAN_AddTxMessage+0x2c>
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	2b02      	cmp	r3, #2
 800130c:	f040 80ad 	bne.w	800146a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10a      	bne.n	8001330 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001320:	2b00      	cmp	r3, #0
 8001322:	d105      	bne.n	8001330 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8095 	beq.w	800145a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	0e1b      	lsrs	r3, r3, #24
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800133a:	2201      	movs	r2, #1
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10d      	bne.n	8001368 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001356:	68f9      	ldr	r1, [r7, #12]
 8001358:	6809      	ldr	r1, [r1, #0]
 800135a:	431a      	orrs	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3318      	adds	r3, #24
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	440b      	add	r3, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e00f      	b.n	8001388 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001372:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001378:	68f9      	ldr	r1, [r7, #12]
 800137a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800137c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3318      	adds	r3, #24
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	440b      	add	r3, r1
 8001386:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6819      	ldr	r1, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3318      	adds	r3, #24
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	440b      	add	r3, r1
 8001398:	3304      	adds	r3, #4
 800139a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	7d1b      	ldrb	r3, [r3, #20]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d111      	bne.n	80013c8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3318      	adds	r3, #24
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4413      	add	r3, r2
 80013b0:	3304      	adds	r3, #4
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	6811      	ldr	r1, [r2, #0]
 80013b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3318      	adds	r3, #24
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	440b      	add	r3, r1
 80013c4:	3304      	adds	r3, #4
 80013c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3307      	adds	r3, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	061a      	lsls	r2, r3, #24
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3306      	adds	r3, #6
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	041b      	lsls	r3, r3, #16
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3305      	adds	r3, #5
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	4313      	orrs	r3, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	3204      	adds	r2, #4
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	4610      	mov	r0, r2
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	6811      	ldr	r1, [r2, #0]
 80013f0:	ea43 0200 	orr.w	r2, r3, r0
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	440b      	add	r3, r1
 80013fa:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80013fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3303      	adds	r3, #3
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	061a      	lsls	r2, r3, #24
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3302      	adds	r3, #2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	041b      	lsls	r3, r3, #16
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3301      	adds	r3, #1
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	4313      	orrs	r3, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	4610      	mov	r0, r2
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	6811      	ldr	r1, [r2, #0]
 8001426:	ea43 0200 	orr.w	r2, r3, r0
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	440b      	add	r3, r1
 8001430:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001434:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3318      	adds	r3, #24
 800143e:	011b      	lsls	r3, r3, #4
 8001440:	4413      	add	r3, r2
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	6811      	ldr	r1, [r2, #0]
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3318      	adds	r3, #24
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	440b      	add	r3, r1
 8001454:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e00e      	b.n	8001478 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e006      	b.n	8001478 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
  }
}
 8001478:	4618      	mov	r0, r3
 800147a:	3724      	adds	r7, #36	@ 0x24
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001482:	b480      	push	{r7}
 8001484:	b087      	sub	sp, #28
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001496:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d003      	beq.n	80014a6 <HAL_CAN_GetRxMessage+0x24>
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	f040 8103 	bne.w	80016ac <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10e      	bne.n	80014ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0f7      	b.n	80016ba <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d107      	bne.n	80014e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0e8      	b.n	80016ba <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	331b      	adds	r3, #27
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	4413      	add	r3, r2
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0204 	and.w	r2, r3, #4
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10c      	bne.n	8001520 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	331b      	adds	r3, #27
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0d5b      	lsrs	r3, r3, #21
 8001516:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	e00b      	b.n	8001538 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	331b      	adds	r3, #27
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	4413      	add	r3, r2
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	08db      	lsrs	r3, r3, #3
 8001530:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	331b      	adds	r3, #27
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	4413      	add	r3, r2
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0202 	and.w	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	331b      	adds	r3, #27
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4413      	add	r3, r2
 800155a:	3304      	adds	r3, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2208      	movs	r2, #8
 800156a:	611a      	str	r2, [r3, #16]
 800156c:	e00b      	b.n	8001586 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	331b      	adds	r3, #27
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	3304      	adds	r3, #4
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 020f 	and.w	r2, r3, #15
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	331b      	adds	r3, #27
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	4413      	add	r3, r2
 8001592:	3304      	adds	r3, #4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	b2da      	uxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	331b      	adds	r3, #27
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	3304      	adds	r3, #4
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	0c1b      	lsrs	r3, r3, #16
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	4413      	add	r3, r2
 80015c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0a1a      	lsrs	r2, r3, #8
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	0c1a      	lsrs	r2, r3, #16
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	3302      	adds	r3, #2
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	4413      	add	r3, r2
 800160a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0e1a      	lsrs	r2, r3, #24
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	3303      	adds	r3, #3
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3304      	adds	r3, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	0a1a      	lsrs	r2, r3, #8
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3305      	adds	r3, #5
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	4413      	add	r3, r2
 8001656:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0c1a      	lsrs	r2, r3, #16
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	3306      	adds	r3, #6
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	4413      	add	r3, r2
 8001670:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	0e1a      	lsrs	r2, r3, #24
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	3307      	adds	r3, #7
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0220 	orr.w	r2, r2, #32
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	e007      	b.n	80016a8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0220 	orr.w	r2, r2, #32
 80016a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e006      	b.n	80016ba <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
  }
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d002      	beq.n	80016e2 <HAL_CAN_ActivateNotification+0x1e>
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d109      	bne.n	80016f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6959      	ldr	r1, [r3, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e006      	b.n	8001704 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
  }
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b08a      	sub	sp, #40	@ 0x28
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d07c      	beq.n	800184e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d023      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f983 	bl	8001a7c <HAL_CAN_TxMailbox0CompleteCallback>
 8001776:	e016      	b.n	80017a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
 800178a:	e00c      	b.n	80017a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
 800179e:	e002      	b.n	80017a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f986 	bl	8001ab2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d024      	beq.n	80017fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f962 	bl	8001a8e <HAL_CAN_TxMailbox1CompleteCallback>
 80017ca:	e016      	b.n	80017fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80017de:	e00c      	b.n	80017fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f2:	e002      	b.n	80017fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f965 	bl	8001ac4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d024      	beq.n	800184e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800180c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f941 	bl	8001aa0 <HAL_CAN_TxMailbox2CompleteCallback>
 800181e:	e016      	b.n	800184e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
 8001832:	e00c      	b.n	800184e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d004      	beq.n	8001848 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
 8001846:	e002      	b.n	800184e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f944 	bl	8001ad6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00c      	beq.n	8001872 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2210      	movs	r2, #16
 8001870:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00b      	beq.n	8001894 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2208      	movs	r2, #8
 800188c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f92a 	bl	8001ae8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7fe ffe3 	bl	8000878 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00c      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2210      	movs	r2, #16
 80018d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	f003 0320 	and.w	r3, r3, #32
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00b      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2208      	movs	r2, #8
 80018f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f90a 	bl	8001b0c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f8f2 	bl	8001afa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00b      	beq.n	8001938 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2210      	movs	r2, #16
 8001930:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f8f3 	bl	8001b1e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2208      	movs	r2, #8
 8001952:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f8eb 	bl	8001b30 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d07b      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d072      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d043      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d03e      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019dc:	2b60      	cmp	r3, #96	@ 0x60
 80019de:	d02b      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x32a>
 80019e0:	2b60      	cmp	r3, #96	@ 0x60
 80019e2:	d82e      	bhi.n	8001a42 <HAL_CAN_IRQHandler+0x334>
 80019e4:	2b50      	cmp	r3, #80	@ 0x50
 80019e6:	d022      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x320>
 80019e8:	2b50      	cmp	r3, #80	@ 0x50
 80019ea:	d82a      	bhi.n	8001a42 <HAL_CAN_IRQHandler+0x334>
 80019ec:	2b40      	cmp	r3, #64	@ 0x40
 80019ee:	d019      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x316>
 80019f0:	2b40      	cmp	r3, #64	@ 0x40
 80019f2:	d826      	bhi.n	8001a42 <HAL_CAN_IRQHandler+0x334>
 80019f4:	2b30      	cmp	r3, #48	@ 0x30
 80019f6:	d010      	beq.n	8001a1a <HAL_CAN_IRQHandler+0x30c>
 80019f8:	2b30      	cmp	r3, #48	@ 0x30
 80019fa:	d822      	bhi.n	8001a42 <HAL_CAN_IRQHandler+0x334>
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d002      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x2f8>
 8001a00:	2b20      	cmp	r3, #32
 8001a02:	d005      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a04:	e01d      	b.n	8001a42 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a0e:	e019      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	f043 0310 	orr.w	r3, r3, #16
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a18:	e014      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a22:	e00f      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a2c:	e00a      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a36:	e005      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a40:	e000      	b.n	8001a44 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a42:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699a      	ldr	r2, [r3, #24]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001a52:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f867 	bl	8001b42 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	@ 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b86:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60d3      	str	r3, [r2, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db0b      	blt.n	8001be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	4906      	ldr	r1, [pc, #24]	@ (8001bec <__NVIC_EnableIRQ+0x34>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	@ (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	@ (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb8:	d301      	bcc.n	8001cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00f      	b.n	8001cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f7ff ff90 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd6:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff2d 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff42 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff90 	bl	8001c44 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5f 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff35 	bl	8001bb8 <__NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ffa2 	bl	8001ca8 <SysTick_Config>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d008      	beq.n	8001d98 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e020      	b.n	8001dda <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 020e 	bic.w	r2, r2, #14
 8001da6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d005      	beq.n	8001e08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e051      	b.n	8001eac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 020e 	bic.w	r2, r2, #14
 8001e16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a22      	ldr	r2, [pc, #136]	@ (8001eb8 <HAL_DMA_Abort_IT+0xd4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d029      	beq.n	8001e86 <HAL_DMA_Abort_IT+0xa2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a21      	ldr	r2, [pc, #132]	@ (8001ebc <HAL_DMA_Abort_IT+0xd8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d022      	beq.n	8001e82 <HAL_DMA_Abort_IT+0x9e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec0 <HAL_DMA_Abort_IT+0xdc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d01a      	beq.n	8001e7c <HAL_DMA_Abort_IT+0x98>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec4 <HAL_DMA_Abort_IT+0xe0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d012      	beq.n	8001e76 <HAL_DMA_Abort_IT+0x92>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <HAL_DMA_Abort_IT+0xe4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00a      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x8c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <HAL_DMA_Abort_IT+0xe8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d102      	bne.n	8001e6a <HAL_DMA_Abort_IT+0x86>
 8001e64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e68:	e00e      	b.n	8001e88 <HAL_DMA_Abort_IT+0xa4>
 8001e6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e6e:	e00b      	b.n	8001e88 <HAL_DMA_Abort_IT+0xa4>
 8001e70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e74:	e008      	b.n	8001e88 <HAL_DMA_Abort_IT+0xa4>
 8001e76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e7a:	e005      	b.n	8001e88 <HAL_DMA_Abort_IT+0xa4>
 8001e7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e80:	e002      	b.n	8001e88 <HAL_DMA_Abort_IT+0xa4>
 8001e82:	2310      	movs	r3, #16
 8001e84:	e000      	b.n	8001e88 <HAL_DMA_Abort_IT+0xa4>
 8001e86:	2301      	movs	r3, #1
 8001e88:	4a11      	ldr	r2, [pc, #68]	@ (8001ed0 <HAL_DMA_Abort_IT+0xec>)
 8001e8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
    } 
  }
  return status;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40020008 	.word	0x40020008
 8001ebc:	4002001c 	.word	0x4002001c
 8001ec0:	40020030 	.word	0x40020030
 8001ec4:	40020044 	.word	0x40020044
 8001ec8:	40020058 	.word	0x40020058
 8001ecc:	4002006c 	.word	0x4002006c
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b08b      	sub	sp, #44	@ 0x2c
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee6:	e169      	b.n	80021bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 8158 	bne.w	80021b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4a9a      	ldr	r2, [pc, #616]	@ (8002174 <HAL_GPIO_Init+0x2a0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d05e      	beq.n	8001fce <HAL_GPIO_Init+0xfa>
 8001f10:	4a98      	ldr	r2, [pc, #608]	@ (8002174 <HAL_GPIO_Init+0x2a0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d875      	bhi.n	8002002 <HAL_GPIO_Init+0x12e>
 8001f16:	4a98      	ldr	r2, [pc, #608]	@ (8002178 <HAL_GPIO_Init+0x2a4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d058      	beq.n	8001fce <HAL_GPIO_Init+0xfa>
 8001f1c:	4a96      	ldr	r2, [pc, #600]	@ (8002178 <HAL_GPIO_Init+0x2a4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d86f      	bhi.n	8002002 <HAL_GPIO_Init+0x12e>
 8001f22:	4a96      	ldr	r2, [pc, #600]	@ (800217c <HAL_GPIO_Init+0x2a8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d052      	beq.n	8001fce <HAL_GPIO_Init+0xfa>
 8001f28:	4a94      	ldr	r2, [pc, #592]	@ (800217c <HAL_GPIO_Init+0x2a8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d869      	bhi.n	8002002 <HAL_GPIO_Init+0x12e>
 8001f2e:	4a94      	ldr	r2, [pc, #592]	@ (8002180 <HAL_GPIO_Init+0x2ac>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d04c      	beq.n	8001fce <HAL_GPIO_Init+0xfa>
 8001f34:	4a92      	ldr	r2, [pc, #584]	@ (8002180 <HAL_GPIO_Init+0x2ac>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d863      	bhi.n	8002002 <HAL_GPIO_Init+0x12e>
 8001f3a:	4a92      	ldr	r2, [pc, #584]	@ (8002184 <HAL_GPIO_Init+0x2b0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d046      	beq.n	8001fce <HAL_GPIO_Init+0xfa>
 8001f40:	4a90      	ldr	r2, [pc, #576]	@ (8002184 <HAL_GPIO_Init+0x2b0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d85d      	bhi.n	8002002 <HAL_GPIO_Init+0x12e>
 8001f46:	2b12      	cmp	r3, #18
 8001f48:	d82a      	bhi.n	8001fa0 <HAL_GPIO_Init+0xcc>
 8001f4a:	2b12      	cmp	r3, #18
 8001f4c:	d859      	bhi.n	8002002 <HAL_GPIO_Init+0x12e>
 8001f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f54 <HAL_GPIO_Init+0x80>)
 8001f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f54:	08001fcf 	.word	0x08001fcf
 8001f58:	08001fa9 	.word	0x08001fa9
 8001f5c:	08001fbb 	.word	0x08001fbb
 8001f60:	08001ffd 	.word	0x08001ffd
 8001f64:	08002003 	.word	0x08002003
 8001f68:	08002003 	.word	0x08002003
 8001f6c:	08002003 	.word	0x08002003
 8001f70:	08002003 	.word	0x08002003
 8001f74:	08002003 	.word	0x08002003
 8001f78:	08002003 	.word	0x08002003
 8001f7c:	08002003 	.word	0x08002003
 8001f80:	08002003 	.word	0x08002003
 8001f84:	08002003 	.word	0x08002003
 8001f88:	08002003 	.word	0x08002003
 8001f8c:	08002003 	.word	0x08002003
 8001f90:	08002003 	.word	0x08002003
 8001f94:	08002003 	.word	0x08002003
 8001f98:	08001fb1 	.word	0x08001fb1
 8001f9c:	08001fc5 	.word	0x08001fc5
 8001fa0:	4a79      	ldr	r2, [pc, #484]	@ (8002188 <HAL_GPIO_Init+0x2b4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fa6:	e02c      	b.n	8002002 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	623b      	str	r3, [r7, #32]
          break;
 8001fae:	e029      	b.n	8002004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	623b      	str	r3, [r7, #32]
          break;
 8001fb8:	e024      	b.n	8002004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	623b      	str	r3, [r7, #32]
          break;
 8001fc2:	e01f      	b.n	8002004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	330c      	adds	r3, #12
 8001fca:	623b      	str	r3, [r7, #32]
          break;
 8001fcc:	e01a      	b.n	8002004 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	623b      	str	r3, [r7, #32]
          break;
 8001fda:	e013      	b.n	8002004 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d105      	bne.n	8001ff0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	611a      	str	r2, [r3, #16]
          break;
 8001fee:	e009      	b.n	8002004 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	615a      	str	r2, [r3, #20]
          break;
 8001ffa:	e003      	b.n	8002004 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e000      	b.n	8002004 <HAL_GPIO_Init+0x130>
          break;
 8002002:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2bff      	cmp	r3, #255	@ 0xff
 8002008:	d801      	bhi.n	800200e <HAL_GPIO_Init+0x13a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	e001      	b.n	8002012 <HAL_GPIO_Init+0x13e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3304      	adds	r3, #4
 8002012:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2bff      	cmp	r3, #255	@ 0xff
 8002018:	d802      	bhi.n	8002020 <HAL_GPIO_Init+0x14c>
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	e002      	b.n	8002026 <HAL_GPIO_Init+0x152>
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	3b08      	subs	r3, #8
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	210f      	movs	r1, #15
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	401a      	ands	r2, r3
 8002038:	6a39      	ldr	r1, [r7, #32]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	431a      	orrs	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80b1 	beq.w	80021b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002054:	4b4d      	ldr	r3, [pc, #308]	@ (800218c <HAL_GPIO_Init+0x2b8>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a4c      	ldr	r2, [pc, #304]	@ (800218c <HAL_GPIO_Init+0x2b8>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b4a      	ldr	r3, [pc, #296]	@ (800218c <HAL_GPIO_Init+0x2b8>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800206c:	4a48      	ldr	r2, [pc, #288]	@ (8002190 <HAL_GPIO_Init+0x2bc>)
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002078:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a40      	ldr	r2, [pc, #256]	@ (8002194 <HAL_GPIO_Init+0x2c0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <HAL_GPIO_Init+0x1ec>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a3f      	ldr	r2, [pc, #252]	@ (8002198 <HAL_GPIO_Init+0x2c4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00d      	beq.n	80020bc <HAL_GPIO_Init+0x1e8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a3e      	ldr	r2, [pc, #248]	@ (800219c <HAL_GPIO_Init+0x2c8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d007      	beq.n	80020b8 <HAL_GPIO_Init+0x1e4>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3d      	ldr	r2, [pc, #244]	@ (80021a0 <HAL_GPIO_Init+0x2cc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <HAL_GPIO_Init+0x1e0>
 80020b0:	2303      	movs	r3, #3
 80020b2:	e006      	b.n	80020c2 <HAL_GPIO_Init+0x1ee>
 80020b4:	2304      	movs	r3, #4
 80020b6:	e004      	b.n	80020c2 <HAL_GPIO_Init+0x1ee>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e002      	b.n	80020c2 <HAL_GPIO_Init+0x1ee>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_GPIO_Init+0x1ee>
 80020c0:	2300      	movs	r3, #0
 80020c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c4:	f002 0203 	and.w	r2, r2, #3
 80020c8:	0092      	lsls	r2, r2, #2
 80020ca:	4093      	lsls	r3, r2
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020d2:	492f      	ldr	r1, [pc, #188]	@ (8002190 <HAL_GPIO_Init+0x2bc>)
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d006      	beq.n	80020fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ec:	4b2d      	ldr	r3, [pc, #180]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	492c      	ldr	r1, [pc, #176]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020fa:	4b2a      	ldr	r3, [pc, #168]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	43db      	mvns	r3, r3
 8002102:	4928      	ldr	r1, [pc, #160]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002104:	4013      	ands	r3, r2
 8002106:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d006      	beq.n	8002122 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002114:	4b23      	ldr	r3, [pc, #140]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	4922      	ldr	r1, [pc, #136]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	60cb      	str	r3, [r1, #12]
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002122:	4b20      	ldr	r3, [pc, #128]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	43db      	mvns	r3, r3
 800212a:	491e      	ldr	r1, [pc, #120]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 800212c:	4013      	ands	r3, r2
 800212e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800213c:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4918      	ldr	r1, [pc, #96]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800214a:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	43db      	mvns	r3, r3
 8002152:	4914      	ldr	r1, [pc, #80]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002154:	4013      	ands	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d021      	beq.n	80021a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002164:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	490e      	ldr	r1, [pc, #56]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
 8002170:	e021      	b.n	80021b6 <HAL_GPIO_Init+0x2e2>
 8002172:	bf00      	nop
 8002174:	10320000 	.word	0x10320000
 8002178:	10310000 	.word	0x10310000
 800217c:	10220000 	.word	0x10220000
 8002180:	10210000 	.word	0x10210000
 8002184:	10120000 	.word	0x10120000
 8002188:	10110000 	.word	0x10110000
 800218c:	40021000 	.word	0x40021000
 8002190:	40010000 	.word	0x40010000
 8002194:	40010800 	.word	0x40010800
 8002198:	40010c00 	.word	0x40010c00
 800219c:	40011000 	.word	0x40011000
 80021a0:	40011400 	.word	0x40011400
 80021a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_GPIO_Init+0x304>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	4909      	ldr	r1, [pc, #36]	@ (80021d8 <HAL_GPIO_Init+0x304>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	3301      	adds	r3, #1
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f47f ae8e 	bne.w	8001ee8 <HAL_GPIO_Init+0x14>
  }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	372c      	adds	r7, #44	@ 0x2c
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	40010400 	.word	0x40010400

080021dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e001      	b.n	80021fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	807b      	strh	r3, [r7, #2]
 8002216:	4613      	mov	r3, r2
 8002218:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800221a:	787b      	ldrb	r3, [r7, #1]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002220:	887a      	ldrh	r2, [r7, #2]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002226:	e003      	b.n	8002230 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	041a      	lsls	r2, r3, #16
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	611a      	str	r2, [r3, #16]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800224c:	887a      	ldrh	r2, [r7, #2]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	041a      	lsls	r2, r3, #16
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43d9      	mvns	r1, r3
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	400b      	ands	r3, r1
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e272      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8087 	beq.w	800239a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800228c:	4b92      	ldr	r3, [pc, #584]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b04      	cmp	r3, #4
 8002296:	d00c      	beq.n	80022b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002298:	4b8f      	ldr	r3, [pc, #572]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d112      	bne.n	80022ca <HAL_RCC_OscConfig+0x5e>
 80022a4:	4b8c      	ldr	r3, [pc, #560]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022b0:	d10b      	bne.n	80022ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b2:	4b89      	ldr	r3, [pc, #548]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d06c      	beq.n	8002398 <HAL_RCC_OscConfig+0x12c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d168      	bne.n	8002398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e24c      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x76>
 80022d4:	4b80      	ldr	r3, [pc, #512]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a7f      	ldr	r2, [pc, #508]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	e02e      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0x98>
 80022ea:	4b7b      	ldr	r3, [pc, #492]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7a      	ldr	r2, [pc, #488]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b78      	ldr	r3, [pc, #480]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a77      	ldr	r2, [pc, #476]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0xbc>
 800230e:	4b72      	ldr	r3, [pc, #456]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a71      	ldr	r2, [pc, #452]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b6f      	ldr	r3, [pc, #444]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6e      	ldr	r2, [pc, #440]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 8002328:	4b6b      	ldr	r3, [pc, #428]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a6a      	ldr	r2, [pc, #424]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b68      	ldr	r3, [pc, #416]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a67      	ldr	r2, [pc, #412]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800233e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fdba 	bl	8000ec0 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe fdb6 	bl	8000ec0 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e200      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b5d      	ldr	r3, [pc, #372]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xe4>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fda6 	bl	8000ec0 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe fda2 	bl	8000ec0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1ec      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	4b53      	ldr	r3, [pc, #332]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x10c>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d063      	beq.n	800246e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a6:	4b4c      	ldr	r3, [pc, #304]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023b2:	4b49      	ldr	r3, [pc, #292]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d11c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x18c>
 80023be:	4b46      	ldr	r3, [pc, #280]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d116      	bne.n	80023f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	4b43      	ldr	r3, [pc, #268]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_RCC_OscConfig+0x176>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e1c0      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b3d      	ldr	r3, [pc, #244]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4939      	ldr	r1, [pc, #228]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	e03a      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002400:	4b36      	ldr	r3, [pc, #216]	@ (80024dc <HAL_RCC_OscConfig+0x270>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7fe fd5b 	bl	8000ec0 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240e:	f7fe fd57 	bl	8000ec0 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1a1      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	4b2d      	ldr	r3, [pc, #180]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b2a      	ldr	r3, [pc, #168]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4927      	ldr	r1, [pc, #156]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]
 8002440:	e015      	b.n	800246e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b26      	ldr	r3, [pc, #152]	@ (80024dc <HAL_RCC_OscConfig+0x270>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe fd3a 	bl	8000ec0 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002450:	f7fe fd36 	bl	8000ec0 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e180      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	4b1d      	ldr	r3, [pc, #116]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d03a      	beq.n	80024f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d019      	beq.n	80024b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002482:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002484:	2201      	movs	r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7fe fd1a 	bl	8000ec0 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002490:	f7fe fd16 	bl	8000ec0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e160      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f000 face 	bl	8002a50 <RCC_Delay>
 80024b4:	e01c      	b.n	80024f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b6:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <HAL_RCC_OscConfig+0x274>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024bc:	f7fe fd00 	bl	8000ec0 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c2:	e00f      	b.n	80024e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7fe fcfc 	bl	8000ec0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d908      	bls.n	80024e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e146      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	42420000 	.word	0x42420000
 80024e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	4b92      	ldr	r3, [pc, #584]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e9      	bne.n	80024c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a6 	beq.w	800264a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002502:	4b8b      	ldr	r3, [pc, #556]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b88      	ldr	r3, [pc, #544]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a87      	ldr	r2, [pc, #540]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002518:	61d3      	str	r3, [r2, #28]
 800251a:	4b85      	ldr	r3, [pc, #532]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252a:	4b82      	ldr	r3, [pc, #520]	@ (8002734 <HAL_RCC_OscConfig+0x4c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d118      	bne.n	8002568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002536:	4b7f      	ldr	r3, [pc, #508]	@ (8002734 <HAL_RCC_OscConfig+0x4c8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7e      	ldr	r2, [pc, #504]	@ (8002734 <HAL_RCC_OscConfig+0x4c8>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002542:	f7fe fcbd 	bl	8000ec0 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7fe fcb9 	bl	8000ec0 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b64      	cmp	r3, #100	@ 0x64
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e103      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	4b75      	ldr	r3, [pc, #468]	@ (8002734 <HAL_RCC_OscConfig+0x4c8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x312>
 8002570:	4b6f      	ldr	r3, [pc, #444]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a6e      	ldr	r2, [pc, #440]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	e02d      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x334>
 8002586:	4b6a      	ldr	r3, [pc, #424]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a69      	ldr	r2, [pc, #420]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6213      	str	r3, [r2, #32]
 8002592:	4b67      	ldr	r3, [pc, #412]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a66      	ldr	r2, [pc, #408]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6213      	str	r3, [r2, #32]
 800259e:	e01c      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x356>
 80025a8:	4b61      	ldr	r3, [pc, #388]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4a60      	ldr	r2, [pc, #384]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6213      	str	r3, [r2, #32]
 80025b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6213      	str	r3, [r2, #32]
 80025c0:	e00b      	b.n	80025da <HAL_RCC_OscConfig+0x36e>
 80025c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4a5a      	ldr	r2, [pc, #360]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6213      	str	r3, [r2, #32]
 80025ce:	4b58      	ldr	r3, [pc, #352]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a57      	ldr	r2, [pc, #348]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d015      	beq.n	800260e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fc6d 	bl	8000ec0 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe fc69 	bl	8000ec0 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0b1      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	4b4b      	ldr	r3, [pc, #300]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ee      	beq.n	80025ea <HAL_RCC_OscConfig+0x37e>
 800260c:	e014      	b.n	8002638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260e:	f7fe fc57 	bl	8000ec0 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe fc53 	bl	8000ec0 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e09b      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262c:	4b40      	ldr	r3, [pc, #256]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1ee      	bne.n	8002616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d105      	bne.n	800264a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263e:	4b3c      	ldr	r3, [pc, #240]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4a3b      	ldr	r2, [pc, #236]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8087 	beq.w	8002762 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002654:	4b36      	ldr	r3, [pc, #216]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b08      	cmp	r3, #8
 800265e:	d061      	beq.n	8002724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d146      	bne.n	80026f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002668:	4b33      	ldr	r3, [pc, #204]	@ (8002738 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7fe fc27 	bl	8000ec0 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe fc23 	bl	8000ec0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e06d      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800269c:	d108      	bne.n	80026b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800269e:	4b24      	ldr	r3, [pc, #144]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4921      	ldr	r1, [pc, #132]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a19      	ldr	r1, [r3, #32]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	430b      	orrs	r3, r1
 80026c2:	491b      	ldr	r1, [pc, #108]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <HAL_RCC_OscConfig+0x4cc>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe fbf7 	bl	8000ec0 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fbf3 	bl	8000ec0 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e03d      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e8:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x46a>
 80026f4:	e035      	b.n	8002762 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <HAL_RCC_OscConfig+0x4cc>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fbe0 	bl	8000ec0 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe fbdc 	bl	8000ec0 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e026      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x498>
 8002722:	e01e      	b.n	8002762 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d107      	bne.n	800273c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e019      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
 8002730:	40021000 	.word	0x40021000
 8002734:	40007000 	.word	0x40007000
 8002738:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800273c:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <HAL_RCC_OscConfig+0x500>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	429a      	cmp	r2, r3
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000

08002770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0d0      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b6a      	ldr	r3, [pc, #424]	@ (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d910      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b67      	ldr	r3, [pc, #412]	@ (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0207 	bic.w	r2, r3, #7
 800279a:	4965      	ldr	r1, [pc, #404]	@ (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b63      	ldr	r3, [pc, #396]	@ (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b8      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	4b59      	ldr	r3, [pc, #356]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a58      	ldr	r2, [pc, #352]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e4:	4b53      	ldr	r3, [pc, #332]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b50      	ldr	r3, [pc, #320]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	494d      	ldr	r1, [pc, #308]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d040      	beq.n	8002890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b47      	ldr	r3, [pc, #284]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d115      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282e:	4b41      	ldr	r3, [pc, #260]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e073      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	4b3d      	ldr	r3, [pc, #244]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e06b      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284e:	4b39      	ldr	r3, [pc, #228]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f023 0203 	bic.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4936      	ldr	r1, [pc, #216]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002860:	f7fe fb2e 	bl	8000ec0 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe fb2a 	bl	8000ec0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e053      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	4b2d      	ldr	r3, [pc, #180]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 020c 	and.w	r2, r3, #12
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	429a      	cmp	r2, r3
 800288e:	d1eb      	bne.n	8002868 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002890:	4b27      	ldr	r3, [pc, #156]	@ (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d210      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b24      	ldr	r3, [pc, #144]	@ (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 0207 	bic.w	r2, r3, #7
 80028a6:	4922      	ldr	r1, [pc, #136]	@ (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b20      	ldr	r3, [pc, #128]	@ (8002930 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e032      	b.n	8002926 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4916      	ldr	r1, [pc, #88]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ea:	4b12      	ldr	r3, [pc, #72]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	490e      	ldr	r1, [pc, #56]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028fe:	f000 f821 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002902:	4602      	mov	r2, r0
 8002904:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	490a      	ldr	r1, [pc, #40]	@ (8002938 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	5ccb      	ldrb	r3, [r1, r3]
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a09      	ldr	r2, [pc, #36]	@ (800293c <HAL_RCC_ClockConfig+0x1cc>)
 8002918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800291a:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <HAL_RCC_ClockConfig+0x1d0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fa8c 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000
 8002934:	40021000 	.word	0x40021000
 8002938:	08004724 	.word	0x08004724
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800295e:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b04      	cmp	r3, #4
 800296c:	d002      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x30>
 800296e:	2b08      	cmp	r3, #8
 8002970:	d003      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x36>
 8002972:	e027      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002976:	613b      	str	r3, [r7, #16]
      break;
 8002978:	e027      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	0c9b      	lsrs	r3, r3, #18
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	4a17      	ldr	r2, [pc, #92]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002984:	5cd3      	ldrb	r3, [r2, r3]
 8002986:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d010      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002992:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	0c5b      	lsrs	r3, r3, #17
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	4a11      	ldr	r2, [pc, #68]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x98>)
 80029a6:	fb03 f202 	mul.w	r2, r3, r2
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e004      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0c      	ldr	r2, [pc, #48]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	613b      	str	r3, [r7, #16]
      break;
 80029c2:	e002      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x98>)
 80029c6:	613b      	str	r3, [r7, #16]
      break;
 80029c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ca:	693b      	ldr	r3, [r7, #16]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	007a1200 	.word	0x007a1200
 80029e0:	0800473c 	.word	0x0800473c
 80029e4:	0800474c 	.word	0x0800474c
 80029e8:	003d0900 	.word	0x003d0900

080029ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f0:	4b02      	ldr	r3, [pc, #8]	@ (80029fc <HAL_RCC_GetHCLKFreq+0x10>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	20000000 	.word	0x20000000

08002a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a04:	f7ff fff2 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4903      	ldr	r1, [pc, #12]	@ (8002a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08004734 	.word	0x08004734

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a2c:	f7ff ffde 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0adb      	lsrs	r3, r3, #11
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4903      	ldr	r1, [pc, #12]	@ (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08004734 	.word	0x08004734

08002a50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a58:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <RCC_Delay+0x34>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a88 <RCC_Delay+0x38>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	0a5b      	lsrs	r3, r3, #9
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a6c:	bf00      	nop
  }
  while (Delay --);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1e5a      	subs	r2, r3, #1
 8002a72:	60fa      	str	r2, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f9      	bne.n	8002a6c <RCC_Delay+0x1c>
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	20000000 	.word	0x20000000
 8002a88:	10624dd3 	.word	0x10624dd3

08002a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e042      	b.n	8002b24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fd fd5a 	bl	800056c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2224      	movs	r2, #36	@ 0x24
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fdb7 	bl	8003644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	@ 0x28
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d175      	bne.n	8002c38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_UART_Transmit+0x2c>
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e06e      	b.n	8002c3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2221      	movs	r2, #33	@ 0x21
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b6a:	f7fe f9a9 	bl	8000ec0 <HAL_GetTick>
 8002b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b84:	d108      	bne.n	8002b98 <HAL_UART_Transmit+0x6c>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e003      	b.n	8002ba0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ba0:	e02e      	b.n	8002c00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2180      	movs	r1, #128	@ 0x80
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fb1c 	bl	80031ea <UART_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e03a      	b.n	8002c3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	3302      	adds	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	e007      	b.n	8002bf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1cb      	bne.n	8002ba2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2140      	movs	r1, #64	@ 0x40
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fae8 	bl	80031ea <UART_WaitOnFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e006      	b.n	8002c3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e000      	b.n	8002c3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d112      	bne.n	8002c82 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_UART_Receive_IT+0x26>
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e00b      	b.n	8002c84 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	461a      	mov	r2, r3
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fb0f 	bl	800329c <UART_Start_Receive_IT>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	e000      	b.n	8002c84 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c82:	2302      	movs	r3, #2
  }
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b0ba      	sub	sp, #232	@ 0xe8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10f      	bne.n	8002cf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x66>
 8002cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fbec 	bl	80034c8 <UART_Receive_IT>
      return;
 8002cf0:	e25b      	b.n	80031aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80de 	beq.w	8002eb8 <HAL_UART_IRQHandler+0x22c>
 8002cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d106      	bne.n	8002d16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80d1 	beq.w	8002eb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_UART_IRQHandler+0xae>
 8002d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_UART_IRQHandler+0xd2>
 8002d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	f043 0202 	orr.w	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <HAL_UART_IRQHandler+0xf6>
 8002d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	f043 0204 	orr.w	r2, r3, #4
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d011      	beq.n	8002db2 <HAL_UART_IRQHandler+0x126>
 8002d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002daa:	f043 0208 	orr.w	r2, r3, #8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 81f2 	beq.w	80031a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_UART_IRQHandler+0x14e>
 8002dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fb77 	bl	80034c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <HAL_UART_IRQHandler+0x17a>
 8002dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d04f      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa81 	bl	800330e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d041      	beq.n	8002e9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3314      	adds	r3, #20
 8002e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3314      	adds	r3, #20
 8002e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1d9      	bne.n	8002e1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d013      	beq.n	8002e96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e72:	4a7e      	ldr	r2, [pc, #504]	@ (800306c <HAL_UART_IRQHandler+0x3e0>)
 8002e74:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe ffb2 	bl	8001de4 <HAL_DMA_Abort_IT>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d016      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e90:	4610      	mov	r0, r2
 8002e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e94:	e00e      	b.n	8002eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f993 	bl	80031c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e9c:	e00a      	b.n	8002eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f98f 	bl	80031c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	e006      	b.n	8002eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f98b 	bl	80031c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002eb2:	e175      	b.n	80031a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	bf00      	nop
    return;
 8002eb6:	e173      	b.n	80031a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	f040 814f 	bne.w	8003160 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8148 	beq.w	8003160 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8141 	beq.w	8003160 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80b6 	beq.w	8003070 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8145 	beq.w	80031a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f22:	429a      	cmp	r2, r3
 8002f24:	f080 813e 	bcs.w	80031a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f2e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	f000 8088 	beq.w	800304c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	330c      	adds	r3, #12
 8002f64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f68:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f70:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f74:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f78:	e841 2300 	strex	r3, r2, [r1]
 8002f7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1d9      	bne.n	8002f3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fac:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002fb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fb8:	e841 2300 	strex	r3, r2, [r1]
 8002fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002fbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e1      	bne.n	8002f88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3314      	adds	r3, #20
 8002fca:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fce:	e853 3f00 	ldrex	r3, [r3]
 8002fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002fe8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002fee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e3      	bne.n	8002fc4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	330c      	adds	r3, #12
 8003010:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003014:	e853 3f00 	ldrex	r3, [r3]
 8003018:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800301a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800301c:	f023 0310 	bic.w	r3, r3, #16
 8003020:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800302e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003030:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003034:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800303c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e3      	bne.n	800300a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fe91 	bl	8001d6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800305a:	b29b      	uxth	r3, r3
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	b29b      	uxth	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8b6 	bl	80031d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003068:	e09c      	b.n	80031a4 <HAL_UART_IRQHandler+0x518>
 800306a:	bf00      	nop
 800306c:	080033d3 	.word	0x080033d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003078:	b29b      	uxth	r3, r3
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 808e 	beq.w	80031a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800308c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8089 	beq.w	80031a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	330c      	adds	r3, #12
 800309c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	330c      	adds	r3, #12
 80030b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80030ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80030bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1e3      	bne.n	8003096 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3314      	adds	r3, #20
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	623b      	str	r3, [r7, #32]
   return(result);
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3314      	adds	r3, #20
 80030ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80030f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030fa:	e841 2300 	strex	r3, r2, [r1]
 80030fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e3      	bne.n	80030ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	330c      	adds	r3, #12
 800311a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	60fb      	str	r3, [r7, #12]
   return(result);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0310 	bic.w	r3, r3, #16
 800312a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	330c      	adds	r3, #12
 8003134:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003138:	61fa      	str	r2, [r7, #28]
 800313a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	69b9      	ldr	r1, [r7, #24]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	617b      	str	r3, [r7, #20]
   return(result);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e3      	bne.n	8003114 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003152:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003156:	4619      	mov	r1, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f83b 	bl	80031d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800315e:	e023      	b.n	80031a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003168:	2b00      	cmp	r3, #0
 800316a:	d009      	beq.n	8003180 <HAL_UART_IRQHandler+0x4f4>
 800316c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f93e 	bl	80033fa <UART_Transmit_IT>
    return;
 800317e:	e014      	b.n	80031aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00e      	beq.n	80031aa <HAL_UART_IRQHandler+0x51e>
 800318c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f97d 	bl	8003498 <UART_EndTransmit_IT>
    return;
 800319e:	e004      	b.n	80031aa <HAL_UART_IRQHandler+0x51e>
    return;
 80031a0:	bf00      	nop
 80031a2:	e002      	b.n	80031aa <HAL_UART_IRQHandler+0x51e>
      return;
 80031a4:	bf00      	nop
 80031a6:	e000      	b.n	80031aa <HAL_UART_IRQHandler+0x51e>
      return;
 80031a8:	bf00      	nop
  }
}
 80031aa:	37e8      	adds	r7, #232	@ 0xe8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	4613      	mov	r3, r2
 80031f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fa:	e03b      	b.n	8003274 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d037      	beq.n	8003274 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003204:	f7fd fe5c 	bl	8000ec0 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	6a3a      	ldr	r2, [r7, #32]
 8003210:	429a      	cmp	r2, r3
 8003212:	d302      	bcc.n	800321a <UART_WaitOnFlagUntilTimeout+0x30>
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e03a      	b.n	8003294 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d023      	beq.n	8003274 <UART_WaitOnFlagUntilTimeout+0x8a>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b80      	cmp	r3, #128	@ 0x80
 8003230:	d020      	beq.n	8003274 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b40      	cmp	r3, #64	@ 0x40
 8003236:	d01d      	beq.n	8003274 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b08      	cmp	r3, #8
 8003244:	d116      	bne.n	8003274 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f856 	bl	800330e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2208      	movs	r2, #8
 8003266:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e00f      	b.n	8003294 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4013      	ands	r3, r2
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	429a      	cmp	r2, r3
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	429a      	cmp	r2, r3
 8003290:	d0b4      	beq.n	80031fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	88fa      	ldrh	r2, [r7, #6]
 80032ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2222      	movs	r2, #34	@ 0x22
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0220 	orr.w	r2, r2, #32
 8003300:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800330e:	b480      	push	{r7}
 8003310:	b095      	sub	sp, #84	@ 0x54
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800332c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	330c      	adds	r3, #12
 8003334:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003336:	643a      	str	r2, [r7, #64]	@ 0x40
 8003338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800333c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3314      	adds	r3, #20
 8003350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	61fb      	str	r3, [r7, #28]
   return(result);
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3314      	adds	r3, #20
 8003368:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800336a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800336c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e5      	bne.n	800334a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	2b01      	cmp	r3, #1
 8003384:	d119      	bne.n	80033ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	60bb      	str	r3, [r7, #8]
   return(result);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f023 0310 	bic.w	r3, r3, #16
 800339c:	647b      	str	r3, [r7, #68]	@ 0x44
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	330c      	adds	r3, #12
 80033a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033a6:	61ba      	str	r2, [r7, #24]
 80033a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	6979      	ldr	r1, [r7, #20]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	613b      	str	r3, [r7, #16]
   return(result);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e5      	bne.n	8003386 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033c8:	bf00      	nop
 80033ca:	3754      	adds	r7, #84	@ 0x54
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff fee8 	bl	80031c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b21      	cmp	r3, #33	@ 0x21
 800340c:	d13e      	bne.n	800348c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003416:	d114      	bne.n	8003442 <UART_Transmit_IT+0x48>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d110      	bne.n	8003442 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003434:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	1c9a      	adds	r2, r3, #2
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	621a      	str	r2, [r3, #32]
 8003440:	e008      	b.n	8003454 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	1c59      	adds	r1, r3, #1
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6211      	str	r1, [r2, #32]
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29b      	uxth	r3, r3
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4619      	mov	r1, r3
 8003462:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10f      	bne.n	8003488 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003476:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003486:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800348c:	2302      	movs	r3, #2
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff fe79 	bl	80031b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	@ 0x30
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b22      	cmp	r3, #34	@ 0x22
 80034da:	f040 80ae 	bne.w	800363a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e6:	d117      	bne.n	8003518 <UART_Receive_IT+0x50>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d113      	bne.n	8003518 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	b29b      	uxth	r3, r3
 8003502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003506:	b29a      	uxth	r2, r3
 8003508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	629a      	str	r2, [r3, #40]	@ 0x28
 8003516:	e026      	b.n	8003566 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800352a:	d007      	beq.n	800353c <UART_Receive_IT+0x74>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <UART_Receive_IT+0x82>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	e008      	b.n	800355c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003556:	b2da      	uxtb	r2, r3
 8003558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29b      	uxth	r3, r3
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4619      	mov	r1, r3
 8003574:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003576:	2b00      	cmp	r3, #0
 8003578:	d15d      	bne.n	8003636 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0220 	bic.w	r2, r2, #32
 8003588:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003598:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d135      	bne.n	800362c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	613b      	str	r3, [r7, #16]
   return(result);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f023 0310 	bic.w	r3, r3, #16
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e6:	623a      	str	r2, [r7, #32]
 80035e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	69f9      	ldr	r1, [r7, #28]
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1e5      	bne.n	80035c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b10      	cmp	r3, #16
 8003606:	d10a      	bne.n	800361e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003622:	4619      	mov	r1, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff fdd5 	bl	80031d4 <HAL_UARTEx_RxEventCallback>
 800362a:	e002      	b.n	8003632 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fd f8f5 	bl	800081c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e002      	b.n	800363c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	e000      	b.n	800363c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800363a:	2302      	movs	r3, #2
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	3730      	adds	r7, #48	@ 0x30
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800367e:	f023 030c 	bic.w	r3, r3, #12
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	430b      	orrs	r3, r1
 800368a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003758 <UART_SetConfig+0x114>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d103      	bne.n	80036b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036ac:	f7ff f9bc 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	e002      	b.n	80036ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036b4:	f7ff f9a4 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 80036b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009a      	lsls	r2, r3, #2
 80036c4:	441a      	add	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d0:	4a22      	ldr	r2, [pc, #136]	@ (800375c <UART_SetConfig+0x118>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	0119      	lsls	r1, r3, #4
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009a      	lsls	r2, r3, #2
 80036e4:	441a      	add	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f0:	4b1a      	ldr	r3, [pc, #104]	@ (800375c <UART_SetConfig+0x118>)
 80036f2:	fba3 0302 	umull	r0, r3, r3, r2
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2064      	movs	r0, #100	@ 0x64
 80036fa:	fb00 f303 	mul.w	r3, r0, r3
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	3332      	adds	r3, #50	@ 0x32
 8003704:	4a15      	ldr	r2, [pc, #84]	@ (800375c <UART_SetConfig+0x118>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003710:	4419      	add	r1, r3
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009a      	lsls	r2, r3, #2
 800371c:	441a      	add	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	fbb2 f2f3 	udiv	r2, r2, r3
 8003728:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <UART_SetConfig+0x118>)
 800372a:	fba3 0302 	umull	r0, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2064      	movs	r0, #100	@ 0x64
 8003732:	fb00 f303 	mul.w	r3, r0, r3
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	3332      	adds	r3, #50	@ 0x32
 800373c:	4a07      	ldr	r2, [pc, #28]	@ (800375c <UART_SetConfig+0x118>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	440a      	add	r2, r1
 800374e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40013800 	.word	0x40013800
 800375c:	51eb851f 	.word	0x51eb851f

08003760 <std>:
 8003760:	2300      	movs	r3, #0
 8003762:	b510      	push	{r4, lr}
 8003764:	4604      	mov	r4, r0
 8003766:	e9c0 3300 	strd	r3, r3, [r0]
 800376a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800376e:	6083      	str	r3, [r0, #8]
 8003770:	8181      	strh	r1, [r0, #12]
 8003772:	6643      	str	r3, [r0, #100]	@ 0x64
 8003774:	81c2      	strh	r2, [r0, #14]
 8003776:	6183      	str	r3, [r0, #24]
 8003778:	4619      	mov	r1, r3
 800377a:	2208      	movs	r2, #8
 800377c:	305c      	adds	r0, #92	@ 0x5c
 800377e:	f000 f9f9 	bl	8003b74 <memset>
 8003782:	4b0d      	ldr	r3, [pc, #52]	@ (80037b8 <std+0x58>)
 8003784:	6224      	str	r4, [r4, #32]
 8003786:	6263      	str	r3, [r4, #36]	@ 0x24
 8003788:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <std+0x5c>)
 800378a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800378c:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <std+0x60>)
 800378e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003790:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <std+0x64>)
 8003792:	6323      	str	r3, [r4, #48]	@ 0x30
 8003794:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <std+0x68>)
 8003796:	429c      	cmp	r4, r3
 8003798:	d006      	beq.n	80037a8 <std+0x48>
 800379a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800379e:	4294      	cmp	r4, r2
 80037a0:	d002      	beq.n	80037a8 <std+0x48>
 80037a2:	33d0      	adds	r3, #208	@ 0xd0
 80037a4:	429c      	cmp	r4, r3
 80037a6:	d105      	bne.n	80037b4 <std+0x54>
 80037a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b0:	f000 ba58 	b.w	8003c64 <__retarget_lock_init_recursive>
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	bf00      	nop
 80037b8:	080039c5 	.word	0x080039c5
 80037bc:	080039e7 	.word	0x080039e7
 80037c0:	08003a1f 	.word	0x08003a1f
 80037c4:	08003a43 	.word	0x08003a43
 80037c8:	2000092c 	.word	0x2000092c

080037cc <stdio_exit_handler>:
 80037cc:	4a02      	ldr	r2, [pc, #8]	@ (80037d8 <stdio_exit_handler+0xc>)
 80037ce:	4903      	ldr	r1, [pc, #12]	@ (80037dc <stdio_exit_handler+0x10>)
 80037d0:	4803      	ldr	r0, [pc, #12]	@ (80037e0 <stdio_exit_handler+0x14>)
 80037d2:	f000 b869 	b.w	80038a8 <_fwalk_sglue>
 80037d6:	bf00      	nop
 80037d8:	2000000c 	.word	0x2000000c
 80037dc:	080044fd 	.word	0x080044fd
 80037e0:	2000001c 	.word	0x2000001c

080037e4 <cleanup_stdio>:
 80037e4:	6841      	ldr	r1, [r0, #4]
 80037e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <cleanup_stdio+0x34>)
 80037e8:	b510      	push	{r4, lr}
 80037ea:	4299      	cmp	r1, r3
 80037ec:	4604      	mov	r4, r0
 80037ee:	d001      	beq.n	80037f4 <cleanup_stdio+0x10>
 80037f0:	f000 fe84 	bl	80044fc <_fflush_r>
 80037f4:	68a1      	ldr	r1, [r4, #8]
 80037f6:	4b09      	ldr	r3, [pc, #36]	@ (800381c <cleanup_stdio+0x38>)
 80037f8:	4299      	cmp	r1, r3
 80037fa:	d002      	beq.n	8003802 <cleanup_stdio+0x1e>
 80037fc:	4620      	mov	r0, r4
 80037fe:	f000 fe7d 	bl	80044fc <_fflush_r>
 8003802:	68e1      	ldr	r1, [r4, #12]
 8003804:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <cleanup_stdio+0x3c>)
 8003806:	4299      	cmp	r1, r3
 8003808:	d004      	beq.n	8003814 <cleanup_stdio+0x30>
 800380a:	4620      	mov	r0, r4
 800380c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003810:	f000 be74 	b.w	80044fc <_fflush_r>
 8003814:	bd10      	pop	{r4, pc}
 8003816:	bf00      	nop
 8003818:	2000092c 	.word	0x2000092c
 800381c:	20000994 	.word	0x20000994
 8003820:	200009fc 	.word	0x200009fc

08003824 <global_stdio_init.part.0>:
 8003824:	b510      	push	{r4, lr}
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <global_stdio_init.part.0+0x30>)
 8003828:	4c0b      	ldr	r4, [pc, #44]	@ (8003858 <global_stdio_init.part.0+0x34>)
 800382a:	4a0c      	ldr	r2, [pc, #48]	@ (800385c <global_stdio_init.part.0+0x38>)
 800382c:	4620      	mov	r0, r4
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	2104      	movs	r1, #4
 8003832:	2200      	movs	r2, #0
 8003834:	f7ff ff94 	bl	8003760 <std>
 8003838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800383c:	2201      	movs	r2, #1
 800383e:	2109      	movs	r1, #9
 8003840:	f7ff ff8e 	bl	8003760 <std>
 8003844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003848:	2202      	movs	r2, #2
 800384a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800384e:	2112      	movs	r1, #18
 8003850:	f7ff bf86 	b.w	8003760 <std>
 8003854:	20000a64 	.word	0x20000a64
 8003858:	2000092c 	.word	0x2000092c
 800385c:	080037cd 	.word	0x080037cd

08003860 <__sfp_lock_acquire>:
 8003860:	4801      	ldr	r0, [pc, #4]	@ (8003868 <__sfp_lock_acquire+0x8>)
 8003862:	f000 ba00 	b.w	8003c66 <__retarget_lock_acquire_recursive>
 8003866:	bf00      	nop
 8003868:	20000a6d 	.word	0x20000a6d

0800386c <__sfp_lock_release>:
 800386c:	4801      	ldr	r0, [pc, #4]	@ (8003874 <__sfp_lock_release+0x8>)
 800386e:	f000 b9fb 	b.w	8003c68 <__retarget_lock_release_recursive>
 8003872:	bf00      	nop
 8003874:	20000a6d 	.word	0x20000a6d

08003878 <__sinit>:
 8003878:	b510      	push	{r4, lr}
 800387a:	4604      	mov	r4, r0
 800387c:	f7ff fff0 	bl	8003860 <__sfp_lock_acquire>
 8003880:	6a23      	ldr	r3, [r4, #32]
 8003882:	b11b      	cbz	r3, 800388c <__sinit+0x14>
 8003884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003888:	f7ff bff0 	b.w	800386c <__sfp_lock_release>
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <__sinit+0x28>)
 800388e:	6223      	str	r3, [r4, #32]
 8003890:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <__sinit+0x2c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f5      	bne.n	8003884 <__sinit+0xc>
 8003898:	f7ff ffc4 	bl	8003824 <global_stdio_init.part.0>
 800389c:	e7f2      	b.n	8003884 <__sinit+0xc>
 800389e:	bf00      	nop
 80038a0:	080037e5 	.word	0x080037e5
 80038a4:	20000a64 	.word	0x20000a64

080038a8 <_fwalk_sglue>:
 80038a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038ac:	4607      	mov	r7, r0
 80038ae:	4688      	mov	r8, r1
 80038b0:	4614      	mov	r4, r2
 80038b2:	2600      	movs	r6, #0
 80038b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038b8:	f1b9 0901 	subs.w	r9, r9, #1
 80038bc:	d505      	bpl.n	80038ca <_fwalk_sglue+0x22>
 80038be:	6824      	ldr	r4, [r4, #0]
 80038c0:	2c00      	cmp	r4, #0
 80038c2:	d1f7      	bne.n	80038b4 <_fwalk_sglue+0xc>
 80038c4:	4630      	mov	r0, r6
 80038c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ca:	89ab      	ldrh	r3, [r5, #12]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d907      	bls.n	80038e0 <_fwalk_sglue+0x38>
 80038d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038d4:	3301      	adds	r3, #1
 80038d6:	d003      	beq.n	80038e0 <_fwalk_sglue+0x38>
 80038d8:	4629      	mov	r1, r5
 80038da:	4638      	mov	r0, r7
 80038dc:	47c0      	blx	r8
 80038de:	4306      	orrs	r6, r0
 80038e0:	3568      	adds	r5, #104	@ 0x68
 80038e2:	e7e9      	b.n	80038b8 <_fwalk_sglue+0x10>

080038e4 <iprintf>:
 80038e4:	b40f      	push	{r0, r1, r2, r3}
 80038e6:	b507      	push	{r0, r1, r2, lr}
 80038e8:	4906      	ldr	r1, [pc, #24]	@ (8003904 <iprintf+0x20>)
 80038ea:	ab04      	add	r3, sp, #16
 80038ec:	6808      	ldr	r0, [r1, #0]
 80038ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80038f2:	6881      	ldr	r1, [r0, #8]
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	f000 fad7 	bl	8003ea8 <_vfiprintf_r>
 80038fa:	b003      	add	sp, #12
 80038fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003900:	b004      	add	sp, #16
 8003902:	4770      	bx	lr
 8003904:	20000018 	.word	0x20000018

08003908 <_puts_r>:
 8003908:	6a03      	ldr	r3, [r0, #32]
 800390a:	b570      	push	{r4, r5, r6, lr}
 800390c:	4605      	mov	r5, r0
 800390e:	460e      	mov	r6, r1
 8003910:	6884      	ldr	r4, [r0, #8]
 8003912:	b90b      	cbnz	r3, 8003918 <_puts_r+0x10>
 8003914:	f7ff ffb0 	bl	8003878 <__sinit>
 8003918:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800391a:	07db      	lsls	r3, r3, #31
 800391c:	d405      	bmi.n	800392a <_puts_r+0x22>
 800391e:	89a3      	ldrh	r3, [r4, #12]
 8003920:	0598      	lsls	r0, r3, #22
 8003922:	d402      	bmi.n	800392a <_puts_r+0x22>
 8003924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003926:	f000 f99e 	bl	8003c66 <__retarget_lock_acquire_recursive>
 800392a:	89a3      	ldrh	r3, [r4, #12]
 800392c:	0719      	lsls	r1, r3, #28
 800392e:	d502      	bpl.n	8003936 <_puts_r+0x2e>
 8003930:	6923      	ldr	r3, [r4, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d135      	bne.n	80039a2 <_puts_r+0x9a>
 8003936:	4621      	mov	r1, r4
 8003938:	4628      	mov	r0, r5
 800393a:	f000 f8c5 	bl	8003ac8 <__swsetup_r>
 800393e:	b380      	cbz	r0, 80039a2 <_puts_r+0x9a>
 8003940:	f04f 35ff 	mov.w	r5, #4294967295
 8003944:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003946:	07da      	lsls	r2, r3, #31
 8003948:	d405      	bmi.n	8003956 <_puts_r+0x4e>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	059b      	lsls	r3, r3, #22
 800394e:	d402      	bmi.n	8003956 <_puts_r+0x4e>
 8003950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003952:	f000 f989 	bl	8003c68 <__retarget_lock_release_recursive>
 8003956:	4628      	mov	r0, r5
 8003958:	bd70      	pop	{r4, r5, r6, pc}
 800395a:	2b00      	cmp	r3, #0
 800395c:	da04      	bge.n	8003968 <_puts_r+0x60>
 800395e:	69a2      	ldr	r2, [r4, #24]
 8003960:	429a      	cmp	r2, r3
 8003962:	dc17      	bgt.n	8003994 <_puts_r+0x8c>
 8003964:	290a      	cmp	r1, #10
 8003966:	d015      	beq.n	8003994 <_puts_r+0x8c>
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	6022      	str	r2, [r4, #0]
 800396e:	7019      	strb	r1, [r3, #0]
 8003970:	68a3      	ldr	r3, [r4, #8]
 8003972:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003976:	3b01      	subs	r3, #1
 8003978:	60a3      	str	r3, [r4, #8]
 800397a:	2900      	cmp	r1, #0
 800397c:	d1ed      	bne.n	800395a <_puts_r+0x52>
 800397e:	2b00      	cmp	r3, #0
 8003980:	da11      	bge.n	80039a6 <_puts_r+0x9e>
 8003982:	4622      	mov	r2, r4
 8003984:	210a      	movs	r1, #10
 8003986:	4628      	mov	r0, r5
 8003988:	f000 f85f 	bl	8003a4a <__swbuf_r>
 800398c:	3001      	adds	r0, #1
 800398e:	d0d7      	beq.n	8003940 <_puts_r+0x38>
 8003990:	250a      	movs	r5, #10
 8003992:	e7d7      	b.n	8003944 <_puts_r+0x3c>
 8003994:	4622      	mov	r2, r4
 8003996:	4628      	mov	r0, r5
 8003998:	f000 f857 	bl	8003a4a <__swbuf_r>
 800399c:	3001      	adds	r0, #1
 800399e:	d1e7      	bne.n	8003970 <_puts_r+0x68>
 80039a0:	e7ce      	b.n	8003940 <_puts_r+0x38>
 80039a2:	3e01      	subs	r6, #1
 80039a4:	e7e4      	b.n	8003970 <_puts_r+0x68>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	6022      	str	r2, [r4, #0]
 80039ac:	220a      	movs	r2, #10
 80039ae:	701a      	strb	r2, [r3, #0]
 80039b0:	e7ee      	b.n	8003990 <_puts_r+0x88>
	...

080039b4 <puts>:
 80039b4:	4b02      	ldr	r3, [pc, #8]	@ (80039c0 <puts+0xc>)
 80039b6:	4601      	mov	r1, r0
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	f7ff bfa5 	b.w	8003908 <_puts_r>
 80039be:	bf00      	nop
 80039c0:	20000018 	.word	0x20000018

080039c4 <__sread>:
 80039c4:	b510      	push	{r4, lr}
 80039c6:	460c      	mov	r4, r1
 80039c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039cc:	f000 f8fc 	bl	8003bc8 <_read_r>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	bfab      	itete	ge
 80039d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80039d6:	89a3      	ldrhlt	r3, [r4, #12]
 80039d8:	181b      	addge	r3, r3, r0
 80039da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039de:	bfac      	ite	ge
 80039e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039e2:	81a3      	strhlt	r3, [r4, #12]
 80039e4:	bd10      	pop	{r4, pc}

080039e6 <__swrite>:
 80039e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ea:	461f      	mov	r7, r3
 80039ec:	898b      	ldrh	r3, [r1, #12]
 80039ee:	4605      	mov	r5, r0
 80039f0:	05db      	lsls	r3, r3, #23
 80039f2:	460c      	mov	r4, r1
 80039f4:	4616      	mov	r6, r2
 80039f6:	d505      	bpl.n	8003a04 <__swrite+0x1e>
 80039f8:	2302      	movs	r3, #2
 80039fa:	2200      	movs	r2, #0
 80039fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a00:	f000 f8d0 	bl	8003ba4 <_lseek_r>
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	4632      	mov	r2, r6
 8003a08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	4628      	mov	r0, r5
 8003a10:	463b      	mov	r3, r7
 8003a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1a:	f000 b8e7 	b.w	8003bec <_write_r>

08003a1e <__sseek>:
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	460c      	mov	r4, r1
 8003a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a26:	f000 f8bd 	bl	8003ba4 <_lseek_r>
 8003a2a:	1c43      	adds	r3, r0, #1
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	bf15      	itete	ne
 8003a30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a3a:	81a3      	strheq	r3, [r4, #12]
 8003a3c:	bf18      	it	ne
 8003a3e:	81a3      	strhne	r3, [r4, #12]
 8003a40:	bd10      	pop	{r4, pc}

08003a42 <__sclose>:
 8003a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a46:	f000 b89d 	b.w	8003b84 <_close_r>

08003a4a <__swbuf_r>:
 8003a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4c:	460e      	mov	r6, r1
 8003a4e:	4614      	mov	r4, r2
 8003a50:	4605      	mov	r5, r0
 8003a52:	b118      	cbz	r0, 8003a5c <__swbuf_r+0x12>
 8003a54:	6a03      	ldr	r3, [r0, #32]
 8003a56:	b90b      	cbnz	r3, 8003a5c <__swbuf_r+0x12>
 8003a58:	f7ff ff0e 	bl	8003878 <__sinit>
 8003a5c:	69a3      	ldr	r3, [r4, #24]
 8003a5e:	60a3      	str	r3, [r4, #8]
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	071a      	lsls	r2, r3, #28
 8003a64:	d501      	bpl.n	8003a6a <__swbuf_r+0x20>
 8003a66:	6923      	ldr	r3, [r4, #16]
 8003a68:	b943      	cbnz	r3, 8003a7c <__swbuf_r+0x32>
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f000 f82b 	bl	8003ac8 <__swsetup_r>
 8003a72:	b118      	cbz	r0, 8003a7c <__swbuf_r+0x32>
 8003a74:	f04f 37ff 	mov.w	r7, #4294967295
 8003a78:	4638      	mov	r0, r7
 8003a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	6922      	ldr	r2, [r4, #16]
 8003a80:	b2f6      	uxtb	r6, r6
 8003a82:	1a98      	subs	r0, r3, r2
 8003a84:	6963      	ldr	r3, [r4, #20]
 8003a86:	4637      	mov	r7, r6
 8003a88:	4283      	cmp	r3, r0
 8003a8a:	dc05      	bgt.n	8003a98 <__swbuf_r+0x4e>
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f000 fd34 	bl	80044fc <_fflush_r>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d1ed      	bne.n	8003a74 <__swbuf_r+0x2a>
 8003a98:	68a3      	ldr	r3, [r4, #8]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	60a3      	str	r3, [r4, #8]
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	6022      	str	r2, [r4, #0]
 8003aa4:	701e      	strb	r6, [r3, #0]
 8003aa6:	6962      	ldr	r2, [r4, #20]
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d004      	beq.n	8003ab8 <__swbuf_r+0x6e>
 8003aae:	89a3      	ldrh	r3, [r4, #12]
 8003ab0:	07db      	lsls	r3, r3, #31
 8003ab2:	d5e1      	bpl.n	8003a78 <__swbuf_r+0x2e>
 8003ab4:	2e0a      	cmp	r6, #10
 8003ab6:	d1df      	bne.n	8003a78 <__swbuf_r+0x2e>
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4628      	mov	r0, r5
 8003abc:	f000 fd1e 	bl	80044fc <_fflush_r>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d0d9      	beq.n	8003a78 <__swbuf_r+0x2e>
 8003ac4:	e7d6      	b.n	8003a74 <__swbuf_r+0x2a>
	...

08003ac8 <__swsetup_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4b29      	ldr	r3, [pc, #164]	@ (8003b70 <__swsetup_r+0xa8>)
 8003acc:	4605      	mov	r5, r0
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	b118      	cbz	r0, 8003adc <__swsetup_r+0x14>
 8003ad4:	6a03      	ldr	r3, [r0, #32]
 8003ad6:	b90b      	cbnz	r3, 8003adc <__swsetup_r+0x14>
 8003ad8:	f7ff fece 	bl	8003878 <__sinit>
 8003adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ae0:	0719      	lsls	r1, r3, #28
 8003ae2:	d422      	bmi.n	8003b2a <__swsetup_r+0x62>
 8003ae4:	06da      	lsls	r2, r3, #27
 8003ae6:	d407      	bmi.n	8003af8 <__swsetup_r+0x30>
 8003ae8:	2209      	movs	r2, #9
 8003aea:	602a      	str	r2, [r5, #0]
 8003aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	81a3      	strh	r3, [r4, #12]
 8003af6:	e033      	b.n	8003b60 <__swsetup_r+0x98>
 8003af8:	0758      	lsls	r0, r3, #29
 8003afa:	d512      	bpl.n	8003b22 <__swsetup_r+0x5a>
 8003afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003afe:	b141      	cbz	r1, 8003b12 <__swsetup_r+0x4a>
 8003b00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b04:	4299      	cmp	r1, r3
 8003b06:	d002      	beq.n	8003b0e <__swsetup_r+0x46>
 8003b08:	4628      	mov	r0, r5
 8003b0a:	f000 f8af 	bl	8003c6c <_free_r>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b12:	89a3      	ldrh	r3, [r4, #12]
 8003b14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b18:	81a3      	strh	r3, [r4, #12]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	6063      	str	r3, [r4, #4]
 8003b1e:	6923      	ldr	r3, [r4, #16]
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	89a3      	ldrh	r3, [r4, #12]
 8003b24:	f043 0308 	orr.w	r3, r3, #8
 8003b28:	81a3      	strh	r3, [r4, #12]
 8003b2a:	6923      	ldr	r3, [r4, #16]
 8003b2c:	b94b      	cbnz	r3, 8003b42 <__swsetup_r+0x7a>
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b38:	d003      	beq.n	8003b42 <__swsetup_r+0x7a>
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f000 fd2a 	bl	8004596 <__smakebuf_r>
 8003b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b46:	f013 0201 	ands.w	r2, r3, #1
 8003b4a:	d00a      	beq.n	8003b62 <__swsetup_r+0x9a>
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	60a2      	str	r2, [r4, #8]
 8003b50:	6962      	ldr	r2, [r4, #20]
 8003b52:	4252      	negs	r2, r2
 8003b54:	61a2      	str	r2, [r4, #24]
 8003b56:	6922      	ldr	r2, [r4, #16]
 8003b58:	b942      	cbnz	r2, 8003b6c <__swsetup_r+0xa4>
 8003b5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b5e:	d1c5      	bne.n	8003aec <__swsetup_r+0x24>
 8003b60:	bd38      	pop	{r3, r4, r5, pc}
 8003b62:	0799      	lsls	r1, r3, #30
 8003b64:	bf58      	it	pl
 8003b66:	6962      	ldrpl	r2, [r4, #20]
 8003b68:	60a2      	str	r2, [r4, #8]
 8003b6a:	e7f4      	b.n	8003b56 <__swsetup_r+0x8e>
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	e7f7      	b.n	8003b60 <__swsetup_r+0x98>
 8003b70:	20000018 	.word	0x20000018

08003b74 <memset>:
 8003b74:	4603      	mov	r3, r0
 8003b76:	4402      	add	r2, r0
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d100      	bne.n	8003b7e <memset+0xa>
 8003b7c:	4770      	bx	lr
 8003b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b82:	e7f9      	b.n	8003b78 <memset+0x4>

08003b84 <_close_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	2300      	movs	r3, #0
 8003b88:	4d05      	ldr	r5, [pc, #20]	@ (8003ba0 <_close_r+0x1c>)
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	f7fc fdb9 	bl	8000706 <_close>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_close_r+0x1a>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_close_r+0x1a>
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	20000a68 	.word	0x20000a68

08003ba4 <_lseek_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	4608      	mov	r0, r1
 8003baa:	4611      	mov	r1, r2
 8003bac:	2200      	movs	r2, #0
 8003bae:	4d05      	ldr	r5, [pc, #20]	@ (8003bc4 <_lseek_r+0x20>)
 8003bb0:	602a      	str	r2, [r5, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f7fc fdcb 	bl	800074e <_lseek>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d102      	bne.n	8003bc2 <_lseek_r+0x1e>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	b103      	cbz	r3, 8003bc2 <_lseek_r+0x1e>
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	20000a68 	.word	0x20000a68

08003bc8 <_read_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	4d05      	ldr	r5, [pc, #20]	@ (8003be8 <_read_r+0x20>)
 8003bd4:	602a      	str	r2, [r5, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f7fc fd5c 	bl	8000694 <_read>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d102      	bne.n	8003be6 <_read_r+0x1e>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	b103      	cbz	r3, 8003be6 <_read_r+0x1e>
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	20000a68 	.word	0x20000a68

08003bec <_write_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4604      	mov	r4, r0
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	4d05      	ldr	r5, [pc, #20]	@ (8003c0c <_write_r+0x20>)
 8003bf8:	602a      	str	r2, [r5, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f7fc fd67 	bl	80006ce <_write>
 8003c00:	1c43      	adds	r3, r0, #1
 8003c02:	d102      	bne.n	8003c0a <_write_r+0x1e>
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	b103      	cbz	r3, 8003c0a <_write_r+0x1e>
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	20000a68 	.word	0x20000a68

08003c10 <__errno>:
 8003c10:	4b01      	ldr	r3, [pc, #4]	@ (8003c18 <__errno+0x8>)
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000018 	.word	0x20000018

08003c1c <__libc_init_array>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	2600      	movs	r6, #0
 8003c20:	4d0c      	ldr	r5, [pc, #48]	@ (8003c54 <__libc_init_array+0x38>)
 8003c22:	4c0d      	ldr	r4, [pc, #52]	@ (8003c58 <__libc_init_array+0x3c>)
 8003c24:	1b64      	subs	r4, r4, r5
 8003c26:	10a4      	asrs	r4, r4, #2
 8003c28:	42a6      	cmp	r6, r4
 8003c2a:	d109      	bne.n	8003c40 <__libc_init_array+0x24>
 8003c2c:	f000 fd30 	bl	8004690 <_init>
 8003c30:	2600      	movs	r6, #0
 8003c32:	4d0a      	ldr	r5, [pc, #40]	@ (8003c5c <__libc_init_array+0x40>)
 8003c34:	4c0a      	ldr	r4, [pc, #40]	@ (8003c60 <__libc_init_array+0x44>)
 8003c36:	1b64      	subs	r4, r4, r5
 8003c38:	10a4      	asrs	r4, r4, #2
 8003c3a:	42a6      	cmp	r6, r4
 8003c3c:	d105      	bne.n	8003c4a <__libc_init_array+0x2e>
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
 8003c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c44:	4798      	blx	r3
 8003c46:	3601      	adds	r6, #1
 8003c48:	e7ee      	b.n	8003c28 <__libc_init_array+0xc>
 8003c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4e:	4798      	blx	r3
 8003c50:	3601      	adds	r6, #1
 8003c52:	e7f2      	b.n	8003c3a <__libc_init_array+0x1e>
 8003c54:	08004784 	.word	0x08004784
 8003c58:	08004784 	.word	0x08004784
 8003c5c:	08004784 	.word	0x08004784
 8003c60:	08004788 	.word	0x08004788

08003c64 <__retarget_lock_init_recursive>:
 8003c64:	4770      	bx	lr

08003c66 <__retarget_lock_acquire_recursive>:
 8003c66:	4770      	bx	lr

08003c68 <__retarget_lock_release_recursive>:
 8003c68:	4770      	bx	lr
	...

08003c6c <_free_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4605      	mov	r5, r0
 8003c70:	2900      	cmp	r1, #0
 8003c72:	d040      	beq.n	8003cf6 <_free_r+0x8a>
 8003c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c78:	1f0c      	subs	r4, r1, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bfb8      	it	lt
 8003c7e:	18e4      	addlt	r4, r4, r3
 8003c80:	f000 f8de 	bl	8003e40 <__malloc_lock>
 8003c84:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf8 <_free_r+0x8c>)
 8003c86:	6813      	ldr	r3, [r2, #0]
 8003c88:	b933      	cbnz	r3, 8003c98 <_free_r+0x2c>
 8003c8a:	6063      	str	r3, [r4, #4]
 8003c8c:	6014      	str	r4, [r2, #0]
 8003c8e:	4628      	mov	r0, r5
 8003c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c94:	f000 b8da 	b.w	8003e4c <__malloc_unlock>
 8003c98:	42a3      	cmp	r3, r4
 8003c9a:	d908      	bls.n	8003cae <_free_r+0x42>
 8003c9c:	6820      	ldr	r0, [r4, #0]
 8003c9e:	1821      	adds	r1, r4, r0
 8003ca0:	428b      	cmp	r3, r1
 8003ca2:	bf01      	itttt	eq
 8003ca4:	6819      	ldreq	r1, [r3, #0]
 8003ca6:	685b      	ldreq	r3, [r3, #4]
 8003ca8:	1809      	addeq	r1, r1, r0
 8003caa:	6021      	streq	r1, [r4, #0]
 8003cac:	e7ed      	b.n	8003c8a <_free_r+0x1e>
 8003cae:	461a      	mov	r2, r3
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	b10b      	cbz	r3, 8003cb8 <_free_r+0x4c>
 8003cb4:	42a3      	cmp	r3, r4
 8003cb6:	d9fa      	bls.n	8003cae <_free_r+0x42>
 8003cb8:	6811      	ldr	r1, [r2, #0]
 8003cba:	1850      	adds	r0, r2, r1
 8003cbc:	42a0      	cmp	r0, r4
 8003cbe:	d10b      	bne.n	8003cd8 <_free_r+0x6c>
 8003cc0:	6820      	ldr	r0, [r4, #0]
 8003cc2:	4401      	add	r1, r0
 8003cc4:	1850      	adds	r0, r2, r1
 8003cc6:	4283      	cmp	r3, r0
 8003cc8:	6011      	str	r1, [r2, #0]
 8003cca:	d1e0      	bne.n	8003c8e <_free_r+0x22>
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4408      	add	r0, r1
 8003cd2:	6010      	str	r0, [r2, #0]
 8003cd4:	6053      	str	r3, [r2, #4]
 8003cd6:	e7da      	b.n	8003c8e <_free_r+0x22>
 8003cd8:	d902      	bls.n	8003ce0 <_free_r+0x74>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	602b      	str	r3, [r5, #0]
 8003cde:	e7d6      	b.n	8003c8e <_free_r+0x22>
 8003ce0:	6820      	ldr	r0, [r4, #0]
 8003ce2:	1821      	adds	r1, r4, r0
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	bf01      	itttt	eq
 8003ce8:	6819      	ldreq	r1, [r3, #0]
 8003cea:	685b      	ldreq	r3, [r3, #4]
 8003cec:	1809      	addeq	r1, r1, r0
 8003cee:	6021      	streq	r1, [r4, #0]
 8003cf0:	6063      	str	r3, [r4, #4]
 8003cf2:	6054      	str	r4, [r2, #4]
 8003cf4:	e7cb      	b.n	8003c8e <_free_r+0x22>
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	20000a74 	.word	0x20000a74

08003cfc <sbrk_aligned>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	4e0f      	ldr	r6, [pc, #60]	@ (8003d3c <sbrk_aligned+0x40>)
 8003d00:	460c      	mov	r4, r1
 8003d02:	6831      	ldr	r1, [r6, #0]
 8003d04:	4605      	mov	r5, r0
 8003d06:	b911      	cbnz	r1, 8003d0e <sbrk_aligned+0x12>
 8003d08:	f000 fca4 	bl	8004654 <_sbrk_r>
 8003d0c:	6030      	str	r0, [r6, #0]
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4628      	mov	r0, r5
 8003d12:	f000 fc9f 	bl	8004654 <_sbrk_r>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	d103      	bne.n	8003d22 <sbrk_aligned+0x26>
 8003d1a:	f04f 34ff 	mov.w	r4, #4294967295
 8003d1e:	4620      	mov	r0, r4
 8003d20:	bd70      	pop	{r4, r5, r6, pc}
 8003d22:	1cc4      	adds	r4, r0, #3
 8003d24:	f024 0403 	bic.w	r4, r4, #3
 8003d28:	42a0      	cmp	r0, r4
 8003d2a:	d0f8      	beq.n	8003d1e <sbrk_aligned+0x22>
 8003d2c:	1a21      	subs	r1, r4, r0
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f000 fc90 	bl	8004654 <_sbrk_r>
 8003d34:	3001      	adds	r0, #1
 8003d36:	d1f2      	bne.n	8003d1e <sbrk_aligned+0x22>
 8003d38:	e7ef      	b.n	8003d1a <sbrk_aligned+0x1e>
 8003d3a:	bf00      	nop
 8003d3c:	20000a70 	.word	0x20000a70

08003d40 <_malloc_r>:
 8003d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d44:	1ccd      	adds	r5, r1, #3
 8003d46:	f025 0503 	bic.w	r5, r5, #3
 8003d4a:	3508      	adds	r5, #8
 8003d4c:	2d0c      	cmp	r5, #12
 8003d4e:	bf38      	it	cc
 8003d50:	250c      	movcc	r5, #12
 8003d52:	2d00      	cmp	r5, #0
 8003d54:	4606      	mov	r6, r0
 8003d56:	db01      	blt.n	8003d5c <_malloc_r+0x1c>
 8003d58:	42a9      	cmp	r1, r5
 8003d5a:	d904      	bls.n	8003d66 <_malloc_r+0x26>
 8003d5c:	230c      	movs	r3, #12
 8003d5e:	6033      	str	r3, [r6, #0]
 8003d60:	2000      	movs	r0, #0
 8003d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e3c <_malloc_r+0xfc>
 8003d6a:	f000 f869 	bl	8003e40 <__malloc_lock>
 8003d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d72:	461c      	mov	r4, r3
 8003d74:	bb44      	cbnz	r4, 8003dc8 <_malloc_r+0x88>
 8003d76:	4629      	mov	r1, r5
 8003d78:	4630      	mov	r0, r6
 8003d7a:	f7ff ffbf 	bl	8003cfc <sbrk_aligned>
 8003d7e:	1c43      	adds	r3, r0, #1
 8003d80:	4604      	mov	r4, r0
 8003d82:	d158      	bne.n	8003e36 <_malloc_r+0xf6>
 8003d84:	f8d8 4000 	ldr.w	r4, [r8]
 8003d88:	4627      	mov	r7, r4
 8003d8a:	2f00      	cmp	r7, #0
 8003d8c:	d143      	bne.n	8003e16 <_malloc_r+0xd6>
 8003d8e:	2c00      	cmp	r4, #0
 8003d90:	d04b      	beq.n	8003e2a <_malloc_r+0xea>
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	4639      	mov	r1, r7
 8003d96:	4630      	mov	r0, r6
 8003d98:	eb04 0903 	add.w	r9, r4, r3
 8003d9c:	f000 fc5a 	bl	8004654 <_sbrk_r>
 8003da0:	4581      	cmp	r9, r0
 8003da2:	d142      	bne.n	8003e2a <_malloc_r+0xea>
 8003da4:	6821      	ldr	r1, [r4, #0]
 8003da6:	4630      	mov	r0, r6
 8003da8:	1a6d      	subs	r5, r5, r1
 8003daa:	4629      	mov	r1, r5
 8003dac:	f7ff ffa6 	bl	8003cfc <sbrk_aligned>
 8003db0:	3001      	adds	r0, #1
 8003db2:	d03a      	beq.n	8003e2a <_malloc_r+0xea>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	442b      	add	r3, r5
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	f8d8 3000 	ldr.w	r3, [r8]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	bb62      	cbnz	r2, 8003e1c <_malloc_r+0xdc>
 8003dc2:	f8c8 7000 	str.w	r7, [r8]
 8003dc6:	e00f      	b.n	8003de8 <_malloc_r+0xa8>
 8003dc8:	6822      	ldr	r2, [r4, #0]
 8003dca:	1b52      	subs	r2, r2, r5
 8003dcc:	d420      	bmi.n	8003e10 <_malloc_r+0xd0>
 8003dce:	2a0b      	cmp	r2, #11
 8003dd0:	d917      	bls.n	8003e02 <_malloc_r+0xc2>
 8003dd2:	1961      	adds	r1, r4, r5
 8003dd4:	42a3      	cmp	r3, r4
 8003dd6:	6025      	str	r5, [r4, #0]
 8003dd8:	bf18      	it	ne
 8003dda:	6059      	strne	r1, [r3, #4]
 8003ddc:	6863      	ldr	r3, [r4, #4]
 8003dde:	bf08      	it	eq
 8003de0:	f8c8 1000 	streq.w	r1, [r8]
 8003de4:	5162      	str	r2, [r4, r5]
 8003de6:	604b      	str	r3, [r1, #4]
 8003de8:	4630      	mov	r0, r6
 8003dea:	f000 f82f 	bl	8003e4c <__malloc_unlock>
 8003dee:	f104 000b 	add.w	r0, r4, #11
 8003df2:	1d23      	adds	r3, r4, #4
 8003df4:	f020 0007 	bic.w	r0, r0, #7
 8003df8:	1ac2      	subs	r2, r0, r3
 8003dfa:	bf1c      	itt	ne
 8003dfc:	1a1b      	subne	r3, r3, r0
 8003dfe:	50a3      	strne	r3, [r4, r2]
 8003e00:	e7af      	b.n	8003d62 <_malloc_r+0x22>
 8003e02:	6862      	ldr	r2, [r4, #4]
 8003e04:	42a3      	cmp	r3, r4
 8003e06:	bf0c      	ite	eq
 8003e08:	f8c8 2000 	streq.w	r2, [r8]
 8003e0c:	605a      	strne	r2, [r3, #4]
 8003e0e:	e7eb      	b.n	8003de8 <_malloc_r+0xa8>
 8003e10:	4623      	mov	r3, r4
 8003e12:	6864      	ldr	r4, [r4, #4]
 8003e14:	e7ae      	b.n	8003d74 <_malloc_r+0x34>
 8003e16:	463c      	mov	r4, r7
 8003e18:	687f      	ldr	r7, [r7, #4]
 8003e1a:	e7b6      	b.n	8003d8a <_malloc_r+0x4a>
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	d1fb      	bne.n	8003e1c <_malloc_r+0xdc>
 8003e24:	2300      	movs	r3, #0
 8003e26:	6053      	str	r3, [r2, #4]
 8003e28:	e7de      	b.n	8003de8 <_malloc_r+0xa8>
 8003e2a:	230c      	movs	r3, #12
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	6033      	str	r3, [r6, #0]
 8003e30:	f000 f80c 	bl	8003e4c <__malloc_unlock>
 8003e34:	e794      	b.n	8003d60 <_malloc_r+0x20>
 8003e36:	6005      	str	r5, [r0, #0]
 8003e38:	e7d6      	b.n	8003de8 <_malloc_r+0xa8>
 8003e3a:	bf00      	nop
 8003e3c:	20000a74 	.word	0x20000a74

08003e40 <__malloc_lock>:
 8003e40:	4801      	ldr	r0, [pc, #4]	@ (8003e48 <__malloc_lock+0x8>)
 8003e42:	f7ff bf10 	b.w	8003c66 <__retarget_lock_acquire_recursive>
 8003e46:	bf00      	nop
 8003e48:	20000a6c 	.word	0x20000a6c

08003e4c <__malloc_unlock>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	@ (8003e54 <__malloc_unlock+0x8>)
 8003e4e:	f7ff bf0b 	b.w	8003c68 <__retarget_lock_release_recursive>
 8003e52:	bf00      	nop
 8003e54:	20000a6c 	.word	0x20000a6c

08003e58 <__sfputc_r>:
 8003e58:	6893      	ldr	r3, [r2, #8]
 8003e5a:	b410      	push	{r4}
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	6093      	str	r3, [r2, #8]
 8003e62:	da07      	bge.n	8003e74 <__sfputc_r+0x1c>
 8003e64:	6994      	ldr	r4, [r2, #24]
 8003e66:	42a3      	cmp	r3, r4
 8003e68:	db01      	blt.n	8003e6e <__sfputc_r+0x16>
 8003e6a:	290a      	cmp	r1, #10
 8003e6c:	d102      	bne.n	8003e74 <__sfputc_r+0x1c>
 8003e6e:	bc10      	pop	{r4}
 8003e70:	f7ff bdeb 	b.w	8003a4a <__swbuf_r>
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	1c58      	adds	r0, r3, #1
 8003e78:	6010      	str	r0, [r2, #0]
 8003e7a:	7019      	strb	r1, [r3, #0]
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	bc10      	pop	{r4}
 8003e80:	4770      	bx	lr

08003e82 <__sfputs_r>:
 8003e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e84:	4606      	mov	r6, r0
 8003e86:	460f      	mov	r7, r1
 8003e88:	4614      	mov	r4, r2
 8003e8a:	18d5      	adds	r5, r2, r3
 8003e8c:	42ac      	cmp	r4, r5
 8003e8e:	d101      	bne.n	8003e94 <__sfputs_r+0x12>
 8003e90:	2000      	movs	r0, #0
 8003e92:	e007      	b.n	8003ea4 <__sfputs_r+0x22>
 8003e94:	463a      	mov	r2, r7
 8003e96:	4630      	mov	r0, r6
 8003e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e9c:	f7ff ffdc 	bl	8003e58 <__sfputc_r>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d1f3      	bne.n	8003e8c <__sfputs_r+0xa>
 8003ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ea8 <_vfiprintf_r>:
 8003ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eac:	460d      	mov	r5, r1
 8003eae:	4614      	mov	r4, r2
 8003eb0:	4698      	mov	r8, r3
 8003eb2:	4606      	mov	r6, r0
 8003eb4:	b09d      	sub	sp, #116	@ 0x74
 8003eb6:	b118      	cbz	r0, 8003ec0 <_vfiprintf_r+0x18>
 8003eb8:	6a03      	ldr	r3, [r0, #32]
 8003eba:	b90b      	cbnz	r3, 8003ec0 <_vfiprintf_r+0x18>
 8003ebc:	f7ff fcdc 	bl	8003878 <__sinit>
 8003ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ec2:	07d9      	lsls	r1, r3, #31
 8003ec4:	d405      	bmi.n	8003ed2 <_vfiprintf_r+0x2a>
 8003ec6:	89ab      	ldrh	r3, [r5, #12]
 8003ec8:	059a      	lsls	r2, r3, #22
 8003eca:	d402      	bmi.n	8003ed2 <_vfiprintf_r+0x2a>
 8003ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ece:	f7ff feca 	bl	8003c66 <__retarget_lock_acquire_recursive>
 8003ed2:	89ab      	ldrh	r3, [r5, #12]
 8003ed4:	071b      	lsls	r3, r3, #28
 8003ed6:	d501      	bpl.n	8003edc <_vfiprintf_r+0x34>
 8003ed8:	692b      	ldr	r3, [r5, #16]
 8003eda:	b99b      	cbnz	r3, 8003f04 <_vfiprintf_r+0x5c>
 8003edc:	4629      	mov	r1, r5
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f7ff fdf2 	bl	8003ac8 <__swsetup_r>
 8003ee4:	b170      	cbz	r0, 8003f04 <_vfiprintf_r+0x5c>
 8003ee6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ee8:	07dc      	lsls	r4, r3, #31
 8003eea:	d504      	bpl.n	8003ef6 <_vfiprintf_r+0x4e>
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	b01d      	add	sp, #116	@ 0x74
 8003ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef6:	89ab      	ldrh	r3, [r5, #12]
 8003ef8:	0598      	lsls	r0, r3, #22
 8003efa:	d4f7      	bmi.n	8003eec <_vfiprintf_r+0x44>
 8003efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003efe:	f7ff feb3 	bl	8003c68 <__retarget_lock_release_recursive>
 8003f02:	e7f3      	b.n	8003eec <_vfiprintf_r+0x44>
 8003f04:	2300      	movs	r3, #0
 8003f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f08:	2320      	movs	r3, #32
 8003f0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f0e:	2330      	movs	r3, #48	@ 0x30
 8003f10:	f04f 0901 	mov.w	r9, #1
 8003f14:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f18:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80040c4 <_vfiprintf_r+0x21c>
 8003f1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f20:	4623      	mov	r3, r4
 8003f22:	469a      	mov	sl, r3
 8003f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f28:	b10a      	cbz	r2, 8003f2e <_vfiprintf_r+0x86>
 8003f2a:	2a25      	cmp	r2, #37	@ 0x25
 8003f2c:	d1f9      	bne.n	8003f22 <_vfiprintf_r+0x7a>
 8003f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f32:	d00b      	beq.n	8003f4c <_vfiprintf_r+0xa4>
 8003f34:	465b      	mov	r3, fp
 8003f36:	4622      	mov	r2, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7ff ffa1 	bl	8003e82 <__sfputs_r>
 8003f40:	3001      	adds	r0, #1
 8003f42:	f000 80a7 	beq.w	8004094 <_vfiprintf_r+0x1ec>
 8003f46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f48:	445a      	add	r2, fp
 8003f4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 809f 	beq.w	8004094 <_vfiprintf_r+0x1ec>
 8003f56:	2300      	movs	r3, #0
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f60:	f10a 0a01 	add.w	sl, sl, #1
 8003f64:	9304      	str	r3, [sp, #16]
 8003f66:	9307      	str	r3, [sp, #28]
 8003f68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f6e:	4654      	mov	r4, sl
 8003f70:	2205      	movs	r2, #5
 8003f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f76:	4853      	ldr	r0, [pc, #332]	@ (80040c4 <_vfiprintf_r+0x21c>)
 8003f78:	f000 fb7c 	bl	8004674 <memchr>
 8003f7c:	9a04      	ldr	r2, [sp, #16]
 8003f7e:	b9d8      	cbnz	r0, 8003fb8 <_vfiprintf_r+0x110>
 8003f80:	06d1      	lsls	r1, r2, #27
 8003f82:	bf44      	itt	mi
 8003f84:	2320      	movmi	r3, #32
 8003f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f8a:	0713      	lsls	r3, r2, #28
 8003f8c:	bf44      	itt	mi
 8003f8e:	232b      	movmi	r3, #43	@ 0x2b
 8003f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f94:	f89a 3000 	ldrb.w	r3, [sl]
 8003f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f9a:	d015      	beq.n	8003fc8 <_vfiprintf_r+0x120>
 8003f9c:	4654      	mov	r4, sl
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	f04f 0c0a 	mov.w	ip, #10
 8003fa4:	9a07      	ldr	r2, [sp, #28]
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fac:	3b30      	subs	r3, #48	@ 0x30
 8003fae:	2b09      	cmp	r3, #9
 8003fb0:	d94b      	bls.n	800404a <_vfiprintf_r+0x1a2>
 8003fb2:	b1b0      	cbz	r0, 8003fe2 <_vfiprintf_r+0x13a>
 8003fb4:	9207      	str	r2, [sp, #28]
 8003fb6:	e014      	b.n	8003fe2 <_vfiprintf_r+0x13a>
 8003fb8:	eba0 0308 	sub.w	r3, r0, r8
 8003fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	46a2      	mov	sl, r4
 8003fc4:	9304      	str	r3, [sp, #16]
 8003fc6:	e7d2      	b.n	8003f6e <_vfiprintf_r+0xc6>
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	1d19      	adds	r1, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	9103      	str	r1, [sp, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bfbb      	ittet	lt
 8003fd4:	425b      	neglt	r3, r3
 8003fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8003fda:	9307      	strge	r3, [sp, #28]
 8003fdc:	9307      	strlt	r3, [sp, #28]
 8003fde:	bfb8      	it	lt
 8003fe0:	9204      	strlt	r2, [sp, #16]
 8003fe2:	7823      	ldrb	r3, [r4, #0]
 8003fe4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fe6:	d10a      	bne.n	8003ffe <_vfiprintf_r+0x156>
 8003fe8:	7863      	ldrb	r3, [r4, #1]
 8003fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fec:	d132      	bne.n	8004054 <_vfiprintf_r+0x1ac>
 8003fee:	9b03      	ldr	r3, [sp, #12]
 8003ff0:	3402      	adds	r4, #2
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	9203      	str	r2, [sp, #12]
 8003ff8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ffc:	9305      	str	r3, [sp, #20]
 8003ffe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80040c8 <_vfiprintf_r+0x220>
 8004002:	2203      	movs	r2, #3
 8004004:	4650      	mov	r0, sl
 8004006:	7821      	ldrb	r1, [r4, #0]
 8004008:	f000 fb34 	bl	8004674 <memchr>
 800400c:	b138      	cbz	r0, 800401e <_vfiprintf_r+0x176>
 800400e:	2240      	movs	r2, #64	@ 0x40
 8004010:	9b04      	ldr	r3, [sp, #16]
 8004012:	eba0 000a 	sub.w	r0, r0, sl
 8004016:	4082      	lsls	r2, r0
 8004018:	4313      	orrs	r3, r2
 800401a:	3401      	adds	r4, #1
 800401c:	9304      	str	r3, [sp, #16]
 800401e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004022:	2206      	movs	r2, #6
 8004024:	4829      	ldr	r0, [pc, #164]	@ (80040cc <_vfiprintf_r+0x224>)
 8004026:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800402a:	f000 fb23 	bl	8004674 <memchr>
 800402e:	2800      	cmp	r0, #0
 8004030:	d03f      	beq.n	80040b2 <_vfiprintf_r+0x20a>
 8004032:	4b27      	ldr	r3, [pc, #156]	@ (80040d0 <_vfiprintf_r+0x228>)
 8004034:	bb1b      	cbnz	r3, 800407e <_vfiprintf_r+0x1d6>
 8004036:	9b03      	ldr	r3, [sp, #12]
 8004038:	3307      	adds	r3, #7
 800403a:	f023 0307 	bic.w	r3, r3, #7
 800403e:	3308      	adds	r3, #8
 8004040:	9303      	str	r3, [sp, #12]
 8004042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004044:	443b      	add	r3, r7
 8004046:	9309      	str	r3, [sp, #36]	@ 0x24
 8004048:	e76a      	b.n	8003f20 <_vfiprintf_r+0x78>
 800404a:	460c      	mov	r4, r1
 800404c:	2001      	movs	r0, #1
 800404e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004052:	e7a8      	b.n	8003fa6 <_vfiprintf_r+0xfe>
 8004054:	2300      	movs	r3, #0
 8004056:	f04f 0c0a 	mov.w	ip, #10
 800405a:	4619      	mov	r1, r3
 800405c:	3401      	adds	r4, #1
 800405e:	9305      	str	r3, [sp, #20]
 8004060:	4620      	mov	r0, r4
 8004062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004066:	3a30      	subs	r2, #48	@ 0x30
 8004068:	2a09      	cmp	r2, #9
 800406a:	d903      	bls.n	8004074 <_vfiprintf_r+0x1cc>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0c6      	beq.n	8003ffe <_vfiprintf_r+0x156>
 8004070:	9105      	str	r1, [sp, #20]
 8004072:	e7c4      	b.n	8003ffe <_vfiprintf_r+0x156>
 8004074:	4604      	mov	r4, r0
 8004076:	2301      	movs	r3, #1
 8004078:	fb0c 2101 	mla	r1, ip, r1, r2
 800407c:	e7f0      	b.n	8004060 <_vfiprintf_r+0x1b8>
 800407e:	ab03      	add	r3, sp, #12
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	462a      	mov	r2, r5
 8004084:	4630      	mov	r0, r6
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <_vfiprintf_r+0x22c>)
 8004088:	a904      	add	r1, sp, #16
 800408a:	f3af 8000 	nop.w
 800408e:	4607      	mov	r7, r0
 8004090:	1c78      	adds	r0, r7, #1
 8004092:	d1d6      	bne.n	8004042 <_vfiprintf_r+0x19a>
 8004094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004096:	07d9      	lsls	r1, r3, #31
 8004098:	d405      	bmi.n	80040a6 <_vfiprintf_r+0x1fe>
 800409a:	89ab      	ldrh	r3, [r5, #12]
 800409c:	059a      	lsls	r2, r3, #22
 800409e:	d402      	bmi.n	80040a6 <_vfiprintf_r+0x1fe>
 80040a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040a2:	f7ff fde1 	bl	8003c68 <__retarget_lock_release_recursive>
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	065b      	lsls	r3, r3, #25
 80040aa:	f53f af1f 	bmi.w	8003eec <_vfiprintf_r+0x44>
 80040ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040b0:	e71e      	b.n	8003ef0 <_vfiprintf_r+0x48>
 80040b2:	ab03      	add	r3, sp, #12
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	462a      	mov	r2, r5
 80040b8:	4630      	mov	r0, r6
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <_vfiprintf_r+0x22c>)
 80040bc:	a904      	add	r1, sp, #16
 80040be:	f000 f87d 	bl	80041bc <_printf_i>
 80040c2:	e7e4      	b.n	800408e <_vfiprintf_r+0x1e6>
 80040c4:	0800474e 	.word	0x0800474e
 80040c8:	08004754 	.word	0x08004754
 80040cc:	08004758 	.word	0x08004758
 80040d0:	00000000 	.word	0x00000000
 80040d4:	08003e83 	.word	0x08003e83

080040d8 <_printf_common>:
 80040d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040dc:	4616      	mov	r6, r2
 80040de:	4698      	mov	r8, r3
 80040e0:	688a      	ldr	r2, [r1, #8]
 80040e2:	690b      	ldr	r3, [r1, #16]
 80040e4:	4607      	mov	r7, r0
 80040e6:	4293      	cmp	r3, r2
 80040e8:	bfb8      	it	lt
 80040ea:	4613      	movlt	r3, r2
 80040ec:	6033      	str	r3, [r6, #0]
 80040ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040f2:	460c      	mov	r4, r1
 80040f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040f8:	b10a      	cbz	r2, 80040fe <_printf_common+0x26>
 80040fa:	3301      	adds	r3, #1
 80040fc:	6033      	str	r3, [r6, #0]
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	0699      	lsls	r1, r3, #26
 8004102:	bf42      	ittt	mi
 8004104:	6833      	ldrmi	r3, [r6, #0]
 8004106:	3302      	addmi	r3, #2
 8004108:	6033      	strmi	r3, [r6, #0]
 800410a:	6825      	ldr	r5, [r4, #0]
 800410c:	f015 0506 	ands.w	r5, r5, #6
 8004110:	d106      	bne.n	8004120 <_printf_common+0x48>
 8004112:	f104 0a19 	add.w	sl, r4, #25
 8004116:	68e3      	ldr	r3, [r4, #12]
 8004118:	6832      	ldr	r2, [r6, #0]
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	42ab      	cmp	r3, r5
 800411e:	dc2b      	bgt.n	8004178 <_printf_common+0xa0>
 8004120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004124:	6822      	ldr	r2, [r4, #0]
 8004126:	3b00      	subs	r3, #0
 8004128:	bf18      	it	ne
 800412a:	2301      	movne	r3, #1
 800412c:	0692      	lsls	r2, r2, #26
 800412e:	d430      	bmi.n	8004192 <_printf_common+0xba>
 8004130:	4641      	mov	r1, r8
 8004132:	4638      	mov	r0, r7
 8004134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004138:	47c8      	blx	r9
 800413a:	3001      	adds	r0, #1
 800413c:	d023      	beq.n	8004186 <_printf_common+0xae>
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	6922      	ldr	r2, [r4, #16]
 8004142:	f003 0306 	and.w	r3, r3, #6
 8004146:	2b04      	cmp	r3, #4
 8004148:	bf14      	ite	ne
 800414a:	2500      	movne	r5, #0
 800414c:	6833      	ldreq	r3, [r6, #0]
 800414e:	f04f 0600 	mov.w	r6, #0
 8004152:	bf08      	it	eq
 8004154:	68e5      	ldreq	r5, [r4, #12]
 8004156:	f104 041a 	add.w	r4, r4, #26
 800415a:	bf08      	it	eq
 800415c:	1aed      	subeq	r5, r5, r3
 800415e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004162:	bf08      	it	eq
 8004164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004168:	4293      	cmp	r3, r2
 800416a:	bfc4      	itt	gt
 800416c:	1a9b      	subgt	r3, r3, r2
 800416e:	18ed      	addgt	r5, r5, r3
 8004170:	42b5      	cmp	r5, r6
 8004172:	d11a      	bne.n	80041aa <_printf_common+0xd2>
 8004174:	2000      	movs	r0, #0
 8004176:	e008      	b.n	800418a <_printf_common+0xb2>
 8004178:	2301      	movs	r3, #1
 800417a:	4652      	mov	r2, sl
 800417c:	4641      	mov	r1, r8
 800417e:	4638      	mov	r0, r7
 8004180:	47c8      	blx	r9
 8004182:	3001      	adds	r0, #1
 8004184:	d103      	bne.n	800418e <_printf_common+0xb6>
 8004186:	f04f 30ff 	mov.w	r0, #4294967295
 800418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418e:	3501      	adds	r5, #1
 8004190:	e7c1      	b.n	8004116 <_printf_common+0x3e>
 8004192:	2030      	movs	r0, #48	@ 0x30
 8004194:	18e1      	adds	r1, r4, r3
 8004196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041a0:	4422      	add	r2, r4
 80041a2:	3302      	adds	r3, #2
 80041a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041a8:	e7c2      	b.n	8004130 <_printf_common+0x58>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4622      	mov	r2, r4
 80041ae:	4641      	mov	r1, r8
 80041b0:	4638      	mov	r0, r7
 80041b2:	47c8      	blx	r9
 80041b4:	3001      	adds	r0, #1
 80041b6:	d0e6      	beq.n	8004186 <_printf_common+0xae>
 80041b8:	3601      	adds	r6, #1
 80041ba:	e7d9      	b.n	8004170 <_printf_common+0x98>

080041bc <_printf_i>:
 80041bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	7e0f      	ldrb	r7, [r1, #24]
 80041c2:	4691      	mov	r9, r2
 80041c4:	2f78      	cmp	r7, #120	@ 0x78
 80041c6:	4680      	mov	r8, r0
 80041c8:	460c      	mov	r4, r1
 80041ca:	469a      	mov	sl, r3
 80041cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041d2:	d807      	bhi.n	80041e4 <_printf_i+0x28>
 80041d4:	2f62      	cmp	r7, #98	@ 0x62
 80041d6:	d80a      	bhi.n	80041ee <_printf_i+0x32>
 80041d8:	2f00      	cmp	r7, #0
 80041da:	f000 80d3 	beq.w	8004384 <_printf_i+0x1c8>
 80041de:	2f58      	cmp	r7, #88	@ 0x58
 80041e0:	f000 80ba 	beq.w	8004358 <_printf_i+0x19c>
 80041e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041ec:	e03a      	b.n	8004264 <_printf_i+0xa8>
 80041ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041f2:	2b15      	cmp	r3, #21
 80041f4:	d8f6      	bhi.n	80041e4 <_printf_i+0x28>
 80041f6:	a101      	add	r1, pc, #4	@ (adr r1, 80041fc <_printf_i+0x40>)
 80041f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041fc:	08004255 	.word	0x08004255
 8004200:	08004269 	.word	0x08004269
 8004204:	080041e5 	.word	0x080041e5
 8004208:	080041e5 	.word	0x080041e5
 800420c:	080041e5 	.word	0x080041e5
 8004210:	080041e5 	.word	0x080041e5
 8004214:	08004269 	.word	0x08004269
 8004218:	080041e5 	.word	0x080041e5
 800421c:	080041e5 	.word	0x080041e5
 8004220:	080041e5 	.word	0x080041e5
 8004224:	080041e5 	.word	0x080041e5
 8004228:	0800436b 	.word	0x0800436b
 800422c:	08004293 	.word	0x08004293
 8004230:	08004325 	.word	0x08004325
 8004234:	080041e5 	.word	0x080041e5
 8004238:	080041e5 	.word	0x080041e5
 800423c:	0800438d 	.word	0x0800438d
 8004240:	080041e5 	.word	0x080041e5
 8004244:	08004293 	.word	0x08004293
 8004248:	080041e5 	.word	0x080041e5
 800424c:	080041e5 	.word	0x080041e5
 8004250:	0800432d 	.word	0x0800432d
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6032      	str	r2, [r6, #0]
 800425c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004264:	2301      	movs	r3, #1
 8004266:	e09e      	b.n	80043a6 <_printf_i+0x1ea>
 8004268:	6833      	ldr	r3, [r6, #0]
 800426a:	6820      	ldr	r0, [r4, #0]
 800426c:	1d19      	adds	r1, r3, #4
 800426e:	6031      	str	r1, [r6, #0]
 8004270:	0606      	lsls	r6, r0, #24
 8004272:	d501      	bpl.n	8004278 <_printf_i+0xbc>
 8004274:	681d      	ldr	r5, [r3, #0]
 8004276:	e003      	b.n	8004280 <_printf_i+0xc4>
 8004278:	0645      	lsls	r5, r0, #25
 800427a:	d5fb      	bpl.n	8004274 <_printf_i+0xb8>
 800427c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004280:	2d00      	cmp	r5, #0
 8004282:	da03      	bge.n	800428c <_printf_i+0xd0>
 8004284:	232d      	movs	r3, #45	@ 0x2d
 8004286:	426d      	negs	r5, r5
 8004288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800428c:	230a      	movs	r3, #10
 800428e:	4859      	ldr	r0, [pc, #356]	@ (80043f4 <_printf_i+0x238>)
 8004290:	e011      	b.n	80042b6 <_printf_i+0xfa>
 8004292:	6821      	ldr	r1, [r4, #0]
 8004294:	6833      	ldr	r3, [r6, #0]
 8004296:	0608      	lsls	r0, r1, #24
 8004298:	f853 5b04 	ldr.w	r5, [r3], #4
 800429c:	d402      	bmi.n	80042a4 <_printf_i+0xe8>
 800429e:	0649      	lsls	r1, r1, #25
 80042a0:	bf48      	it	mi
 80042a2:	b2ad      	uxthmi	r5, r5
 80042a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80042a6:	6033      	str	r3, [r6, #0]
 80042a8:	bf14      	ite	ne
 80042aa:	230a      	movne	r3, #10
 80042ac:	2308      	moveq	r3, #8
 80042ae:	4851      	ldr	r0, [pc, #324]	@ (80043f4 <_printf_i+0x238>)
 80042b0:	2100      	movs	r1, #0
 80042b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042b6:	6866      	ldr	r6, [r4, #4]
 80042b8:	2e00      	cmp	r6, #0
 80042ba:	bfa8      	it	ge
 80042bc:	6821      	ldrge	r1, [r4, #0]
 80042be:	60a6      	str	r6, [r4, #8]
 80042c0:	bfa4      	itt	ge
 80042c2:	f021 0104 	bicge.w	r1, r1, #4
 80042c6:	6021      	strge	r1, [r4, #0]
 80042c8:	b90d      	cbnz	r5, 80042ce <_printf_i+0x112>
 80042ca:	2e00      	cmp	r6, #0
 80042cc:	d04b      	beq.n	8004366 <_printf_i+0x1aa>
 80042ce:	4616      	mov	r6, r2
 80042d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80042d4:	fb03 5711 	mls	r7, r3, r1, r5
 80042d8:	5dc7      	ldrb	r7, [r0, r7]
 80042da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042de:	462f      	mov	r7, r5
 80042e0:	42bb      	cmp	r3, r7
 80042e2:	460d      	mov	r5, r1
 80042e4:	d9f4      	bls.n	80042d0 <_printf_i+0x114>
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d10b      	bne.n	8004302 <_printf_i+0x146>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	07df      	lsls	r7, r3, #31
 80042ee:	d508      	bpl.n	8004302 <_printf_i+0x146>
 80042f0:	6923      	ldr	r3, [r4, #16]
 80042f2:	6861      	ldr	r1, [r4, #4]
 80042f4:	4299      	cmp	r1, r3
 80042f6:	bfde      	ittt	le
 80042f8:	2330      	movle	r3, #48	@ 0x30
 80042fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004302:	1b92      	subs	r2, r2, r6
 8004304:	6122      	str	r2, [r4, #16]
 8004306:	464b      	mov	r3, r9
 8004308:	4621      	mov	r1, r4
 800430a:	4640      	mov	r0, r8
 800430c:	f8cd a000 	str.w	sl, [sp]
 8004310:	aa03      	add	r2, sp, #12
 8004312:	f7ff fee1 	bl	80040d8 <_printf_common>
 8004316:	3001      	adds	r0, #1
 8004318:	d14a      	bne.n	80043b0 <_printf_i+0x1f4>
 800431a:	f04f 30ff 	mov.w	r0, #4294967295
 800431e:	b004      	add	sp, #16
 8004320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	f043 0320 	orr.w	r3, r3, #32
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	2778      	movs	r7, #120	@ 0x78
 800432e:	4832      	ldr	r0, [pc, #200]	@ (80043f8 <_printf_i+0x23c>)
 8004330:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	6831      	ldr	r1, [r6, #0]
 8004338:	061f      	lsls	r7, r3, #24
 800433a:	f851 5b04 	ldr.w	r5, [r1], #4
 800433e:	d402      	bmi.n	8004346 <_printf_i+0x18a>
 8004340:	065f      	lsls	r7, r3, #25
 8004342:	bf48      	it	mi
 8004344:	b2ad      	uxthmi	r5, r5
 8004346:	6031      	str	r1, [r6, #0]
 8004348:	07d9      	lsls	r1, r3, #31
 800434a:	bf44      	itt	mi
 800434c:	f043 0320 	orrmi.w	r3, r3, #32
 8004350:	6023      	strmi	r3, [r4, #0]
 8004352:	b11d      	cbz	r5, 800435c <_printf_i+0x1a0>
 8004354:	2310      	movs	r3, #16
 8004356:	e7ab      	b.n	80042b0 <_printf_i+0xf4>
 8004358:	4826      	ldr	r0, [pc, #152]	@ (80043f4 <_printf_i+0x238>)
 800435a:	e7e9      	b.n	8004330 <_printf_i+0x174>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	f023 0320 	bic.w	r3, r3, #32
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	e7f6      	b.n	8004354 <_printf_i+0x198>
 8004366:	4616      	mov	r6, r2
 8004368:	e7bd      	b.n	80042e6 <_printf_i+0x12a>
 800436a:	6833      	ldr	r3, [r6, #0]
 800436c:	6825      	ldr	r5, [r4, #0]
 800436e:	1d18      	adds	r0, r3, #4
 8004370:	6961      	ldr	r1, [r4, #20]
 8004372:	6030      	str	r0, [r6, #0]
 8004374:	062e      	lsls	r6, r5, #24
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	d501      	bpl.n	800437e <_printf_i+0x1c2>
 800437a:	6019      	str	r1, [r3, #0]
 800437c:	e002      	b.n	8004384 <_printf_i+0x1c8>
 800437e:	0668      	lsls	r0, r5, #25
 8004380:	d5fb      	bpl.n	800437a <_printf_i+0x1be>
 8004382:	8019      	strh	r1, [r3, #0]
 8004384:	2300      	movs	r3, #0
 8004386:	4616      	mov	r6, r2
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	e7bc      	b.n	8004306 <_printf_i+0x14a>
 800438c:	6833      	ldr	r3, [r6, #0]
 800438e:	2100      	movs	r1, #0
 8004390:	1d1a      	adds	r2, r3, #4
 8004392:	6032      	str	r2, [r6, #0]
 8004394:	681e      	ldr	r6, [r3, #0]
 8004396:	6862      	ldr	r2, [r4, #4]
 8004398:	4630      	mov	r0, r6
 800439a:	f000 f96b 	bl	8004674 <memchr>
 800439e:	b108      	cbz	r0, 80043a4 <_printf_i+0x1e8>
 80043a0:	1b80      	subs	r0, r0, r6
 80043a2:	6060      	str	r0, [r4, #4]
 80043a4:	6863      	ldr	r3, [r4, #4]
 80043a6:	6123      	str	r3, [r4, #16]
 80043a8:	2300      	movs	r3, #0
 80043aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043ae:	e7aa      	b.n	8004306 <_printf_i+0x14a>
 80043b0:	4632      	mov	r2, r6
 80043b2:	4649      	mov	r1, r9
 80043b4:	4640      	mov	r0, r8
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	47d0      	blx	sl
 80043ba:	3001      	adds	r0, #1
 80043bc:	d0ad      	beq.n	800431a <_printf_i+0x15e>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	079b      	lsls	r3, r3, #30
 80043c2:	d413      	bmi.n	80043ec <_printf_i+0x230>
 80043c4:	68e0      	ldr	r0, [r4, #12]
 80043c6:	9b03      	ldr	r3, [sp, #12]
 80043c8:	4298      	cmp	r0, r3
 80043ca:	bfb8      	it	lt
 80043cc:	4618      	movlt	r0, r3
 80043ce:	e7a6      	b.n	800431e <_printf_i+0x162>
 80043d0:	2301      	movs	r3, #1
 80043d2:	4632      	mov	r2, r6
 80043d4:	4649      	mov	r1, r9
 80043d6:	4640      	mov	r0, r8
 80043d8:	47d0      	blx	sl
 80043da:	3001      	adds	r0, #1
 80043dc:	d09d      	beq.n	800431a <_printf_i+0x15e>
 80043de:	3501      	adds	r5, #1
 80043e0:	68e3      	ldr	r3, [r4, #12]
 80043e2:	9903      	ldr	r1, [sp, #12]
 80043e4:	1a5b      	subs	r3, r3, r1
 80043e6:	42ab      	cmp	r3, r5
 80043e8:	dcf2      	bgt.n	80043d0 <_printf_i+0x214>
 80043ea:	e7eb      	b.n	80043c4 <_printf_i+0x208>
 80043ec:	2500      	movs	r5, #0
 80043ee:	f104 0619 	add.w	r6, r4, #25
 80043f2:	e7f5      	b.n	80043e0 <_printf_i+0x224>
 80043f4:	0800475f 	.word	0x0800475f
 80043f8:	08004770 	.word	0x08004770

080043fc <__sflush_r>:
 80043fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	0716      	lsls	r6, r2, #28
 8004404:	4605      	mov	r5, r0
 8004406:	460c      	mov	r4, r1
 8004408:	d454      	bmi.n	80044b4 <__sflush_r+0xb8>
 800440a:	684b      	ldr	r3, [r1, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	dc02      	bgt.n	8004416 <__sflush_r+0x1a>
 8004410:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	dd48      	ble.n	80044a8 <__sflush_r+0xac>
 8004416:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004418:	2e00      	cmp	r6, #0
 800441a:	d045      	beq.n	80044a8 <__sflush_r+0xac>
 800441c:	2300      	movs	r3, #0
 800441e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004422:	682f      	ldr	r7, [r5, #0]
 8004424:	6a21      	ldr	r1, [r4, #32]
 8004426:	602b      	str	r3, [r5, #0]
 8004428:	d030      	beq.n	800448c <__sflush_r+0x90>
 800442a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800442c:	89a3      	ldrh	r3, [r4, #12]
 800442e:	0759      	lsls	r1, r3, #29
 8004430:	d505      	bpl.n	800443e <__sflush_r+0x42>
 8004432:	6863      	ldr	r3, [r4, #4]
 8004434:	1ad2      	subs	r2, r2, r3
 8004436:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004438:	b10b      	cbz	r3, 800443e <__sflush_r+0x42>
 800443a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800443c:	1ad2      	subs	r2, r2, r3
 800443e:	2300      	movs	r3, #0
 8004440:	4628      	mov	r0, r5
 8004442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004444:	6a21      	ldr	r1, [r4, #32]
 8004446:	47b0      	blx	r6
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	d106      	bne.n	800445c <__sflush_r+0x60>
 800444e:	6829      	ldr	r1, [r5, #0]
 8004450:	291d      	cmp	r1, #29
 8004452:	d82b      	bhi.n	80044ac <__sflush_r+0xb0>
 8004454:	4a28      	ldr	r2, [pc, #160]	@ (80044f8 <__sflush_r+0xfc>)
 8004456:	410a      	asrs	r2, r1
 8004458:	07d6      	lsls	r6, r2, #31
 800445a:	d427      	bmi.n	80044ac <__sflush_r+0xb0>
 800445c:	2200      	movs	r2, #0
 800445e:	6062      	str	r2, [r4, #4]
 8004460:	6922      	ldr	r2, [r4, #16]
 8004462:	04d9      	lsls	r1, r3, #19
 8004464:	6022      	str	r2, [r4, #0]
 8004466:	d504      	bpl.n	8004472 <__sflush_r+0x76>
 8004468:	1c42      	adds	r2, r0, #1
 800446a:	d101      	bne.n	8004470 <__sflush_r+0x74>
 800446c:	682b      	ldr	r3, [r5, #0]
 800446e:	b903      	cbnz	r3, 8004472 <__sflush_r+0x76>
 8004470:	6560      	str	r0, [r4, #84]	@ 0x54
 8004472:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004474:	602f      	str	r7, [r5, #0]
 8004476:	b1b9      	cbz	r1, 80044a8 <__sflush_r+0xac>
 8004478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800447c:	4299      	cmp	r1, r3
 800447e:	d002      	beq.n	8004486 <__sflush_r+0x8a>
 8004480:	4628      	mov	r0, r5
 8004482:	f7ff fbf3 	bl	8003c6c <_free_r>
 8004486:	2300      	movs	r3, #0
 8004488:	6363      	str	r3, [r4, #52]	@ 0x34
 800448a:	e00d      	b.n	80044a8 <__sflush_r+0xac>
 800448c:	2301      	movs	r3, #1
 800448e:	4628      	mov	r0, r5
 8004490:	47b0      	blx	r6
 8004492:	4602      	mov	r2, r0
 8004494:	1c50      	adds	r0, r2, #1
 8004496:	d1c9      	bne.n	800442c <__sflush_r+0x30>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0c6      	beq.n	800442c <__sflush_r+0x30>
 800449e:	2b1d      	cmp	r3, #29
 80044a0:	d001      	beq.n	80044a6 <__sflush_r+0xaa>
 80044a2:	2b16      	cmp	r3, #22
 80044a4:	d11d      	bne.n	80044e2 <__sflush_r+0xe6>
 80044a6:	602f      	str	r7, [r5, #0]
 80044a8:	2000      	movs	r0, #0
 80044aa:	e021      	b.n	80044f0 <__sflush_r+0xf4>
 80044ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	e01a      	b.n	80044ea <__sflush_r+0xee>
 80044b4:	690f      	ldr	r7, [r1, #16]
 80044b6:	2f00      	cmp	r7, #0
 80044b8:	d0f6      	beq.n	80044a8 <__sflush_r+0xac>
 80044ba:	0793      	lsls	r3, r2, #30
 80044bc:	bf18      	it	ne
 80044be:	2300      	movne	r3, #0
 80044c0:	680e      	ldr	r6, [r1, #0]
 80044c2:	bf08      	it	eq
 80044c4:	694b      	ldreq	r3, [r1, #20]
 80044c6:	1bf6      	subs	r6, r6, r7
 80044c8:	600f      	str	r7, [r1, #0]
 80044ca:	608b      	str	r3, [r1, #8]
 80044cc:	2e00      	cmp	r6, #0
 80044ce:	ddeb      	ble.n	80044a8 <__sflush_r+0xac>
 80044d0:	4633      	mov	r3, r6
 80044d2:	463a      	mov	r2, r7
 80044d4:	4628      	mov	r0, r5
 80044d6:	6a21      	ldr	r1, [r4, #32]
 80044d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80044dc:	47e0      	blx	ip
 80044de:	2800      	cmp	r0, #0
 80044e0:	dc07      	bgt.n	80044f2 <__sflush_r+0xf6>
 80044e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044ea:	f04f 30ff 	mov.w	r0, #4294967295
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f2:	4407      	add	r7, r0
 80044f4:	1a36      	subs	r6, r6, r0
 80044f6:	e7e9      	b.n	80044cc <__sflush_r+0xd0>
 80044f8:	dfbffffe 	.word	0xdfbffffe

080044fc <_fflush_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	690b      	ldr	r3, [r1, #16]
 8004500:	4605      	mov	r5, r0
 8004502:	460c      	mov	r4, r1
 8004504:	b913      	cbnz	r3, 800450c <_fflush_r+0x10>
 8004506:	2500      	movs	r5, #0
 8004508:	4628      	mov	r0, r5
 800450a:	bd38      	pop	{r3, r4, r5, pc}
 800450c:	b118      	cbz	r0, 8004516 <_fflush_r+0x1a>
 800450e:	6a03      	ldr	r3, [r0, #32]
 8004510:	b90b      	cbnz	r3, 8004516 <_fflush_r+0x1a>
 8004512:	f7ff f9b1 	bl	8003878 <__sinit>
 8004516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f3      	beq.n	8004506 <_fflush_r+0xa>
 800451e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004520:	07d0      	lsls	r0, r2, #31
 8004522:	d404      	bmi.n	800452e <_fflush_r+0x32>
 8004524:	0599      	lsls	r1, r3, #22
 8004526:	d402      	bmi.n	800452e <_fflush_r+0x32>
 8004528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800452a:	f7ff fb9c 	bl	8003c66 <__retarget_lock_acquire_recursive>
 800452e:	4628      	mov	r0, r5
 8004530:	4621      	mov	r1, r4
 8004532:	f7ff ff63 	bl	80043fc <__sflush_r>
 8004536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004538:	4605      	mov	r5, r0
 800453a:	07da      	lsls	r2, r3, #31
 800453c:	d4e4      	bmi.n	8004508 <_fflush_r+0xc>
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	059b      	lsls	r3, r3, #22
 8004542:	d4e1      	bmi.n	8004508 <_fflush_r+0xc>
 8004544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004546:	f7ff fb8f 	bl	8003c68 <__retarget_lock_release_recursive>
 800454a:	e7dd      	b.n	8004508 <_fflush_r+0xc>

0800454c <__swhatbuf_r>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	460c      	mov	r4, r1
 8004550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004554:	4615      	mov	r5, r2
 8004556:	2900      	cmp	r1, #0
 8004558:	461e      	mov	r6, r3
 800455a:	b096      	sub	sp, #88	@ 0x58
 800455c:	da0c      	bge.n	8004578 <__swhatbuf_r+0x2c>
 800455e:	89a3      	ldrh	r3, [r4, #12]
 8004560:	2100      	movs	r1, #0
 8004562:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004566:	bf14      	ite	ne
 8004568:	2340      	movne	r3, #64	@ 0x40
 800456a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800456e:	2000      	movs	r0, #0
 8004570:	6031      	str	r1, [r6, #0]
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	b016      	add	sp, #88	@ 0x58
 8004576:	bd70      	pop	{r4, r5, r6, pc}
 8004578:	466a      	mov	r2, sp
 800457a:	f000 f849 	bl	8004610 <_fstat_r>
 800457e:	2800      	cmp	r0, #0
 8004580:	dbed      	blt.n	800455e <__swhatbuf_r+0x12>
 8004582:	9901      	ldr	r1, [sp, #4]
 8004584:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004588:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800458c:	4259      	negs	r1, r3
 800458e:	4159      	adcs	r1, r3
 8004590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004594:	e7eb      	b.n	800456e <__swhatbuf_r+0x22>

08004596 <__smakebuf_r>:
 8004596:	898b      	ldrh	r3, [r1, #12]
 8004598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800459a:	079d      	lsls	r5, r3, #30
 800459c:	4606      	mov	r6, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	d507      	bpl.n	80045b2 <__smakebuf_r+0x1c>
 80045a2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	6123      	str	r3, [r4, #16]
 80045aa:	2301      	movs	r3, #1
 80045ac:	6163      	str	r3, [r4, #20]
 80045ae:	b003      	add	sp, #12
 80045b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b2:	466a      	mov	r2, sp
 80045b4:	ab01      	add	r3, sp, #4
 80045b6:	f7ff ffc9 	bl	800454c <__swhatbuf_r>
 80045ba:	9f00      	ldr	r7, [sp, #0]
 80045bc:	4605      	mov	r5, r0
 80045be:	4639      	mov	r1, r7
 80045c0:	4630      	mov	r0, r6
 80045c2:	f7ff fbbd 	bl	8003d40 <_malloc_r>
 80045c6:	b948      	cbnz	r0, 80045dc <__smakebuf_r+0x46>
 80045c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045cc:	059a      	lsls	r2, r3, #22
 80045ce:	d4ee      	bmi.n	80045ae <__smakebuf_r+0x18>
 80045d0:	f023 0303 	bic.w	r3, r3, #3
 80045d4:	f043 0302 	orr.w	r3, r3, #2
 80045d8:	81a3      	strh	r3, [r4, #12]
 80045da:	e7e2      	b.n	80045a2 <__smakebuf_r+0xc>
 80045dc:	89a3      	ldrh	r3, [r4, #12]
 80045de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045e6:	81a3      	strh	r3, [r4, #12]
 80045e8:	9b01      	ldr	r3, [sp, #4]
 80045ea:	6020      	str	r0, [r4, #0]
 80045ec:	b15b      	cbz	r3, 8004606 <__smakebuf_r+0x70>
 80045ee:	4630      	mov	r0, r6
 80045f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045f4:	f000 f81e 	bl	8004634 <_isatty_r>
 80045f8:	b128      	cbz	r0, 8004606 <__smakebuf_r+0x70>
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f023 0303 	bic.w	r3, r3, #3
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	81a3      	strh	r3, [r4, #12]
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	431d      	orrs	r5, r3
 800460a:	81a5      	strh	r5, [r4, #12]
 800460c:	e7cf      	b.n	80045ae <__smakebuf_r+0x18>
	...

08004610 <_fstat_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	2300      	movs	r3, #0
 8004614:	4d06      	ldr	r5, [pc, #24]	@ (8004630 <_fstat_r+0x20>)
 8004616:	4604      	mov	r4, r0
 8004618:	4608      	mov	r0, r1
 800461a:	4611      	mov	r1, r2
 800461c:	602b      	str	r3, [r5, #0]
 800461e:	f7fc f87d 	bl	800071c <_fstat>
 8004622:	1c43      	adds	r3, r0, #1
 8004624:	d102      	bne.n	800462c <_fstat_r+0x1c>
 8004626:	682b      	ldr	r3, [r5, #0]
 8004628:	b103      	cbz	r3, 800462c <_fstat_r+0x1c>
 800462a:	6023      	str	r3, [r4, #0]
 800462c:	bd38      	pop	{r3, r4, r5, pc}
 800462e:	bf00      	nop
 8004630:	20000a68 	.word	0x20000a68

08004634 <_isatty_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	2300      	movs	r3, #0
 8004638:	4d05      	ldr	r5, [pc, #20]	@ (8004650 <_isatty_r+0x1c>)
 800463a:	4604      	mov	r4, r0
 800463c:	4608      	mov	r0, r1
 800463e:	602b      	str	r3, [r5, #0]
 8004640:	f7fc f87b 	bl	800073a <_isatty>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_isatty_r+0x1a>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_isatty_r+0x1a>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	20000a68 	.word	0x20000a68

08004654 <_sbrk_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	2300      	movs	r3, #0
 8004658:	4d05      	ldr	r5, [pc, #20]	@ (8004670 <_sbrk_r+0x1c>)
 800465a:	4604      	mov	r4, r0
 800465c:	4608      	mov	r0, r1
 800465e:	602b      	str	r3, [r5, #0]
 8004660:	f7fc f882 	bl	8000768 <_sbrk>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_sbrk_r+0x1a>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_sbrk_r+0x1a>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	20000a68 	.word	0x20000a68

08004674 <memchr>:
 8004674:	4603      	mov	r3, r0
 8004676:	b510      	push	{r4, lr}
 8004678:	b2c9      	uxtb	r1, r1
 800467a:	4402      	add	r2, r0
 800467c:	4293      	cmp	r3, r2
 800467e:	4618      	mov	r0, r3
 8004680:	d101      	bne.n	8004686 <memchr+0x12>
 8004682:	2000      	movs	r0, #0
 8004684:	e003      	b.n	800468e <memchr+0x1a>
 8004686:	7804      	ldrb	r4, [r0, #0]
 8004688:	3301      	adds	r3, #1
 800468a:	428c      	cmp	r4, r1
 800468c:	d1f6      	bne.n	800467c <memchr+0x8>
 800468e:	bd10      	pop	{r4, pc}

08004690 <_init>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	bf00      	nop
 8004694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004696:	bc08      	pop	{r3}
 8004698:	469e      	mov	lr, r3
 800469a:	4770      	bx	lr

0800469c <_fini>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	bf00      	nop
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr
